var MVS = function(_obj) {
    var _this;
    var MVS = {
        version: "",
        Game: {
            id: 0,
            appkey: ""
        },
        DEBUG: false,
        IsWss: false,
        IsNotice: true,
        SetWss: function(value) {
            this.IsWss = value;
        },
        Notice: function() {
            if (this.IsNotice) {
                console.warn("==================================Matchvs===================================");
                console.warn("             SDK_v3.7.7.+版本init接口和login接口参数做相应的调整");
                console.warn("         详细请看 http://www.matchvs.com/service?page=JavaScript");
                console.warn("============================================================================");
            }
        },
        Init: function() {
            this.Notice();
            if (MVS.Host.MAIN_URL === "@MAIN_URL") {
                MVS.Host.MAIN_URL = "https://sdk.matchvs.com";
            }
        },
        getNowTimeStr: function() {
            var date = new Date();
            var seperator1 = "-";
            var seperator2 = ":";
            var month = date.getMonth() + 1;
            var strDate = date.getDate();
            if (month >= 1 && month <= 9) {
                month = "0" + month;
            }
            if (strDate >= 0 && strDate <= 9) {
                strDate = "0" + strDate;
            }
            return "[" + date.getFullYear() + seperator1 + month + seperator1 + strDate + " " + date.getHours() + seperator2 + date.getMinutes() + seperator2 + date.getSeconds() + "." + date.getMilliseconds() + "]";
        },
        LgFormat: function(msg) {
            return "[MatchvsSDK][" + this.getNowTimeStr() + "][" + msg + "]";
        },
        Config: {
            HEART_BEAT_INTERVAL: 3e3,
            MAXPLAYER_LIMIT: 100,
            MINPLAYER_LIMIT: 2
        },
        Host: {
            MAIN_URL: "https://sdk-ge.matrix.jdcloud.com",
            HOST_GATWAY_ADDR: "",
            HOST_HOTEL_ADDR: "",
            HOST_WATCH_ADDR: "",
            CMSNS_URL: "",
            VS_USER_URL: "",
            VS_OPEN_URL: "",
            VS_PAY_URL: "",
            VS_PRODUCT_URL: ""
        },
        APIPATH: {
            HOSTLIST: "/v1/gateway/query",
            REGISTERUSER: "/wc3/regit.do"
        },
        TgRoomType: {
            NRoom: -1,
            PRoom: 0,
            WRoom: 1
        }
    };
    MVS.Init();
    _obj = MVS;
    return _obj;
}({});

var MatchvsLog = {
    toArray: function(argument) {
        var args = [];
        for (var i = 0; i < argument.length; i++) {
            args.push(argument[i]);
        }
        return args;
    }
};

function getNowFormatDate() {
    var date = new Date();
    var ___ = "-";
    var __ = ":";
    var month = date.getMonth() + 1;
    var strDate = date.getDate();
    if (month >= 1 && month <= 9) {
        month = "0" + month;
    }
    if (strDate >= 0 && strDate <= 9) {
        strDate = "0" + strDate;
    }
    return "[" + date.getFullYear() + ___ + month + ___ + strDate + " " + date.getHours() + __ + date.getMinutes() + __ + date.getSeconds() + "." + date.getMilliseconds() + "]";
}

MatchvsLog.openLog = function() {
    console.log("---- open log ----");
    if (typeof wx === "undefined") {
        MatchvsLog.logI = console.log.bind(console, "[INFO][Matchvs] ");
        MatchvsLog.logE = console.error.bind(console, "[ERROR][Matchvs] ");
    } else {
        MatchvsLog.logI = function() {
            var loc = "";
            try {
                throw new Error();
            } catch (e) {
                var line = e.stack.split(/\n/)[1];
                loc = line.slice(line.lastIndexOf("/") + 1, line.lastIndexOf(")"));
            }
            console.log("[INFO][Matchvs] " + getNowFormatDate() + " " + this.toArray(arguments) + " " + loc);
        };
        MatchvsLog.logE = function() {
            var loc = "";
            try {
                throw new Error();
            } catch (e) {
                var line = e.stack.split(/\n/)[1];
                loc = line.slice(line.lastIndexOf("/") + 1, line.lastIndexOf(")"));
            }
            console.error("[ERROR][Matchvs] " + getNowFormatDate() + " " + this.toArray(arguments) + " " + loc);
        };
    }
};

MatchvsLog.closeLog = function() {
    console.log("---- close log ----");
    MatchvsLog.logI = function() {};
    MatchvsLog.logE = function() {};
};

MatchvsLog.openLog();

(function(mvs) {
    var STATE_EM = {
        NONE: 0,
        INITING: 1,
        HAVE_INIT: 2,
        LOGINING: 4,
        HAVE_LOGIN: 8,
        IN_ROOM: 16,
        CREATEROOM: 32,
        JOIN_ROOMING: 64,
        LEAVE_ROOMING: 128,
        LOGOUTING: 256,
        RECONNECTING: 512,
        IN_WATCHING: 1024,
        IN_WATCH: 2048,
        LEAVE_WATCHING: 4096,
        TEAMMATCHING: 8192,
        IN_TEAM: 16384
    };
    mvs.ENGE_STATE = STATE_EM;
    function MvsState() {
        var state = STATE_EM.NONE;
        this.ReSet = function() {
            state = STATE_EM.NONE;
        };
        this.SetState = function(value) {
            state |= value;
        };
        this.DelState = function(value) {
            state &= ~value;
        };
        var IsState = function(value) {
            return (state & value) === value;
        };
        this.StateDoing = function() {
            if (IsState(STATE_EM.INITING)) return -3;
            if (IsState(STATE_EM.LOGINING)) return -5;
            if (IsState(STATE_EM.JOIN_ROOMING)) return -7;
            if (IsState(STATE_EM.CREATEROOM)) return -7;
            if (IsState(STATE_EM.LOGOUTING)) return -11;
            if (IsState(STATE_EM.IN_WATCHING)) return -12;
            if (IsState(STATE_EM.TEAMMATCHING)) return -13;
            if (IsState(STATE_EM.LEAVE_ROOMING)) return -10;
            if (IsState(STATE_EM.LEAVE_WATCHING)) return -14;
            return 0;
        };
        this.SetInit = function() {
            state = STATE_EM.NONE;
            this.SetState(STATE_EM.HAVE_INIT);
        };
        this.SetIniting = function() {
            state = STATE_EM.NONE;
            this.SetState(STATE_EM.INITING);
        };
        this.SetLogining = function() {
            this.DelState(STATE_EM.HAVE_LOGIN);
            this.SetState(STATE_EM.LOGINING);
        };
        this.SetLogin = function() {
            this.DelState(STATE_EM.LOGINING);
            this.SetState(STATE_EM.HAVE_LOGIN);
        };
        this.HaveInit = function() {
            if (IsState(STATE_EM.HAVE_INIT) === false) return -2;
            if (IsState(STATE_EM.INITING)) return -3;
            return 0;
        };
        this.HaveLogin = function() {
            var resNo = this.HaveInit();
            if (resNo !== 0) return resNo;
            if (!IsState(STATE_EM.HAVE_LOGIN)) return -4;
            return 0;
        };
        this.LoginCheck = function() {
            var resNo = this.StateDoing();
            if (resNo < 0) return resNo;
            resNo = this.HaveInit();
            if (resNo < 0) return resNo;
            if (IsState(STATE_EM.HAVE_LOGIN)) return -6;
            return 0;
        };
        this.SetJoinRooming = function() {
            this.SetState(STATE_EM.JOIN_ROOMING);
        };
        this.SetInRoom = function() {
            this.SetState(STATE_EM.IN_ROOM);
        };
        this.SetCreateRoom = function() {
            this.DelState(STATE_EM.IN_ROOM);
            this.SetState(STATE_EM.CREATEROOM);
        };
        this.DelCreateRoom = function() {
            this.DelState(STATE_EM.CREATEROOM);
        };
        this.IsCreateRoom = function() {
            return IsState(STATE_EM.CREATEROOM);
        };
        this.DelJoinRooming = function() {
            this.DelState(STATE_EM.JOIN_ROOMING);
        };
        this.IsJoinRooming = function() {
            return IsState(STATE_EM.JOIN_ROOMING);
        };
        this.DelInRoom = function() {
            this.DelState(STATE_EM.CREATEROOM);
            this.DelState(STATE_EM.JOIN_ROOMING);
            this.DelState(STATE_EM.IN_ROOM);
            this.DelState(STATE_EM.LEAVE_ROOMING);
            this.DelState(STATE_EM.LEAVE_WATCHING);
            this.DelState(STATE_EM.IN_WATCH);
            this.DelState(STATE_EM.IN_ROOM);
        };
        this.HaveInRoom = function() {
            var resNo = this.HaveLogin();
            if (resNo < 0) return resNo;
            resNo = this.StateDoing();
            if (resNo < 0) return resNo;
            if (!IsState(STATE_EM.IN_ROOM)) return -6;
            return 0;
        };
        this.InRoomCheck = function() {
            var resNo = this.HaveLogin();
            if (resNo < 0) return resNo;
            resNo = this.StateDoing();
            if (resNo < 0) return resNo;
            if (IsState(STATE_EM.IN_ROOM)) return -8;
            if (IsState(STATE_EM.IN_WATCH)) return -8;
            return 0;
        };
        this.IsReconnecting = function() {
            if (IsState(STATE_EM.RECONNECTING)) return -9;
            return 0;
        };
        this.ReconnectCheck = function() {
            var resNo = this.HaveInit();
            if (resNo < 0) return resNo;
            if (IsState(STATE_EM.RECONNECTING)) return -9;
            if (IsState(STATE_EM.IN_ROOM)) return -8;
            return 0;
        };
        this.SetReconnecting = function() {
            this.SetState(STATE_EM.RECONNECTING);
        };
        this.DelReconnecting = function() {
            this.DelState(STATE_EM.RECONNECTING);
        };
        this.LeaveRoomCheck = function() {
            var resNo = this.HaveLogin();
            if (resNo < 0) return resNo;
            resNo = this.StateDoing();
            if (resNo < 0) return resNo;
            return 0;
        };
        this.SetLeaveRooming = function() {
            this.SetState(STATE_EM.LEAVE_ROOMING);
        };
        this.IsLeaveRooming = function() {
            return IsState(STATE_EM.LEAVE_ROOMING);
        };
        this.SetLoginOuting = function() {
            this.SetState(STATE_EM.LOGOUTING);
        };
        this.IsLoginOuting = function() {
            return IsState(STATE_EM.LOGOUTING);
        };
        this.SetJoinWatching = function() {
            this.SetState(STATE_EM.IN_WATCHING);
        };
        this.DelJoinWatching = function() {
            this.DelState(STATE_EM.IN_WATCHING);
        };
        this.SetInWatch = function() {
            this.SetState(STATE_EM.IN_WATCH);
        };
        this.HaveInWatch = function() {
            var resNo = this.HaveLogin();
            if (resNo !== 0) return resNo;
            resNo = this.StateDoing();
            if (resNo !== 0) return resNo;
            if (!IsState(STATE_EM.IN_WATCH)) return -6;
            return 0;
        };
        this.InWatchCheck = function() {
            var resNo = this.HaveLogin();
            if (resNo !== 0) return resNo;
            resNo = this.StateDoing();
            if (resNo !== 0) return resNo;
            if (IsState(STATE_EM.IN_WATCH)) return -8;
            return 0;
        };
        this.SetTeamMatching = function() {
            this.SetState(STATE_EM.TEAMMATCHING);
        };
        this.DelTeamMatching = function() {
            this.DelState(STATE_EM.TEAMMATCHING);
        };
        this.IsTeamMatching = function() {
            return IsState(STATE_EM.TEAMMATCHING);
        };
    }
    mvs.MvsState = MvsState;
})(MVS || {});

var hexcase = 0;

var b64pad = "";

var chrsz = 8;

function hex_md5(s) {
    return binl2hex(core_md5(str2binl(s), s.length * chrsz));
}

function b64_md5(s) {
    return binl2b64(core_md5(str2binl(s), s.length * chrsz));
}

function str_md5(s) {
    return binl2str(core_md5(str2binl(s), s.length * chrsz));
}

function hex_hmac_md5(key, data) {
    return binl2hex(core_hmac_md5(key, data));
}

function b64_hmac_md5(key, data) {
    return binl2b64(core_hmac_md5(key, data));
}

function str_hmac_md5(key, data) {
    return binl2str(core_hmac_md5(key, data));
}

function md5_vm_test() {
    return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
}

function core_md5(x, len) {
    x[len >> 5] |= 128 << len % 32;
    x[(len + 64 >>> 9 << 4) + 14] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
}

function md5_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}

function md5_ff(a, b, c, d, x, s, t) {
    return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5_gg(a, b, c, d, x, s, t) {
    return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5_hh(a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5_ii(a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}

function core_hmac_md5(key, data) {
    var bkey = str2binl(key);
    if (bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);
    var ipad = Array(16), opad = Array(16);
    for (var i = 0; i < 16; i++) {
        ipad[i] = bkey[i] ^ 909522486;
        opad[i] = bkey[i] ^ 1549556828;
    }
    var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
    return core_md5(opad.concat(hash), 512 + 128);
}

function safe_add(x, y) {
    var lsw = (x & 65535) + (y & 65535);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 65535;
}

function bit_rol(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}

function str2binl(str) {
    var bin = Array();
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < str.length * chrsz; i += chrsz) bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
    return bin;
}

function binl2str(bin) {
    var str = "";
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < bin.length * 32; i += chrsz) str += String.fromCharCode(bin[i >> 5] >>> i % 32 & mask);
    return str;
}

function binl2hex(binarray) {
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var str = "";
    for (var i = 0; i < binarray.length * 4; i++) {
        str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 15) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 15);
    }
    return str;
}

function binl2b64(binarray) {
    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var str = "";
    for (var i = 0; i < binarray.length * 4; i += 3) {
        var triplet = (binarray[i >> 2] >> 8 * (i % 4) & 255) << 16 | (binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4) & 255) << 8 | binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4) & 255;
        for (var j = 0; j < 4; j++) {
            if (i * 8 + j * 6 > binarray.length * 32) str += b64pad; else str += tab.charAt(triplet >> 6 * (3 - j) & 63);
        }
    }
    return str;
}

var format = function(fmt) {
    var argIndex = 1, args = [].slice.call(arguments), i = 0, n = fmt.length, result = "", c, escaped = false, arg, tmp, leadingZero = false, precision, nextArg = function() {
        return args[argIndex++];
    }, slurpNumber = function() {
        var digits = "";
        while (/\d/.test(fmt[i])) {
            digits += fmt[i++];
            c = fmt[i];
        }
        return digits.length > 0 ? parseInt(digits) : null;
    };
    for (;i < n; ++i) {
        c = fmt[i];
        if (escaped) {
            escaped = false;
            if (c == ".") {
                leadingZero = false;
                c = fmt[++i];
            } else if (c == "0" && fmt[i + 1] == ".") {
                leadingZero = true;
                i += 2;
                c = fmt[i];
            } else {
                leadingZero = true;
            }
            precision = slurpNumber();
            switch (c) {
              case "b":
                result += parseInt(nextArg(), 10).toString(2);
                break;

              case "c":
                arg = nextArg();
                if (typeof arg === "string" || arg instanceof String) result += arg; else result += String.fromCharCode(parseInt(arg, 10));
                break;

              case "d":
                result += parseInt(nextArg(), 10);
                break;

              case "f":
                tmp = String(parseFloat(nextArg()).toFixed(precision || 6));
                result += leadingZero ? tmp : tmp.replace(/^0/, "");
                break;

              case "j":
                result += JSON.stringify(nextArg());
                break;

              case "o":
                result += "0" + parseInt(nextArg(), 10).toString(8);
                break;

              case "s":
                result += nextArg();
                break;

              case "x":
                result += "0x" + parseInt(nextArg(), 10).toString(16);
                break;

              case "X":
                result += "0x" + parseInt(nextArg(), 10).toString(16).toUpperCase();
                break;

              default:
                result += c;
                break;
            }
        } else if (c === "%") {
            escaped = true;
        } else {
            result += c;
        }
    }
    return result;
};

if (typeof String.prototype.startsWith !== "function") {
    String.prototype.startsWith = function(prefix) {
        return this.slice(0, prefix.length) === prefix;
    };
}

if (typeof String.prototype.endsWith !== "function") {
    String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}

function IncludeJS(fileName) {
    new_element = document.createElement("script");
    new_element.setAttribute("type", "text/javascript");
    new_element.setAttribute("src", fileName);
    document.body.appendChild(new_element);
}

function MSExtend(Child, Parent) {
    var p = Parent.prototype;
    var c = Child.prototype;
    for (var i in p) {
        c[i] = p[i];
    }
}

function stringToUtf8ByteArray(a) {
    if (!(a && typeof a === "string")) {
        return new Uint8Array(0);
    }
    for (var b = [], c = 0, d = 0; d < a.length; d++) {
        var e = a.charCodeAt(d);
        128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (55296 == (e & 64512) && d + 1 < a.length && 56320 == (a.charCodeAt(d + 1) & 64512) ? (e = 65536 + ((e & 1023) << 10) + (a.charCodeAt(++d) & 1023), 
        b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128) : b[c++] = e >> 12 | 224, b[c++] = e >> 6 & 63 | 128), 
        b[c++] = e & 63 | 128);
    }
    var buf = new Uint8Array(b.length);
    for (var i = 0; i < buf.length; i++) {
        buf[i] = b[i];
    }
    return buf;
}

function utf8ByteArrayToString(a) {
    for (var b = [], c = 0, d = 0; c < a.length; ) {
        var e = a[c++];
        if (128 > e) b[d++] = String.fromCharCode(e); else if (191 < e && 224 > e) {
            var f = a[c++];
            b[d++] = String.fromCharCode((e & 31) << 6 | f & 63);
        } else if (239 < e && 365 > e) {
            var f = a[c++], g = a[c++], h = a[c++], e = ((e & 7) << 18 | (f & 63) << 12 | (g & 63) << 6 | h & 63) - 65536;
            b[d++] = String.fromCharCode(55296 + (e >> 10));
            b[d++] = String.fromCharCode(56320 + (e & 1023));
        } else f = a[c++], g = a[c++], b[d++] = String.fromCharCode((e & 15) << 12 | (f & 63) << 6 | g & 63);
    }
    return b.join("");
}

function LocalStore_Save(key, value) {
    if (window.localStorage) {
        localStorage.setItem(key, value);
        return true;
    }
    if (typeof wx !== "undefined") {
        wx.setStorageSync(key, value);
        return true;
    } else {
        return false;
    }
}

function LocalStore_Clear() {
    if (window.localStorage) {
        localStorage.clear();
        return true;
    }
    if (typeof wx !== "undefined") {
        wx.clearStorageSync();
        return true;
    } else {
        return false;
    }
}

function LocalStore_Load(key) {
    if (window.localStorage) {
        return localStorage.getItem(key);
    }
    if (typeof wx !== "undefined") {
        return wx.getStorageSync(key);
    } else {
        return null;
    }
}

function isIE() {
    return !!window.ActiveXObject || "ActiveXObject" in window;
}

(function(_obj) {
    var MsUtil = {
        isNeedUseWSS: function() {
            if (MVS.IsWss) {
                return true;
            }
            if (typeof wx !== "undefined") {
                return true;
            }
            return typeof BK !== "undefined";
        },
        getLiveUrl: function(bookInfo, gameID, roomID, setID) {
            var param = "live=" + bookInfo.getHoteladdr() + "&gameID=" + gameID + "&roomID=" + roomID + "&setID=" + setID;
            return MVS.IsWss ? "wss://" + bookInfo.getWssproxy() + "/watch?" + param : "ws://" + bookInfo.getHoteladdr();
        },
        getHotelUrl: function(bookInfo) {
            return this.isNeedUseWSS() ? "wss://" + bookInfo.getWssproxy() + "/proxy?hotel=" + bookInfo.getHoteladdr() : "ws://" + bookInfo.getHoteladdr();
        }
    };
    _obj.MsUtil = MsUtil;
    var MvsTicker = function() {
        var _tickMap = {};
        var _count = 0;
        function MvsTicker() {}
        if ("undefined" !== typeof BK) {
            MvsTicker.prototype.setInterval = function(callback, interval) {
                var t = new BK.Ticker();
                t.interval = interval * 6 / 100;
                t.setTickerCallBack(callback);
                var flag = ++_count;
                _tickMap[flag] = t;
                return flag;
            };
            MvsTicker.prototype.clearInterval = function(flag) {
                var ti = _tickMap[flag];
                if (ti) {
                    ti.dispose();
                    delete _tickMap[flag];
                }
            };
        } else {
            MvsTicker.prototype.setInterval = function(callback, interval) {
                return setInterval(callback, interval);
            };
            MvsTicker.prototype.clearInterval = function(flag) {
                clearInterval(flag);
            };
        }
        return MvsTicker;
    }();
    _obj.MvsTicker = MvsTicker;
    _obj.ticker = new MvsTicker();
    return _obj;
})(MVS || {});

(function(_super) {
    var AppKeyCheck = function(_obj) {
        var _tags = [ "J" ];
        var getTag = function(appkey) {
            var tags = appkey.split("#");
            if (tags.length !== 2) {
                return "";
            }
            return tags[1];
        };
        var AppkeyCheck = function() {};
        AppkeyCheck.prototype.isInvailed = function(appkey) {
            var tag = getTag(appkey);
            for (var i = 0; i < _tags.length; i++) {
                if (tag === _tags[i]) {
                    return true;
                }
            }
            console.error("[游戏账户与渠道不匹配，请使用 JingDong 账号登录Jingdong游戏云官网创建游戏]");
            return true;
        };
        _obj = AppkeyCheck;
        return _obj;
    }(AppKeyCheck || {});
    _super.AppKeyCheck = AppKeyCheck;
    return _super;
})(MVS || {});

(function() {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof _require && _require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw a.code = "MODULE_NOT_FOUND", a;
                }
                var p = n[i] = {
                    exports: {}
                };
                e[i][0].call(p.exports, function(r) {
                    var n = e[i][1][r];
                    return o(n || r);
                }, p, p.exports, r, e, n, t);
            }
            return n[i].exports;
        }
        for (var u = "function" == typeof _require && _require, i = 0; i < t.length; i++) o(t[i]);
        return o;
    }
    return r;
})()({
    1: [ function(_require, module, exports) {
        "use strict";
        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
        var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
        }
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;
        function getLens(b64) {
            var len = b64.length;
            if (len % 4 > 0) {
                throw new Error("Invalid string. Length must be a multiple of 4");
            }
            var validLen = b64.indexOf("=");
            if (validLen === -1) validLen = len;
            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
            return [ validLen, placeHoldersLen ];
        }
        function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function _byteLength(b64, validLen, placeHoldersLen) {
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
            var curByte = 0;
            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
            for (var i = 0; i < len; i += 4) {
                tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                arr[curByte++] = tmp >> 16 & 255;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
            }
            if (placeHoldersLen === 2) {
                tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                arr[curByte++] = tmp & 255;
            }
            if (placeHoldersLen === 1) {
                tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
            }
            return arr;
        }
        function tripletToBase64(num) {
            return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
        }
        function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
                output.push(tripletToBase64(tmp));
            }
            return output.join("");
        }
        function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3;
            var parts = [];
            var maxChunkLength = 16383;
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
            }
            if (extraBytes === 1) {
                tmp = uint8[len - 1];
                parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
            } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
            }
            return parts.join("");
        }
    }, {} ],
    2: [ function(_require, module, exports) {
        "use strict";
        var base64 = _require("base64-js");
        var ieee754 = _require("ieee754");
        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        var K_MAX_LENGTH = 2147483647;
        exports.kMaxLength = K_MAX_LENGTH;
        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
            console.error("This browser lacks typed array (Uint8Array) support which is required by " + "`buffer` v5.x. Use `buffer` v4.x if you _require old browser support.");
        }
        function typedArraySupport() {
            try {
                var arr = new Uint8Array(1);
                arr.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function() {
                        return 42;
                    }
                };
                return arr.foo() === 42;
            } catch (e) {
                return false;
            }
        }
        Object.defineProperty(Buffer.prototype, "parent", {
            enumerable: true,
            get: function() {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.buffer;
            }
        });
        Object.defineProperty(Buffer.prototype, "offset", {
            enumerable: true,
            get: function() {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.byteOffset;
            }
        });
        function createBuffer(length) {
            if (length > K_MAX_LENGTH) {
                throw new RangeError('The value "' + length + '" is invalid for option "size"');
            }
            var buf = new Uint8Array(length);
            buf.__proto__ = Buffer.prototype;
            return buf;
        }
        function Buffer(arg, encodingOrOffset, length) {
            if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                    throw new TypeError('The "string" argument must be of type string. Received type number');
                }
                return allocUnsafe(arg);
            }
            return from(arg, encodingOrOffset, length);
        }
        if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
            Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
            });
        }
        Buffer.poolSize = 8192;
        function from(value, encodingOrOffset, length) {
            if (typeof value === "string") {
                return fromString(value, encodingOrOffset);
            }
            if (ArrayBuffer.isView(value)) {
                return fromArrayLike(value);
            }
            if (value == null) {
                throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof value);
            }
            if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                return fromArrayBuffer(value, encodingOrOffset, length);
            }
            if (typeof value === "number") {
                throw new TypeError('The "value" argument must not be of type number. Received type number');
            }
            var valueOf = value.valueOf && value.valueOf();
            if (valueOf != null && valueOf !== value) {
                return Buffer.from(valueOf, encodingOrOffset, length);
            }
            var b = fromObject(value);
            if (b) return b;
            if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
                return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
            }
            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof value);
        }
        Buffer.from = function(value, encodingOrOffset, length) {
            return from(value, encodingOrOffset, length);
        };
        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;
        function assertSize(size) {
            if (typeof size !== "number") {
                throw new TypeError('"size" argument must be of type number');
            } else if (size < 0) {
                throw new RangeError('The value "' + size + '" is invalid for option "size"');
            }
        }
        function alloc(size, fill, encoding) {
            assertSize(size);
            if (size <= 0) {
                return createBuffer(size);
            }
            if (fill !== undefined) {
                return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
            }
            return createBuffer(size);
        }
        Buffer.alloc = function(size, fill, encoding) {
            return alloc(size, fill, encoding);
        };
        function allocUnsafe(size) {
            assertSize(size);
            return createBuffer(size < 0 ? 0 : checked(size) | 0);
        }
        Buffer.allocUnsafe = function(size) {
            return allocUnsafe(size);
        };
        Buffer.allocUnsafeSlow = function(size) {
            return allocUnsafe(size);
        };
        function fromString(string, encoding) {
            if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
            }
            if (!Buffer.isEncoding(encoding)) {
                throw new TypeError("Unknown encoding: " + encoding);
            }
            var length = byteLength(string, encoding) | 0;
            var buf = createBuffer(length);
            var actual = buf.write(string, encoding);
            if (actual !== length) {
                buf = buf.slice(0, actual);
            }
            return buf;
        }
        function fromArrayLike(array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0;
            var buf = createBuffer(length);
            for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
            }
            return buf;
        }
        function fromArrayBuffer(array, byteOffset, length) {
            if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds');
            }
            if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds');
            }
            var buf;
            if (byteOffset === undefined && length === undefined) {
                buf = new Uint8Array(array);
            } else if (length === undefined) {
                buf = new Uint8Array(array, byteOffset);
            } else {
                buf = new Uint8Array(array, byteOffset, length);
            }
            buf.__proto__ = Buffer.prototype;
            return buf;
        }
        function fromObject(obj) {
            if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);
                if (buf.length === 0) {
                    return buf;
                }
                obj.copy(buf, 0, 0, len);
                return buf;
            }
            if (obj.length !== undefined) {
                if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                    return createBuffer(0);
                }
                return fromArrayLike(obj);
            }
            if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data);
            }
        }
        function checked(length) {
            if (length >= K_MAX_LENGTH) {
                throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
            }
            return length | 0;
        }
        function SlowBuffer(length) {
            if (+length != length) {
                length = 0;
            }
            return Buffer.alloc(+length);
        }
        Buffer.isBuffer = function isBuffer(b) {
            return b != null && b._isBuffer === true && b !== Buffer.prototype;
        };
        Buffer.compare = function compare(a, b) {
            if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
            if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
            }
            if (a === b) return 0;
            var x = a.length;
            var y = b.length;
            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                    x = a[i];
                    y = b[i];
                    break;
                }
            }
            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
        };
        Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;

              default:
                return false;
            }
        };
        Buffer.concat = function concat(list, length) {
            if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
            }
            if (list.length === 0) {
                return Buffer.alloc(0);
            }
            var i;
            if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                    length += list[i].length;
                }
            }
            var buffer = Buffer.allocUnsafe(length);
            var pos = 0;
            for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (isInstance(buf, Uint8Array)) {
                    buf = Buffer.from(buf);
                }
                if (!Buffer.isBuffer(buf)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer, pos);
                pos += buf.length;
            }
            return buffer;
        };
        function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
                return string.length;
            }
            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                return string.byteLength;
            }
            if (typeof string !== "string") {
                throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + "Received type " + typeof string);
            }
            var len = string.length;
            var mustMatch = arguments.length > 2 && arguments[2] === true;
            if (!mustMatch && len === 0) return 0;
            var loweredCase = false;
            for (;;) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;

                  case "utf8":
                  case "utf-8":
                    return utf8ToBytes(string).length;

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;

                  case "hex":
                    return len >>> 1;

                  case "base64":
                    return base64ToBytes(string).length;

                  default:
                    if (loweredCase) {
                        return mustMatch ? -1 : utf8ToBytes(string).length;
                    }
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
            }
        }
        Buffer.byteLength = byteLength;
        function slowToString(encoding, start, end) {
            var loweredCase = false;
            if (start === undefined || start < 0) {
                start = 0;
            }
            if (start > this.length) {
                return "";
            }
            if (end === undefined || end > this.length) {
                end = this.length;
            }
            if (end <= 0) {
                return "";
            }
            end >>>= 0;
            start >>>= 0;
            if (end <= start) {
                return "";
            }
            if (!encoding) encoding = "utf8";
            while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);

                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);

                  case "ascii":
                    return asciiSlice(this, start, end);

                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);

                  case "base64":
                    return base64Slice(this, start, end);

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);

                  default:
                    if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
            }
        }
        Buffer.prototype._isBuffer = true;
        function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m];
            b[m] = i;
        }
        Buffer.prototype.swap16 = function swap16() {
            var len = this.length;
            if (len % 2 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 16-bits");
            }
            for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
            }
            return this;
        };
        Buffer.prototype.swap32 = function swap32() {
            var len = this.length;
            if (len % 4 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 32-bits");
            }
            for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
            }
            return this;
        };
        Buffer.prototype.swap64 = function swap64() {
            var len = this.length;
            if (len % 8 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 64-bits");
            }
            for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
            }
            return this;
        };
        Buffer.prototype.toString = function toString() {
            var length = this.length;
            if (length === 0) return "";
            if (arguments.length === 0) return utf8Slice(this, 0, length);
            return slowToString.apply(this, arguments);
        };
        Buffer.prototype.toLocaleString = Buffer.prototype.toString;
        Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
            if (this === b) return true;
            return Buffer.compare(this, b) === 0;
        };
        Buffer.prototype.inspect = function inspect() {
            var str = "";
            var max = exports.INSPECT_MAX_BYTES;
            str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
            if (this.length > max) str += " ... ";
            return "<Buffer " + str + ">";
        };
        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
            if (isInstance(target, Uint8Array)) {
                target = Buffer.from(target, target.offset, target.byteLength);
            }
            if (!Buffer.isBuffer(target)) {
                throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + "Received type " + typeof target);
            }
            if (start === undefined) {
                start = 0;
            }
            if (end === undefined) {
                end = target ? target.length : 0;
            }
            if (thisStart === undefined) {
                thisStart = 0;
            }
            if (thisEnd === undefined) {
                thisEnd = this.length;
            }
            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError("out of range index");
            }
            if (thisStart >= thisEnd && start >= end) {
                return 0;
            }
            if (thisStart >= thisEnd) {
                return -1;
            }
            if (start >= end) {
                return 1;
            }
            start >>>= 0;
            end >>>= 0;
            thisStart >>>= 0;
            thisEnd >>>= 0;
            if (this === target) return 0;
            var x = thisEnd - thisStart;
            var y = end - start;
            var len = Math.min(x, y);
            var thisCopy = this.slice(thisStart, thisEnd);
            var targetCopy = target.slice(start, end);
            for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                    x = thisCopy[i];
                    y = targetCopy[i];
                    break;
                }
            }
            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
        };
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
            if (buffer.length === 0) return -1;
            if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
            } else if (byteOffset > 2147483647) {
                byteOffset = 2147483647;
            } else if (byteOffset < -2147483648) {
                byteOffset = -2147483648;
            }
            byteOffset = +byteOffset;
            if (numberIsNaN(byteOffset)) {
                byteOffset = dir ? 0 : buffer.length - 1;
            }
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
            if (byteOffset >= buffer.length) {
                if (dir) return -1; else byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
                if (dir) byteOffset = 0; else return -1;
            }
            if (typeof val === "string") {
                val = Buffer.from(val, encoding);
            }
            if (Buffer.isBuffer(val)) {
                if (val.length === 0) {
                    return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            } else if (typeof val === "number") {
                val = val & 255;
                if (typeof Uint8Array.prototype.indexOf === "function") {
                    if (dir) {
                        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                    } else {
                        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                    }
                }
                return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
            }
            throw new TypeError("val must be string, number or Buffer");
        }
        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1;
            var arrLength = arr.length;
            var valLength = val.length;
            if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();
                if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                    if (arr.length < 2 || val.length < 2) {
                        return -1;
                    }
                    indexSize = 2;
                    arrLength /= 2;
                    valLength /= 2;
                    byteOffset /= 2;
                }
            }
            function read(buf, i) {
                if (indexSize === 1) {
                    return buf[i];
                } else {
                    return buf.readUInt16BE(i * indexSize);
                }
            }
            var i;
            if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                    if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                        if (foundIndex === -1) foundIndex = i;
                        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                    } else {
                        if (foundIndex !== -1) i -= i - foundIndex;
                        foundIndex = -1;
                    }
                }
            } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                    var found = true;
                    for (var j = 0; j < valLength; j++) {
                        if (read(arr, i + j) !== read(val, j)) {
                            found = false;
                            break;
                        }
                    }
                    if (found) return i;
                }
            }
            return -1;
        }
        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1;
        };
        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };
        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };
        function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;
            if (!length) {
                length = remaining;
            } else {
                length = Number(length);
                if (length > remaining) {
                    length = remaining;
                }
            }
            var strLen = string.length;
            if (length > strLen / 2) {
                length = strLen / 2;
            }
            for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed)) return i;
                buf[offset + i] = parsed;
            }
            return i;
        }
        function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }
        function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
        }
        function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length);
        }
        function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
        }
        function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }
        Buffer.prototype.write = function write(string, offset, length, encoding) {
            if (offset === undefined) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
            } else if (length === undefined && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
            } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                    length = length >>> 0;
                    if (encoding === undefined) encoding = "utf8";
                } else {
                    encoding = length;
                    length = undefined;
                }
            } else {
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
            }
            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;
            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError("Attempt to write outside buffer bounds");
            }
            if (!encoding) encoding = "utf8";
            var loweredCase = false;
            for (;;) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);

                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);

                  case "ascii":
                    return asciiWrite(this, string, offset, length);

                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);

                  case "base64":
                    return base64Write(this, string, offset, length);

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);

                  default:
                    if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
            }
        };
        Buffer.prototype.toJSON = function toJSON() {
            return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
            };
        };
        function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
            } else {
                return base64.fromByteArray(buf.slice(start, end));
            }
        }
        function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            var res = [];
            var i = start;
            while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint;
                    switch (bytesPerSequence) {
                      case 1:
                        if (firstByte < 128) {
                            codePoint = firstByte;
                        }
                        break;

                      case 2:
                        secondByte = buf[i + 1];
                        if ((secondByte & 192) === 128) {
                            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                            if (tempCodePoint > 127) {
                                codePoint = tempCodePoint;
                            }
                        }
                        break;

                      case 3:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                                codePoint = tempCodePoint;
                            }
                        }
                        break;

                      case 4:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        fourthByte = buf[i + 3];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                                codePoint = tempCodePoint;
                            }
                        }
                    }
                }
                if (codePoint === null) {
                    codePoint = 65533;
                    bytesPerSequence = 1;
                } else if (codePoint > 65535) {
                    codePoint -= 65536;
                    res.push(codePoint >>> 10 & 1023 | 55296);
                    codePoint = 56320 | codePoint & 1023;
                }
                res.push(codePoint);
                i += bytesPerSequence;
            }
            return decodeCodePointsArray(res);
        }
        var MAX_ARGUMENTS_LENGTH = 4096;
        function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;
            if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
            }
            var res = "";
            var i = 0;
            while (i < len) {
                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
            }
            return res;
        }
        function asciiSlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);
            for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 127);
            }
            return ret;
        }
        function latin1Slice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);
            for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
            }
            return ret;
        }
        function hexSlice(buf, start, end) {
            var len = buf.length;
            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;
            var out = "";
            for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
            }
            return out;
        }
        function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = "";
            for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
            }
            return res;
        }
        Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;
            if (start < 0) {
                start += len;
                if (start < 0) start = 0;
            } else if (start > len) {
                start = len;
            }
            if (end < 0) {
                end += len;
                if (end < 0) end = 0;
            } else if (end > len) {
                end = len;
            }
            if (end < start) end = start;
            var newBuf = this.subarray(start, end);
            newBuf.__proto__ = Buffer.prototype;
            return newBuf;
        };
        function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
            if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
        }
        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 256)) {
                val += this[offset + i] * mul;
            }
            return val;
        };
        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
            }
            var val = this[offset + --byteLength];
            var mul = 1;
            while (byteLength > 0 && (mul *= 256)) {
                val += this[offset + --byteLength] * mul;
            }
            return val;
        };
        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
        };
        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | this[offset + 1] << 8;
        };
        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] << 8 | this[offset + 1];
        };
        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
        };
        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };
        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 256)) {
                val += this[offset + i] * mul;
            }
            mul *= 128;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
        };
        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];
            while (i > 0 && (mul *= 256)) {
                val += this[offset + --i] * mul;
            }
            mul *= 128;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
        };
        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 128)) return this[offset];
            return (255 - this[offset] + 1) * -1;
        };
        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | this[offset + 1] << 8;
            return val & 32768 ? val | 4294901760 : val;
        };
        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | this[offset] << 8;
            return val & 32768 ? val | 4294901760 : val;
        };
        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };
        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };
        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, true, 23, 4);
        };
        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, false, 23, 4);
        };
        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, true, 52, 8);
        };
        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, false, 52, 8);
        };
        function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length) throw new RangeError("Index out of range");
        }
        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
            }
            var mul = 1;
            var i = 0;
            this[offset] = value & 255;
            while (++i < byteLength && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
            }
            return offset + byteLength;
        };
        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
            }
            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 255;
            while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
            }
            return offset + byteLength;
        };
        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
            this[offset] = value & 255;
            return offset + 1;
        };
        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
            this[offset] = value & 255;
            this[offset + 1] = value >>> 8;
            return offset + 2;
        };
        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
            this[offset] = value >>> 8;
            this[offset + 1] = value & 255;
            return offset + 2;
        };
        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 255;
            return offset + 4;
        };
        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 255;
            return offset + 4;
        };
        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }
            var i = 0;
            var mul = 1;
            var sub = 0;
            this[offset] = value & 255;
            while (++i < byteLength && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                    sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
            }
            return offset + byteLength;
        };
        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }
            var i = byteLength - 1;
            var mul = 1;
            var sub = 0;
            this[offset + i] = value & 255;
            while (--i >= 0 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                    sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
            }
            return offset + byteLength;
        };
        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
            if (value < 0) value = 255 + value + 1;
            this[offset] = value & 255;
            return offset + 1;
        };
        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
            this[offset] = value & 255;
            this[offset + 1] = value >>> 8;
            return offset + 2;
        };
        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
            this[offset] = value >>> 8;
            this[offset + 1] = value & 255;
            return offset + 2;
        };
        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
            this[offset] = value & 255;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
            return offset + 4;
        };
        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
            if (value < 0) value = 4294967295 + value + 1;
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 255;
            return offset + 4;
        };
        function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError("Index out of range");
            if (offset < 0) throw new RangeError("Index out of range");
        }
        function writeFloat(buf, value, offset, littleEndian, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4;
        }
        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert);
        };
        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert);
        };
        function writeDouble(buf, value, offset, littleEndian, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8;
        }
        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert);
        };
        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert);
        };
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
            if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start;
            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0;
            if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
            }
            if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
            if (end < 0) throw new RangeError("sourceEnd out of bounds");
            if (end > this.length) end = this.length;
            if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
            }
            var len = end - start;
            if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
                this.copyWithin(targetStart, start, end);
            } else if (this === target && start < targetStart && targetStart < end) {
                for (var i = len - 1; i >= 0; --i) {
                    target[i + targetStart] = this[i + start];
                }
            } else {
                Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
            }
            return len;
        };
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
            if (typeof val === "string") {
                if (typeof start === "string") {
                    encoding = start;
                    start = 0;
                    end = this.length;
                } else if (typeof end === "string") {
                    encoding = end;
                    end = this.length;
                }
                if (encoding !== undefined && typeof encoding !== "string") {
                    throw new TypeError("encoding must be a string");
                }
                if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
                    throw new TypeError("Unknown encoding: " + encoding);
                }
                if (val.length === 1) {
                    var code = val.charCodeAt(0);
                    if (encoding === "utf8" && code < 128 || encoding === "latin1") {
                        val = code;
                    }
                }
            } else if (typeof val === "number") {
                val = val & 255;
            }
            if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
            }
            if (end <= start) {
                return this;
            }
            start = start >>> 0;
            end = end === undefined ? this.length : end >>> 0;
            if (!val) val = 0;
            var i;
            if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                    this[i] = val;
                }
            } else {
                var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                    throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                }
                for (i = 0; i < end - start; ++i) {
                    this[i + start] = bytes[i % len];
                }
            }
            return this;
        };
        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
        function base64clean(str) {
            str = str.split("=")[0];
            str = str.trim().replace(INVALID_BASE64_RE, "");
            if (str.length < 2) return "";
            while (str.length % 4 !== 0) {
                str = str + "=";
            }
            return str;
        }
        function toHex(n) {
            if (n < 16) return "0" + n.toString(16);
            return n.toString(16);
        }
        function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];
            for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 55295 && codePoint < 57344) {
                    if (!leadSurrogate) {
                        if (codePoint > 56319) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                            continue;
                        } else if (i + 1 === length) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                            continue;
                        }
                        leadSurrogate = codePoint;
                        continue;
                    }
                    if (codePoint < 56320) {
                        if ((units -= 3) > -1) bytes.push(239, 191, 189);
                        leadSurrogate = codePoint;
                        continue;
                    }
                    codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                } else if (leadSurrogate) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                }
                leadSurrogate = null;
                if (codePoint < 128) {
                    if ((units -= 1) < 0) break;
                    bytes.push(codePoint);
                } else if (codePoint < 2048) {
                    if ((units -= 2) < 0) break;
                    bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                } else if (codePoint < 65536) {
                    if ((units -= 3) < 0) break;
                    bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                } else if (codePoint < 1114112) {
                    if ((units -= 4) < 0) break;
                    bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                } else {
                    throw new Error("Invalid code point");
                }
            }
            return bytes;
        }
        function asciiToBytes(str) {
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
                byteArray.push(str.charCodeAt(i) & 255);
            }
            return byteArray;
        }
        function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
            }
            return byteArray;
        }
        function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str));
        }
        function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
            }
            return i;
        }
        function isInstance(obj, type) {
            return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
        }
        function numberIsNaN(obj) {
            return obj !== obj;
        }
    }, {
        "base64-js": 1,
        ieee754: 3
    } ],
    3: [ function(_require, module, exports) {
        exports.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & (1 << -nBits) - 1;
            s >>= -nBits;
            nBits += eLen;
            for (;nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (;nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            if (e === 0) {
                e = 1 - eBias;
            } else if (e === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };
        exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
            } else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                }
                if (e + eBias >= 1) {
                    value += rt / c;
                } else {
                    value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                    e++;
                    c /= 2;
                }
                if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax;
                } else if (e + eBias >= 1) {
                    m = (value * c - 1) * Math.pow(2, mLen);
                    e = e + eBias;
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0;
                }
            }
            for (;mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
            e = e << mLen | m;
            eLen += mLen;
            for (;eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
            buffer[offset + i - d] |= s * 128;
        };
    }, {} ],
    4: [ function(_require, module, exports) {
        var jspb = _require("google-protobuf");
        var goog = jspb;
        var global = window;
        goog.exportSymbol("proto.stream.Audience", null, global);
        goog.exportSymbol("proto.stream.LiveWatchInfo", null, global);
        goog.exportSymbol("proto.stream.WatchBookInfo", null, global);
        goog.exportSymbol("proto.stream.WatchParams", null, global);
        proto.stream.Audience = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.Audience, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.Audience.displayName = "proto.stream.Audience";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.Audience.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.Audience.toObject(opt_includeInstance, this);
            };
            proto.stream.Audience.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    profile: msg.getProfile_asB64(),
                    entertime: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.Audience.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.Audience();
            return proto.stream.Audience.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.Audience.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readBytes();
                    msg.setProfile(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setEntertime(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.Audience.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.Audience.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.Audience.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getProfile_asU8();
            if (f.length > 0) {
                writer.writeBytes(2, f);
            }
            f = message.getEntertime();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.Audience.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.Audience.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.Audience.prototype.getProfile = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.Audience.prototype.getProfile_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getProfile());
        };
        proto.stream.Audience.prototype.getProfile_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getProfile());
        };
        proto.stream.Audience.prototype.setProfile = function(value) {
            jspb.Message.setProto3BytesField(this, 2, value);
        };
        proto.stream.Audience.prototype.getEntertime = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.Audience.prototype.setEntertime = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.LiveWatchInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.LiveWatchInfo.repeatedFields_, null);
        };
        goog.inherits(proto.stream.LiveWatchInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveWatchInfo.displayName = "proto.stream.LiveWatchInfo";
        }
        proto.stream.LiveWatchInfo.repeatedFields_ = [ 8 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveWatchInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveWatchInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveWatchInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    startts: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    delayms: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cachems: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    maxaudiences: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    curaudiences: jspb.Message.getFieldWithDefault(msg, 6, 0),
                    peakaudiences: jspb.Message.getFieldWithDefault(msg, 7, 0),
                    lastaudiencesList: jspb.Message.toObjectList(msg.getLastaudiencesList(), proto.stream.Audience.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveWatchInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveWatchInfo();
            return proto.stream.LiveWatchInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveWatchInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setStartts(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setDelayms(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setCachems(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setMaxaudiences(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setCuraudiences(value);
                    break;

                  case 7:
                    var value = reader.readUint32();
                    msg.setPeakaudiences(value);
                    break;

                  case 8:
                    var value = new proto.stream.Audience();
                    reader.readMessage(value, proto.stream.Audience.deserializeBinaryFromReader);
                    msg.addLastaudiences(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveWatchInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveWatchInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveWatchInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getStartts();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getDelayms();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCachems();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
            f = message.getMaxaudiences();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
            f = message.getCuraudiences();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
            f = message.getPeakaudiences();
            if (f !== 0) {
                writer.writeUint32(7, f);
            }
            f = message.getLastaudiencesList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(8, f, proto.stream.Audience.serializeBinaryToWriter);
            }
        };
        proto.stream.LiveWatchInfo.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.LiveWatchInfo.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.LiveWatchInfo.prototype.getStartts = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.LiveWatchInfo.prototype.setStartts = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.LiveWatchInfo.prototype.getDelayms = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.LiveWatchInfo.prototype.setDelayms = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.LiveWatchInfo.prototype.getCachems = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.LiveWatchInfo.prototype.setCachems = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.LiveWatchInfo.prototype.getMaxaudiences = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.LiveWatchInfo.prototype.setMaxaudiences = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.LiveWatchInfo.prototype.getCuraudiences = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.LiveWatchInfo.prototype.setCuraudiences = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.LiveWatchInfo.prototype.getPeakaudiences = function() {
            return jspb.Message.getFieldWithDefault(this, 7, 0);
        };
        proto.stream.LiveWatchInfo.prototype.setPeakaudiences = function(value) {
            jspb.Message.setProto3IntField(this, 7, value);
        };
        proto.stream.LiveWatchInfo.prototype.getLastaudiencesList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.Audience, 8);
        };
        proto.stream.LiveWatchInfo.prototype.setLastaudiencesList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 8, value);
        };
        proto.stream.LiveWatchInfo.prototype.addLastaudiences = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.stream.Audience, opt_index);
        };
        proto.stream.LiveWatchInfo.prototype.clearLastaudiencesList = function() {
            this.setLastaudiencesList([]);
        };
        proto.stream.WatchParams = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.WatchParams, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.WatchParams.displayName = "proto.stream.WatchParams";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.WatchParams.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.WatchParams.toObject(opt_includeInstance, this);
            };
            proto.stream.WatchParams.toObject = function(includeInstance, msg) {
                var f, obj = {
                    canwatch: jspb.Message.getFieldWithDefault(msg, 1, false),
                    maxaudiences: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    delayms: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cachems: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    bufferbytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    lastsize: jspb.Message.getFieldWithDefault(msg, 6, 0),
                    needreplay: jspb.Message.getFieldWithDefault(msg, 7, false)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.WatchParams.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.WatchParams();
            return proto.stream.WatchParams.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.WatchParams.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readBool();
                    msg.setCanwatch(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setMaxaudiences(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setDelayms(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setCachems(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setBufferbytes(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setLastsize(value);
                    break;

                  case 7:
                    var value = reader.readBool();
                    msg.setNeedreplay(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.WatchParams.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.WatchParams.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.WatchParams.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getCanwatch();
            if (f) {
                writer.writeBool(1, f);
            }
            f = message.getMaxaudiences();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getDelayms();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCachems();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
            f = message.getBufferbytes();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
            f = message.getLastsize();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
            f = message.getNeedreplay();
            if (f) {
                writer.writeBool(7, f);
            }
        };
        proto.stream.WatchParams.prototype.getCanwatch = function() {
            return jspb.Message.getFieldWithDefault(this, 1, false);
        };
        proto.stream.WatchParams.prototype.setCanwatch = function(value) {
            jspb.Message.setProto3BooleanField(this, 1, value);
        };
        proto.stream.WatchParams.prototype.getMaxaudiences = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.WatchParams.prototype.setMaxaudiences = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.WatchParams.prototype.getDelayms = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.WatchParams.prototype.setDelayms = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.WatchParams.prototype.getCachems = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.WatchParams.prototype.setCachems = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.WatchParams.prototype.getBufferbytes = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.WatchParams.prototype.setBufferbytes = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.WatchParams.prototype.getLastsize = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.WatchParams.prototype.setLastsize = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.WatchParams.prototype.getNeedreplay = function() {
            return jspb.Message.getFieldWithDefault(this, 7, false);
        };
        proto.stream.WatchParams.prototype.setNeedreplay = function(value) {
            jspb.Message.setProto3BooleanField(this, 7, value);
        };
        proto.stream.WatchBookInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.WatchBookInfo.repeatedFields_, null);
        };
        goog.inherits(proto.stream.WatchBookInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.WatchBookInfo.displayName = "proto.stream.WatchBookInfo";
        }
        proto.stream.WatchBookInfo.repeatedFields_ = [ 4 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.WatchBookInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.WatchBookInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.WatchBookInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    bookid: jspb.Message.getFieldWithDefault(msg, 1, ""),
                    ticket: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    setid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    livesList: jspb.Message.getRepeatedField(msg, 4),
                    wssproxy: jspb.Message.getFieldWithDefault(msg, 5, "")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.WatchBookInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.WatchBookInfo();
            return proto.stream.WatchBookInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.WatchBookInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readString();
                    msg.setBookid(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setTicket(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setSetid(value);
                    break;

                  case 4:
                    var value = reader.readString();
                    msg.addLives(value);
                    break;

                  case 5:
                    var value = reader.readString();
                    msg.setWssproxy(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.WatchBookInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.WatchBookInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.WatchBookInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getBookid();
            if (f.length > 0) {
                writer.writeString(1, f);
            }
            f = message.getTicket();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getSetid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getLivesList();
            if (f.length > 0) {
                writer.writeRepeatedString(4, f);
            }
            f = message.getWssproxy();
            if (f.length > 0) {
                writer.writeString(5, f);
            }
        };
        proto.stream.WatchBookInfo.prototype.getBookid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "");
        };
        proto.stream.WatchBookInfo.prototype.setBookid = function(value) {
            jspb.Message.setProto3StringField(this, 1, value);
        };
        proto.stream.WatchBookInfo.prototype.getTicket = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.WatchBookInfo.prototype.setTicket = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.WatchBookInfo.prototype.getSetid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.WatchBookInfo.prototype.setSetid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.WatchBookInfo.prototype.getLivesList = function() {
            return jspb.Message.getRepeatedField(this, 4);
        };
        proto.stream.WatchBookInfo.prototype.setLivesList = function(value) {
            jspb.Message.setField(this, 4, value || []);
        };
        proto.stream.WatchBookInfo.prototype.addLives = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 4, value, opt_index);
        };
        proto.stream.WatchBookInfo.prototype.clearLivesList = function() {
            this.setLivesList([]);
        };
        proto.stream.WatchBookInfo.prototype.getWssproxy = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "");
        };
        proto.stream.WatchBookInfo.prototype.setWssproxy = function(value) {
            jspb.Message.setProto3StringField(this, 5, value);
        };
        goog.object.extend(exports, proto.stream);
    }, {
        "google-protobuf": 8
    } ],
    5: [ function(_require, module, exports) {
        var jspb = _require("google-protobuf");
        var goog = jspb;
        var global = window;
        goog.exportSymbol("proto.stream.ErrorCode", null, global);
        proto.stream.ErrorCode = {
            NOERROR: 0,
            OK: 200,
            ACCEPTED: 202,
            NOCONTENT: 204,
            BADREQUEST: 400,
            UNAUTHORIZED: 401,
            SIGNATUREFAILED: 402,
            FORBIDDEN: 403,
            NOTFOUND: 404,
            INTERNALSERVERERROR: 500,
            NOTIMPLEMENTED: 501,
            BADGATEWAY: 502,
            SERVICEUNAVAILABLE: 503
        };
        goog.object.extend(exports, proto.stream);
    }, {
        "google-protobuf": 8
    } ],
    6: [ function(_require, module, exports) {
        var myProto = _require("./sdk_pb");
        var myProto1 = _require("./gateway_pb");
        var myProto2 = _require("./errorcode_pb");
        var myProto3 = _require("./watchsdk_pb");
        module.exports = {
            DataProto: myProto,
            DataProto: myProto1,
            DataProto: myProto2,
            DataProto: myProto3
        };
    }, {
        "./errorcode_pb": 5,
        "./gateway_pb": 7,
        "./sdk_pb": 9,
        "./watchsdk_pb": 10
    } ],
    7: [ function(_require, module, exports) {
        var jspb = _require("google-protobuf");
        var goog = jspb;
        var global = window;
        var errorcode_pb = _require("./errorcode_pb.js");
        goog.exportSymbol("proto.stream.BookInfo", null, global);
        goog.exportSymbol("proto.stream.BrigadeInfo", null, global);
        goog.exportSymbol("proto.stream.ChangeRoleReq", null, global);
        goog.exportSymbol("proto.stream.ChangeRoleRsp", null, global);
        goog.exportSymbol("proto.stream.CmdId", null, global);
        goog.exportSymbol("proto.stream.ConnDetailV2", null, global);
        goog.exportSymbol("proto.stream.CreateFlag", null, global);
        goog.exportSymbol("proto.stream.CreateRoomReq", null, global);
        goog.exportSymbol("proto.stream.CreateRoomRsp", null, global);
        goog.exportSymbol("proto.stream.CreateTeamReq", null, global);
        goog.exportSymbol("proto.stream.CreateTeamRsp", null, global);
        goog.exportSymbol("proto.stream.DestroyRoomReq", null, global);
        goog.exportSymbol("proto.stream.DestroyRoomRsp", null, global);
        goog.exportSymbol("proto.stream.DisconnectReq", null, global);
        goog.exportSymbol("proto.stream.DisconnectRsp", null, global);
        goog.exportSymbol("proto.stream.GetRoomDetailReq", null, global);
        goog.exportSymbol("proto.stream.GetRoomDetailRsp", null, global);
        goog.exportSymbol("proto.stream.GetRoomListExReq", null, global);
        goog.exportSymbol("proto.stream.GetRoomListExRsp", null, global);
        goog.exportSymbol("proto.stream.GetRoomListReq", null, global);
        goog.exportSymbol("proto.stream.GetRoomListRsp", null, global);
        goog.exportSymbol("proto.stream.GetWatchRoomsReq", null, global);
        goog.exportSymbol("proto.stream.GetWatchRoomsRsp", null, global);
        goog.exportSymbol("proto.stream.HeartbeatReq", null, global);
        goog.exportSymbol("proto.stream.HeartbeatRsp", null, global);
        goog.exportSymbol("proto.stream.JoinOpenNotify", null, global);
        goog.exportSymbol("proto.stream.JoinOpenReq", null, global);
        goog.exportSymbol("proto.stream.JoinOpenRsp", null, global);
        goog.exportSymbol("proto.stream.JoinOverNotify", null, global);
        goog.exportSymbol("proto.stream.JoinOverReq", null, global);
        goog.exportSymbol("proto.stream.JoinOverRsp", null, global);
        goog.exportSymbol("proto.stream.JoinRoomReq", null, global);
        goog.exportSymbol("proto.stream.JoinRoomRsp", null, global);
        goog.exportSymbol("proto.stream.JoinRoomType", null, global);
        goog.exportSymbol("proto.stream.JoinTeamNotify", null, global);
        goog.exportSymbol("proto.stream.JoinTeamReq", null, global);
        goog.exportSymbol("proto.stream.JoinTeamRsp", null, global);
        goog.exportSymbol("proto.stream.JoinWatchRoomReq", null, global);
        goog.exportSymbol("proto.stream.JoinWatchRoomRsp", null, global);
        goog.exportSymbol("proto.stream.KickPlayerNotify", null, global);
        goog.exportSymbol("proto.stream.KickPlayerReq", null, global);
        goog.exportSymbol("proto.stream.KickPlayerRsp", null, global);
        goog.exportSymbol("proto.stream.LeaveRoomReq", null, global);
        goog.exportSymbol("proto.stream.LeaveRoomRsp", null, global);
        goog.exportSymbol("proto.stream.LeaveTeamNotify", null, global);
        goog.exportSymbol("proto.stream.LeaveTeamReq", null, global);
        goog.exportSymbol("proto.stream.LeaveTeamRsp", null, global);
        goog.exportSymbol("proto.stream.LeaveWatchRoomReq", null, global);
        goog.exportSymbol("proto.stream.LeaveWatchRoomRsp", null, global);
        goog.exportSymbol("proto.stream.LoginReq", null, global);
        goog.exportSymbol("proto.stream.LoginRsp", null, global);
        goog.exportSymbol("proto.stream.LogoutRsp", null, global);
        goog.exportSymbol("proto.stream.NetworkStateNotify", null, global);
        goog.exportSymbol("proto.stream.NetworkStateReq", null, global);
        goog.exportSymbol("proto.stream.NetworkStateRsp", null, global);
        goog.exportSymbol("proto.stream.NoticeJoin", null, global);
        goog.exportSymbol("proto.stream.NoticeLeave", null, global);
        goog.exportSymbol("proto.stream.NoticeRoomProperty", null, global);
        goog.exportSymbol("proto.stream.PlayRoom", null, global);
        goog.exportSymbol("proto.stream.PlayerInfo", null, global);
        goog.exportSymbol("proto.stream.RoomDetail", null, global);
        goog.exportSymbol("proto.stream.RoomFilter", null, global);
        goog.exportSymbol("proto.stream.RoomInfo", null, global);
        goog.exportSymbol("proto.stream.RoomInfoEx", null, global);
        goog.exportSymbol("proto.stream.RoomListSort", null, global);
        goog.exportSymbol("proto.stream.RoomState", null, global);
        goog.exportSymbol("proto.stream.RoomType", null, global);
        goog.exportSymbol("proto.stream.SetReconnectTimeoutReq", null, global);
        goog.exportSymbol("proto.stream.SetReconnectTimeoutRsp", null, global);
        goog.exportSymbol("proto.stream.SetRoomPropertyReq", null, global);
        goog.exportSymbol("proto.stream.SetRoomPropertyRsp", null, global);
        goog.exportSymbol("proto.stream.SortOrder", null, global);
        goog.exportSymbol("proto.stream.TcpProtoHeader", null, global);
        goog.exportSymbol("proto.stream.TeamDetail", null, global);
        goog.exportSymbol("proto.stream.TeamInfo", null, global);
        goog.exportSymbol("proto.stream.TeamMatchCond", null, global);
        goog.exportSymbol("proto.stream.TeamMatchReq", null, global);
        goog.exportSymbol("proto.stream.TeamMatchResultNotify", null, global);
        goog.exportSymbol("proto.stream.TeamMatchRsp", null, global);
        goog.exportSymbol("proto.stream.TeamMatchStartNotify", null, global);
        goog.exportSymbol("proto.stream.UserV2", null, global);
        goog.exportSymbol("proto.stream.UserV2Ex", null, global);
        goog.exportSymbol("proto.stream.WatchInfo", null, global);
        goog.exportSymbol("proto.stream.WatchRoom", null, global);
        goog.exportSymbol("proto.stream.WatchSetting", null, global);
        goog.exportSymbol("proto.stream.keyValue", null, global);
        proto.stream.LoginReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LoginReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LoginReq.displayName = "proto.stream.LoginReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LoginReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LoginReq.toObject(opt_includeInstance, this);
            };
            proto.stream.LoginReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    appkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    deviceid: jspb.Message.getFieldWithDefault(msg, 3, ""),
                    sign: jspb.Message.getFieldWithDefault(msg, 4, ""),
                    sdkver: jspb.Message.getFieldWithDefault(msg, 5, ""),
                    vendor: jspb.Message.getFieldWithDefault(msg, 6, 0),
                    token: jspb.Message.getFieldWithDefault(msg, 7, "")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LoginReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LoginReq();
            return proto.stream.LoginReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LoginReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setAppkey(value);
                    break;

                  case 3:
                    var value = reader.readString();
                    msg.setDeviceid(value);
                    break;

                  case 4:
                    var value = reader.readString();
                    msg.setSign(value);
                    break;

                  case 5:
                    var value = reader.readString();
                    msg.setSdkver(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setVendor(value);
                    break;

                  case 7:
                    var value = reader.readString();
                    msg.setToken(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LoginReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LoginReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LoginReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getAppkey();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getDeviceid();
            if (f.length > 0) {
                writer.writeString(3, f);
            }
            f = message.getSign();
            if (f.length > 0) {
                writer.writeString(4, f);
            }
            f = message.getSdkver();
            if (f.length > 0) {
                writer.writeString(5, f);
            }
            f = message.getVendor();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
            f = message.getToken();
            if (f.length > 0) {
                writer.writeString(7, f);
            }
        };
        proto.stream.LoginReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LoginReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LoginReq.prototype.getAppkey = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.LoginReq.prototype.setAppkey = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.LoginReq.prototype.getDeviceid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.LoginReq.prototype.setDeviceid = function(value) {
            jspb.Message.setProto3StringField(this, 3, value);
        };
        proto.stream.LoginReq.prototype.getSign = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.LoginReq.prototype.setSign = function(value) {
            jspb.Message.setProto3StringField(this, 4, value);
        };
        proto.stream.LoginReq.prototype.getSdkver = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "");
        };
        proto.stream.LoginReq.prototype.setSdkver = function(value) {
            jspb.Message.setProto3StringField(this, 5, value);
        };
        proto.stream.LoginReq.prototype.getVendor = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.LoginReq.prototype.setVendor = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.LoginReq.prototype.getToken = function() {
            return jspb.Message.getFieldWithDefault(this, 7, "");
        };
        proto.stream.LoginReq.prototype.setToken = function(value) {
            jspb.Message.setProto3StringField(this, 7, value);
        };
        proto.stream.LoginRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LoginRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LoginRsp.displayName = "proto.stream.LoginRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LoginRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LoginRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.LoginRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LoginRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LoginRsp();
            return proto.stream.LoginRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LoginRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LoginRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LoginRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LoginRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
        };
        proto.stream.LoginRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LoginRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.LoginRsp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.LoginRsp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.HeartbeatReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.HeartbeatReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.HeartbeatReq.displayName = "proto.stream.HeartbeatReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.HeartbeatReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.HeartbeatReq.toObject(opt_includeInstance, this);
            };
            proto.stream.HeartbeatReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.HeartbeatReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.HeartbeatReq();
            return proto.stream.HeartbeatReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.HeartbeatReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.HeartbeatReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.HeartbeatReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.HeartbeatReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
        };
        proto.stream.HeartbeatReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.HeartbeatReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.HeartbeatReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.HeartbeatReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.HeartbeatRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.HeartbeatRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.HeartbeatRsp.displayName = "proto.stream.HeartbeatRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.HeartbeatRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.HeartbeatRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.HeartbeatRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    gsexist: jspb.Message.getFieldWithDefault(msg, 2, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.HeartbeatRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.HeartbeatRsp();
            return proto.stream.HeartbeatRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.HeartbeatRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readInt32();
                    msg.setGsexist(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.HeartbeatRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.HeartbeatRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.HeartbeatRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGsexist();
            if (f !== 0) {
                writer.writeInt32(2, f);
            }
        };
        proto.stream.HeartbeatRsp.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.HeartbeatRsp.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.HeartbeatRsp.prototype.getGsexist = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.HeartbeatRsp.prototype.setGsexist = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.DisconnectReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.DisconnectReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.DisconnectReq.displayName = "proto.stream.DisconnectReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.DisconnectReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.DisconnectReq.toObject(opt_includeInstance, this);
            };
            proto.stream.DisconnectReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 3, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.DisconnectReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.DisconnectReq();
            return proto.stream.DisconnectReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.DisconnectReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 3:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.DisconnectReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.DisconnectReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.DisconnectReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(3, f);
            }
        };
        proto.stream.DisconnectReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.DisconnectReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.DisconnectReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.DisconnectReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.DisconnectReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "0");
        };
        proto.stream.DisconnectReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 3, value);
        };
        proto.stream.DisconnectRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.DisconnectRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.DisconnectRsp.displayName = "proto.stream.DisconnectRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.DisconnectRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.DisconnectRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.DisconnectRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.DisconnectRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.DisconnectRsp();
            return proto.stream.DisconnectRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.DisconnectRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.DisconnectRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.DisconnectRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.DisconnectRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
        };
        proto.stream.DisconnectRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.DisconnectRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.LogoutRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LogoutRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LogoutRsp.displayName = "proto.stream.LogoutRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LogoutRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LogoutRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.LogoutRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LogoutRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LogoutRsp();
            return proto.stream.LogoutRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LogoutRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LogoutRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LogoutRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LogoutRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
        };
        proto.stream.LogoutRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LogoutRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.SetReconnectTimeoutReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetReconnectTimeoutReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetReconnectTimeoutReq.displayName = "proto.stream.SetReconnectTimeoutReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetReconnectTimeoutReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetReconnectTimeoutReq.toObject(opt_includeInstance, this);
            };
            proto.stream.SetReconnectTimeoutReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    timeout: jspb.Message.getFieldWithDefault(msg, 2, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetReconnectTimeoutReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetReconnectTimeoutReq();
            return proto.stream.SetReconnectTimeoutReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetReconnectTimeoutReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readInt32();
                    msg.setTimeout(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetReconnectTimeoutReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetReconnectTimeoutReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetReconnectTimeoutReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTimeout();
            if (f !== 0) {
                writer.writeInt32(2, f);
            }
        };
        proto.stream.SetReconnectTimeoutReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetReconnectTimeoutReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetReconnectTimeoutReq.prototype.getTimeout = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.SetReconnectTimeoutReq.prototype.setTimeout = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.SetReconnectTimeoutRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetReconnectTimeoutRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetReconnectTimeoutRsp.displayName = "proto.stream.SetReconnectTimeoutRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetReconnectTimeoutRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetReconnectTimeoutRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.SetReconnectTimeoutRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetReconnectTimeoutRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetReconnectTimeoutRsp();
            return proto.stream.SetReconnectTimeoutRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetReconnectTimeoutRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetReconnectTimeoutRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetReconnectTimeoutRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetReconnectTimeoutRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
        };
        proto.stream.SetReconnectTimeoutRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetReconnectTimeoutRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.keyValue = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.keyValue, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.keyValue.displayName = "proto.stream.keyValue";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.keyValue.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.keyValue.toObject(opt_includeInstance, this);
            };
            proto.stream.keyValue.toObject = function(includeInstance, msg) {
                var f, obj = {
                    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
                    value: jspb.Message.getFieldWithDefault(msg, 2, "")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.keyValue.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.keyValue();
            return proto.stream.keyValue.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.keyValue.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readString();
                    msg.setKey(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setValue(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.keyValue.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.keyValue.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.keyValue.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getKey();
            if (f.length > 0) {
                writer.writeString(1, f);
            }
            f = message.getValue();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
        };
        proto.stream.keyValue.prototype.getKey = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "");
        };
        proto.stream.keyValue.prototype.setKey = function(value) {
            jspb.Message.setProto3StringField(this, 1, value);
        };
        proto.stream.keyValue.prototype.getValue = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.keyValue.prototype.setValue = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.JoinRoomReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.JoinRoomReq.repeatedFields_, null);
        };
        goog.inherits(proto.stream.JoinRoomReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinRoomReq.displayName = "proto.stream.JoinRoomReq";
        }
        proto.stream.JoinRoomReq.repeatedFields_ = [ 5 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinRoomReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinRoomReq.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinRoomReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    jointype: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    playerinfo: (f = msg.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(includeInstance, f),
                    gameid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    roominfo: (f = msg.getRoominfo()) && proto.stream.RoomInfo.toObject(includeInstance, f),
                    tagsList: jspb.Message.toObjectList(msg.getTagsList(), proto.stream.keyValue.toObject, includeInstance),
                    cpproto: msg.getCpproto_asB64(),
                    watchsetting: (f = msg.getWatchsetting()) && proto.stream.WatchSetting.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinRoomReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinRoomReq();
            return proto.stream.JoinRoomReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinRoomReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setJointype(value);
                    break;

                  case 2:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.setPlayerinfo(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 4:
                    var value = new proto.stream.RoomInfo();
                    reader.readMessage(value, proto.stream.RoomInfo.deserializeBinaryFromReader);
                    msg.setRoominfo(value);
                    break;

                  case 5:
                    var value = new proto.stream.keyValue();
                    reader.readMessage(value, proto.stream.keyValue.deserializeBinaryFromReader);
                    msg.addTags(value);
                    break;

                  case 6:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  case 7:
                    var value = new proto.stream.WatchSetting();
                    reader.readMessage(value, proto.stream.WatchSetting.deserializeBinaryFromReader);
                    msg.setWatchsetting(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinRoomReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinRoomReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinRoomReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getJointype();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getPlayerinfo();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getRoominfo();
            if (f != null) {
                writer.writeMessage(4, f, proto.stream.RoomInfo.serializeBinaryToWriter);
            }
            f = message.getTagsList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(5, f, proto.stream.keyValue.serializeBinaryToWriter);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(6, f);
            }
            f = message.getWatchsetting();
            if (f != null) {
                writer.writeMessage(7, f, proto.stream.WatchSetting.serializeBinaryToWriter);
            }
        };
        proto.stream.JoinRoomReq.prototype.getJointype = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinRoomReq.prototype.setJointype = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.JoinRoomReq.prototype.getPlayerinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.PlayerInfo, 2);
        };
        proto.stream.JoinRoomReq.prototype.setPlayerinfo = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.JoinRoomReq.prototype.clearPlayerinfo = function() {
            this.setPlayerinfo(undefined);
        };
        proto.stream.JoinRoomReq.prototype.hasPlayerinfo = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.JoinRoomReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.JoinRoomReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.JoinRoomReq.prototype.getRoominfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomInfo, 4);
        };
        proto.stream.JoinRoomReq.prototype.setRoominfo = function(value) {
            jspb.Message.setWrapperField(this, 4, value);
        };
        proto.stream.JoinRoomReq.prototype.clearRoominfo = function() {
            this.setRoominfo(undefined);
        };
        proto.stream.JoinRoomReq.prototype.hasRoominfo = function() {
            return jspb.Message.getField(this, 4) != null;
        };
        proto.stream.JoinRoomReq.prototype.getTagsList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.keyValue, 5);
        };
        proto.stream.JoinRoomReq.prototype.setTagsList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 5, value);
        };
        proto.stream.JoinRoomReq.prototype.addTags = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.stream.keyValue, opt_index);
        };
        proto.stream.JoinRoomReq.prototype.clearTagsList = function() {
            this.setTagsList([]);
        };
        proto.stream.JoinRoomReq.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 6, "");
        };
        proto.stream.JoinRoomReq.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinRoomReq.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinRoomReq.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 6, value);
        };
        proto.stream.JoinRoomReq.prototype.getWatchsetting = function() {
            return jspb.Message.getWrapperField(this, proto.stream.WatchSetting, 7);
        };
        proto.stream.JoinRoomReq.prototype.setWatchsetting = function(value) {
            jspb.Message.setWrapperField(this, 7, value);
        };
        proto.stream.JoinRoomReq.prototype.clearWatchsetting = function() {
            this.setWatchsetting(undefined);
        };
        proto.stream.JoinRoomReq.prototype.hasWatchsetting = function() {
            return jspb.Message.getField(this, 7) != null;
        };
        proto.stream.JoinRoomRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.JoinRoomRsp.repeatedFields_, null);
        };
        goog.inherits(proto.stream.JoinRoomRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinRoomRsp.displayName = "proto.stream.JoinRoomRsp";
        }
        proto.stream.JoinRoomRsp.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinRoomRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinRoomRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinRoomRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    usersList: jspb.Message.toObjectList(msg.getUsersList(), proto.stream.PlayerInfo.toObject, includeInstance),
                    roominfo: (f = msg.getRoominfo()) && proto.stream.RoomInfo.toObject(includeInstance, f),
                    bookinfo: (f = msg.getBookinfo()) && proto.stream.BookInfo.toObject(includeInstance, f),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinRoomRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinRoomRsp();
            return proto.stream.JoinRoomRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinRoomRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.addUsers(value);
                    break;

                  case 3:
                    var value = new proto.stream.RoomInfo();
                    reader.readMessage(value, proto.stream.RoomInfo.deserializeBinaryFromReader);
                    msg.setRoominfo(value);
                    break;

                  case 4:
                    var value = new proto.stream.BookInfo();
                    reader.readMessage(value, proto.stream.BookInfo.deserializeBinaryFromReader);
                    msg.setBookinfo(value);
                    break;

                  case 5:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinRoomRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinRoomRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinRoomRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getUsersList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(2, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
            f = message.getRoominfo();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.RoomInfo.serializeBinaryToWriter);
            }
            f = message.getBookinfo();
            if (f != null) {
                writer.writeMessage(4, f, proto.stream.BookInfo.serializeBinaryToWriter);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(5, f);
            }
        };
        proto.stream.JoinRoomRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinRoomRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.JoinRoomRsp.prototype.getUsersList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
        };
        proto.stream.JoinRoomRsp.prototype.setUsersList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 2, value);
        };
        proto.stream.JoinRoomRsp.prototype.addUsers = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stream.PlayerInfo, opt_index);
        };
        proto.stream.JoinRoomRsp.prototype.clearUsersList = function() {
            this.setUsersList([]);
        };
        proto.stream.JoinRoomRsp.prototype.getRoominfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomInfo, 3);
        };
        proto.stream.JoinRoomRsp.prototype.setRoominfo = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.JoinRoomRsp.prototype.clearRoominfo = function() {
            this.setRoominfo(undefined);
        };
        proto.stream.JoinRoomRsp.prototype.hasRoominfo = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.JoinRoomRsp.prototype.getBookinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.BookInfo, 4);
        };
        proto.stream.JoinRoomRsp.prototype.setBookinfo = function(value) {
            jspb.Message.setWrapperField(this, 4, value);
        };
        proto.stream.JoinRoomRsp.prototype.clearBookinfo = function() {
            this.setBookinfo(undefined);
        };
        proto.stream.JoinRoomRsp.prototype.hasBookinfo = function() {
            return jspb.Message.getField(this, 4) != null;
        };
        proto.stream.JoinRoomRsp.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "");
        };
        proto.stream.JoinRoomRsp.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinRoomRsp.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinRoomRsp.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 5, value);
        };
        proto.stream.PlayerInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.PlayerInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.PlayerInfo.displayName = "proto.stream.PlayerInfo";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.PlayerInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.PlayerInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    userprofile: msg.getUserprofile_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.PlayerInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.PlayerInfo();
            return proto.stream.PlayerInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readBytes();
                    msg.setUserprofile(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.PlayerInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.PlayerInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getUserprofile_asU8();
            if (f.length > 0) {
                writer.writeBytes(2, f);
            }
        };
        proto.stream.PlayerInfo.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.PlayerInfo.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.PlayerInfo.prototype.getUserprofile = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.PlayerInfo.prototype.getUserprofile_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getUserprofile());
        };
        proto.stream.PlayerInfo.prototype.getUserprofile_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getUserprofile());
        };
        proto.stream.PlayerInfo.prototype.setUserprofile = function(value) {
            jspb.Message.setProto3BytesField(this, 2, value);
        };
        proto.stream.BookInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.BookInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.BookInfo.displayName = "proto.stream.BookInfo";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.BookInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.BookInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.BookInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    bookid: jspb.Message.getFieldWithDefault(msg, 1, ""),
                    bookkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    hoteladdr: jspb.Message.getFieldWithDefault(msg, 3, ""),
                    wssproxy: jspb.Message.getFieldWithDefault(msg, 4, "")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.BookInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.BookInfo();
            return proto.stream.BookInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.BookInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readString();
                    msg.setBookid(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setBookkey(value);
                    break;

                  case 3:
                    var value = reader.readString();
                    msg.setHoteladdr(value);
                    break;

                  case 4:
                    var value = reader.readString();
                    msg.setWssproxy(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.BookInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.BookInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.BookInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getBookid();
            if (f.length > 0) {
                writer.writeString(1, f);
            }
            f = message.getBookkey();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getHoteladdr();
            if (f.length > 0) {
                writer.writeString(3, f);
            }
            f = message.getWssproxy();
            if (f.length > 0) {
                writer.writeString(4, f);
            }
        };
        proto.stream.BookInfo.prototype.getBookid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "");
        };
        proto.stream.BookInfo.prototype.setBookid = function(value) {
            jspb.Message.setProto3StringField(this, 1, value);
        };
        proto.stream.BookInfo.prototype.getBookkey = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.BookInfo.prototype.setBookkey = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.BookInfo.prototype.getHoteladdr = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.BookInfo.prototype.setHoteladdr = function(value) {
            jspb.Message.setProto3StringField(this, 3, value);
        };
        proto.stream.BookInfo.prototype.getWssproxy = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.BookInfo.prototype.setWssproxy = function(value) {
            jspb.Message.setProto3StringField(this, 4, value);
        };
        proto.stream.RoomInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.RoomInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.RoomInfo.displayName = "proto.stream.RoomInfo";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.RoomInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.RoomInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.RoomInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    roomname: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    maxplayer: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    canwatch: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    visibility: jspb.Message.getFieldWithDefault(msg, 6, 0),
                    roomproperty: msg.getRoomproperty_asB64(),
                    owner: jspb.Message.getFieldWithDefault(msg, 8, 0),
                    state: jspb.Message.getFieldWithDefault(msg, 9, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.RoomInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.RoomInfo();
            return proto.stream.RoomInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setRoomname(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setMaxplayer(value);
                    break;

                  case 4:
                    var value = reader.readInt32();
                    msg.setMode(value);
                    break;

                  case 5:
                    var value = reader.readInt32();
                    msg.setCanwatch(value);
                    break;

                  case 6:
                    var value = reader.readInt32();
                    msg.setVisibility(value);
                    break;

                  case 7:
                    var value = reader.readBytes();
                    msg.setRoomproperty(value);
                    break;

                  case 8:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  case 9:
                    var value = reader.readEnum();
                    msg.setState(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.RoomInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.RoomInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.RoomInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getRoomname();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getMaxplayer();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getMode();
            if (f !== 0) {
                writer.writeInt32(4, f);
            }
            f = message.getCanwatch();
            if (f !== 0) {
                writer.writeInt32(5, f);
            }
            f = message.getVisibility();
            if (f !== 0) {
                writer.writeInt32(6, f);
            }
            f = message.getRoomproperty_asU8();
            if (f.length > 0) {
                writer.writeBytes(7, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(8, f);
            }
            f = message.getState();
            if (f !== 0) {
                writer.writeEnum(9, f);
            }
        };
        proto.stream.RoomInfo.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.RoomInfo.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.RoomInfo.prototype.getRoomname = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.RoomInfo.prototype.setRoomname = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.RoomInfo.prototype.getMaxplayer = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.RoomInfo.prototype.setMaxplayer = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.RoomInfo.prototype.getMode = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.RoomInfo.prototype.setMode = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.RoomInfo.prototype.getCanwatch = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.RoomInfo.prototype.setCanwatch = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.RoomInfo.prototype.getVisibility = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.RoomInfo.prototype.setVisibility = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.RoomInfo.prototype.getRoomproperty = function() {
            return jspb.Message.getFieldWithDefault(this, 7, "");
        };
        proto.stream.RoomInfo.prototype.getRoomproperty_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getRoomproperty());
        };
        proto.stream.RoomInfo.prototype.getRoomproperty_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getRoomproperty());
        };
        proto.stream.RoomInfo.prototype.setRoomproperty = function(value) {
            jspb.Message.setProto3BytesField(this, 7, value);
        };
        proto.stream.RoomInfo.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 8, 0);
        };
        proto.stream.RoomInfo.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 8, value);
        };
        proto.stream.RoomInfo.prototype.getState = function() {
            return jspb.Message.getFieldWithDefault(this, 9, 0);
        };
        proto.stream.RoomInfo.prototype.setState = function(value) {
            jspb.Message.setProto3EnumField(this, 9, value);
        };
        proto.stream.NoticeJoin = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.NoticeJoin, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.NoticeJoin.displayName = "proto.stream.NoticeJoin";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.NoticeJoin.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.NoticeJoin.toObject(opt_includeInstance, this);
            };
            proto.stream.NoticeJoin.toObject = function(includeInstance, msg) {
                var f, obj = {
                    user: (f = msg.getUser()) && proto.stream.PlayerInfo.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.NoticeJoin.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.NoticeJoin();
            return proto.stream.NoticeJoin.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.NoticeJoin.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.setUser(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.NoticeJoin.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.NoticeJoin.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.NoticeJoin.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUser();
            if (f != null) {
                writer.writeMessage(1, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.NoticeJoin.prototype.getUser = function() {
            return jspb.Message.getWrapperField(this, proto.stream.PlayerInfo, 1);
        };
        proto.stream.NoticeJoin.prototype.setUser = function(value) {
            jspb.Message.setWrapperField(this, 1, value);
        };
        proto.stream.NoticeJoin.prototype.clearUser = function() {
            this.setUser(undefined);
        };
        proto.stream.NoticeJoin.prototype.hasUser = function() {
            return jspb.Message.getField(this, 1) != null;
        };
        proto.stream.NoticeLeave = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.NoticeLeave, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.NoticeLeave.displayName = "proto.stream.NoticeLeave";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.NoticeLeave.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.NoticeLeave.toObject(opt_includeInstance, this);
            };
            proto.stream.NoticeLeave.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    owner: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.NoticeLeave.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.NoticeLeave();
            return proto.stream.NoticeLeave.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.NoticeLeave.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.NoticeLeave.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.NoticeLeave.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.NoticeLeave.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.NoticeLeave.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.NoticeLeave.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.NoticeLeave.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.NoticeLeave.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.NoticeLeave.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.NoticeLeave.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.NoticeLeave.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.NoticeLeave.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.NoticeLeave.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.NoticeLeave.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.JoinOverReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinOverReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinOverReq.displayName = "proto.stream.JoinOverReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinOverReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinOverReq.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinOverReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cpproto: msg.getCpproto_asB64(),
                    userid: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinOverReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinOverReq();
            return proto.stream.JoinOverReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinOverReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinOverReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinOverReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinOverReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.JoinOverReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.JoinOverReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.JoinOverReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.JoinOverReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.JoinOverReq.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.JoinOverReq.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinOverReq.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinOverReq.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.JoinOverReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.JoinOverReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.JoinOverRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinOverRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinOverRsp.displayName = "proto.stream.JoinOverRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinOverRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinOverRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinOverRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinOverRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinOverRsp();
            return proto.stream.JoinOverRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinOverRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinOverRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinOverRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinOverRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(2, f);
            }
        };
        proto.stream.JoinOverRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinOverRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.JoinOverRsp.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.JoinOverRsp.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinOverRsp.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinOverRsp.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 2, value);
        };
        proto.stream.JoinOverNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinOverNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinOverNotify.displayName = "proto.stream.JoinOverNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinOverNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinOverNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinOverNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    srcuserid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinOverNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinOverNotify();
            return proto.stream.JoinOverNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinOverNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSrcuserid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinOverNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinOverNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinOverNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSrcuserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
        };
        proto.stream.JoinOverNotify.prototype.getSrcuserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinOverNotify.prototype.setSrcuserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.JoinOverNotify.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.JoinOverNotify.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.JoinOverNotify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.JoinOverNotify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinOverNotify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinOverNotify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.JoinOpenReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinOpenReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinOpenReq.displayName = "proto.stream.JoinOpenReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinOpenReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinOpenReq.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinOpenReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinOpenReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinOpenReq();
            return proto.stream.JoinOpenReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinOpenReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinOpenReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinOpenReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinOpenReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.JoinOpenReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.JoinOpenReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.JoinOpenReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.JoinOpenReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.JoinOpenReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.JoinOpenReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.JoinOpenReq.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.JoinOpenReq.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinOpenReq.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinOpenReq.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.JoinOpenRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinOpenRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinOpenRsp.displayName = "proto.stream.JoinOpenRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinOpenRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinOpenRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinOpenRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinOpenRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinOpenRsp();
            return proto.stream.JoinOpenRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinOpenRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinOpenRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinOpenRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinOpenRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(2, f);
            }
        };
        proto.stream.JoinOpenRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinOpenRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.JoinOpenRsp.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.JoinOpenRsp.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinOpenRsp.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinOpenRsp.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 2, value);
        };
        proto.stream.JoinOpenNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinOpenNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinOpenNotify.displayName = "proto.stream.JoinOpenNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinOpenNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinOpenNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinOpenNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinOpenNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinOpenNotify();
            return proto.stream.JoinOpenNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinOpenNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinOpenNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinOpenNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinOpenNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
        };
        proto.stream.JoinOpenNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinOpenNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.JoinOpenNotify.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.JoinOpenNotify.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.JoinOpenNotify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.JoinOpenNotify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.JoinOpenNotify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.JoinOpenNotify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.LeaveRoomReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LeaveRoomReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LeaveRoomReq.displayName = "proto.stream.LeaveRoomReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LeaveRoomReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LeaveRoomReq.toObject(opt_includeInstance, this);
            };
            proto.stream.LeaveRoomReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LeaveRoomReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LeaveRoomReq();
            return proto.stream.LeaveRoomReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LeaveRoomReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 3:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LeaveRoomReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LeaveRoomReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LeaveRoomReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.LeaveRoomReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LeaveRoomReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LeaveRoomReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.LeaveRoomReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.LeaveRoomReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "0");
        };
        proto.stream.LeaveRoomReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 3, value);
        };
        proto.stream.LeaveRoomReq.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.LeaveRoomReq.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.LeaveRoomReq.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.LeaveRoomReq.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.LeaveRoomRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LeaveRoomRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LeaveRoomRsp.displayName = "proto.stream.LeaveRoomRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LeaveRoomRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LeaveRoomRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.LeaveRoomRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LeaveRoomRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LeaveRoomRsp();
            return proto.stream.LeaveRoomRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LeaveRoomRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LeaveRoomRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LeaveRoomRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LeaveRoomRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.LeaveRoomRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LeaveRoomRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.LeaveRoomRsp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.LeaveRoomRsp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.LeaveRoomRsp.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.LeaveRoomRsp.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.LeaveRoomRsp.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.LeaveRoomRsp.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.LeaveRoomRsp.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.LeaveRoomRsp.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.TcpProtoHeader = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.TcpProtoHeader, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TcpProtoHeader.displayName = "proto.stream.TcpProtoHeader";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TcpProtoHeader.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TcpProtoHeader.toObject(opt_includeInstance, this);
            };
            proto.stream.TcpProtoHeader.toObject = function(includeInstance, msg) {
                var f, obj = {
                    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    seq: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cmd: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    userid: jspb.Message.getFieldWithDefault(msg, 5, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TcpProtoHeader.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TcpProtoHeader();
            return proto.stream.TcpProtoHeader.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TcpProtoHeader.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSize(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setSeq(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setCmd(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setVersion(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TcpProtoHeader.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TcpProtoHeader.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TcpProtoHeader.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSize();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getSeq();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCmd();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getVersion();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
        };
        proto.stream.TcpProtoHeader.prototype.getSize = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.TcpProtoHeader.prototype.setSize = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.TcpProtoHeader.prototype.getSeq = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.TcpProtoHeader.prototype.setSeq = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.TcpProtoHeader.prototype.getCmd = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.TcpProtoHeader.prototype.setCmd = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.TcpProtoHeader.prototype.getVersion = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.TcpProtoHeader.prototype.setVersion = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.TcpProtoHeader.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.TcpProtoHeader.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.ConnDetailV2 = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.ConnDetailV2, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.ConnDetailV2.displayName = "proto.stream.ConnDetailV2";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.ConnDetailV2.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.ConnDetailV2.toObject(opt_includeInstance, this);
            };
            proto.stream.ConnDetailV2.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    fieldid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 4, "0"),
                    heartbeattime: jspb.Message.getFieldWithDefault(msg, 5, "0"),
                    version: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.ConnDetailV2.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.ConnDetailV2();
            return proto.stream.ConnDetailV2.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.ConnDetailV2.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setFieldid(value);
                    break;

                  case 4:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 5:
                    var value = reader.readUint64String();
                    msg.setHeartbeattime(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setVersion(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.ConnDetailV2.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.ConnDetailV2.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.ConnDetailV2.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getFieldid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(4, f);
            }
            f = message.getHeartbeattime();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(5, f);
            }
            f = message.getVersion();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
        };
        proto.stream.ConnDetailV2.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.ConnDetailV2.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.ConnDetailV2.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.ConnDetailV2.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.ConnDetailV2.prototype.getFieldid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.ConnDetailV2.prototype.setFieldid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.ConnDetailV2.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "0");
        };
        proto.stream.ConnDetailV2.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 4, value);
        };
        proto.stream.ConnDetailV2.prototype.getHeartbeattime = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "0");
        };
        proto.stream.ConnDetailV2.prototype.setHeartbeattime = function(value) {
            jspb.Message.setProto3StringIntField(this, 5, value);
        };
        proto.stream.ConnDetailV2.prototype.getVersion = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.ConnDetailV2.prototype.setVersion = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.UserV2 = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.UserV2, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.UserV2.displayName = "proto.stream.UserV2";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.UserV2.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.UserV2.toObject(opt_includeInstance, this);
            };
            proto.stream.UserV2.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    versionSdk: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    connectionId: jspb.Message.getFieldWithDefault(msg, 4, "0"),
                    serviceId: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    roomId: jspb.Message.getFieldWithDefault(msg, 6, "0"),
                    deviceId: jspb.Message.getFieldWithDefault(msg, 7, ""),
                    connStatus: jspb.Message.getFieldWithDefault(msg, 8, 0),
                    reconnectTimeout: jspb.Message.getFieldWithDefault(msg, 9, 0),
                    teamId: jspb.Message.getFieldWithDefault(msg, 10, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.UserV2.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.UserV2();
            return proto.stream.UserV2.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.UserV2.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserId(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameId(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setVersionSdk(value);
                    break;

                  case 4:
                    var value = reader.readUint64String();
                    msg.setConnectionId(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setServiceId(value);
                    break;

                  case 6:
                    var value = reader.readUint64String();
                    msg.setRoomId(value);
                    break;

                  case 7:
                    var value = reader.readString();
                    msg.setDeviceId(value);
                    break;

                  case 8:
                    var value = reader.readUint32();
                    msg.setConnStatus(value);
                    break;

                  case 9:
                    var value = reader.readUint32();
                    msg.setReconnectTimeout(value);
                    break;

                  case 10:
                    var value = reader.readUint64String();
                    msg.setTeamId(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.UserV2.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.UserV2.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.UserV2.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserId();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGameId();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getVersionSdk();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getConnectionId();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(4, f);
            }
            f = message.getServiceId();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
            f = message.getRoomId();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(6, f);
            }
            f = message.getDeviceId();
            if (f.length > 0) {
                writer.writeString(7, f);
            }
            f = message.getConnStatus();
            if (f !== 0) {
                writer.writeUint32(8, f);
            }
            f = message.getReconnectTimeout();
            if (f !== 0) {
                writer.writeUint32(9, f);
            }
            f = message.getTeamId();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(10, f);
            }
        };
        proto.stream.UserV2.prototype.getUserId = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.UserV2.prototype.setUserId = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.UserV2.prototype.getGameId = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.UserV2.prototype.setGameId = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.UserV2.prototype.getVersionSdk = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.UserV2.prototype.setVersionSdk = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.UserV2.prototype.getConnectionId = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "0");
        };
        proto.stream.UserV2.prototype.setConnectionId = function(value) {
            jspb.Message.setProto3StringIntField(this, 4, value);
        };
        proto.stream.UserV2.prototype.getServiceId = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.UserV2.prototype.setServiceId = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.UserV2.prototype.getRoomId = function() {
            return jspb.Message.getFieldWithDefault(this, 6, "0");
        };
        proto.stream.UserV2.prototype.setRoomId = function(value) {
            jspb.Message.setProto3StringIntField(this, 6, value);
        };
        proto.stream.UserV2.prototype.getDeviceId = function() {
            return jspb.Message.getFieldWithDefault(this, 7, "");
        };
        proto.stream.UserV2.prototype.setDeviceId = function(value) {
            jspb.Message.setProto3StringField(this, 7, value);
        };
        proto.stream.UserV2.prototype.getConnStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 8, 0);
        };
        proto.stream.UserV2.prototype.setConnStatus = function(value) {
            jspb.Message.setProto3IntField(this, 8, value);
        };
        proto.stream.UserV2.prototype.getReconnectTimeout = function() {
            return jspb.Message.getFieldWithDefault(this, 9, 0);
        };
        proto.stream.UserV2.prototype.setReconnectTimeout = function(value) {
            jspb.Message.setProto3IntField(this, 9, value);
        };
        proto.stream.UserV2.prototype.getTeamId = function() {
            return jspb.Message.getFieldWithDefault(this, 10, "0");
        };
        proto.stream.UserV2.prototype.setTeamId = function(value) {
            jspb.Message.setProto3StringIntField(this, 10, value);
        };
        proto.stream.UserV2Ex = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.UserV2Ex, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.UserV2Ex.displayName = "proto.stream.UserV2Ex";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.UserV2Ex.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.UserV2Ex.toObject(opt_includeInstance, this);
            };
            proto.stream.UserV2Ex.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    sdkver: jspb.Message.getFieldWithDefault(msg, 3, ""),
                    vendor: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.UserV2Ex.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.UserV2Ex();
            return proto.stream.UserV2Ex.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.UserV2Ex.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserId(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameId(value);
                    break;

                  case 3:
                    var value = reader.readString();
                    msg.setSdkver(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setVendor(value);
                    break;

                  case 5:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.UserV2Ex.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.UserV2Ex.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.UserV2Ex.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserId();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGameId();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getSdkver();
            if (f.length > 0) {
                writer.writeString(3, f);
            }
            f = message.getVendor();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(5, f);
            }
        };
        proto.stream.UserV2Ex.prototype.getUserId = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.UserV2Ex.prototype.setUserId = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.UserV2Ex.prototype.getGameId = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.UserV2Ex.prototype.setGameId = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.UserV2Ex.prototype.getSdkver = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.UserV2Ex.prototype.setSdkver = function(value) {
            jspb.Message.setProto3StringField(this, 3, value);
        };
        proto.stream.UserV2Ex.prototype.getVendor = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.UserV2Ex.prototype.setVendor = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.UserV2Ex.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "");
        };
        proto.stream.UserV2Ex.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.UserV2Ex.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.UserV2Ex.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 5, value);
        };
        proto.stream.NetworkStateReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.NetworkStateReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.NetworkStateReq.displayName = "proto.stream.NetworkStateReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.NetworkStateReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.NetworkStateReq.toObject(opt_includeInstance, this);
            };
            proto.stream.NetworkStateReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    state: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.NetworkStateReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.NetworkStateReq();
            return proto.stream.NetworkStateReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.NetworkStateReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setState(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.NetworkStateReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.NetworkStateReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.NetworkStateReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getState();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.NetworkStateReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.NetworkStateReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.NetworkStateReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.NetworkStateReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.NetworkStateReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.NetworkStateReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.NetworkStateReq.prototype.getState = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.NetworkStateReq.prototype.setState = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.NetworkStateRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.NetworkStateRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.NetworkStateRsp.displayName = "proto.stream.NetworkStateRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.NetworkStateRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.NetworkStateRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.NetworkStateRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.NetworkStateRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.NetworkStateRsp();
            return proto.stream.NetworkStateRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.NetworkStateRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.NetworkStateRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.NetworkStateRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.NetworkStateRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
        };
        proto.stream.NetworkStateRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.NetworkStateRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.NetworkStateNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.NetworkStateNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.NetworkStateNotify.displayName = "proto.stream.NetworkStateNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.NetworkStateNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.NetworkStateNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.NetworkStateNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    owner: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.NetworkStateNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.NetworkStateNotify();
            return proto.stream.NetworkStateNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.NetworkStateNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setState(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.NetworkStateNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.NetworkStateNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.NetworkStateNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getState();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.NetworkStateNotify.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.NetworkStateNotify.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.NetworkStateNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.NetworkStateNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.NetworkStateNotify.prototype.getState = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.NetworkStateNotify.prototype.setState = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.NetworkStateNotify.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.NetworkStateNotify.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.CreateRoomReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.CreateRoomReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.CreateRoomReq.displayName = "proto.stream.CreateRoomReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.CreateRoomReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.CreateRoomReq.toObject(opt_includeInstance, this);
            };
            proto.stream.CreateRoomReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    playerinfo: (f = msg.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(includeInstance, f),
                    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roominfo: (f = msg.getRoominfo()) && proto.stream.RoomInfo.toObject(includeInstance, f),
                    watchsetting: (f = msg.getWatchsetting()) && proto.stream.WatchSetting.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.CreateRoomReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.CreateRoomReq();
            return proto.stream.CreateRoomReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.CreateRoomReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.setPlayerinfo(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 3:
                    var value = new proto.stream.RoomInfo();
                    reader.readMessage(value, proto.stream.RoomInfo.deserializeBinaryFromReader);
                    msg.setRoominfo(value);
                    break;

                  case 4:
                    var value = new proto.stream.WatchSetting();
                    reader.readMessage(value, proto.stream.WatchSetting.deserializeBinaryFromReader);
                    msg.setWatchsetting(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.CreateRoomReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.CreateRoomReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.CreateRoomReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getPlayerinfo();
            if (f != null) {
                writer.writeMessage(1, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getRoominfo();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.RoomInfo.serializeBinaryToWriter);
            }
            f = message.getWatchsetting();
            if (f != null) {
                writer.writeMessage(4, f, proto.stream.WatchSetting.serializeBinaryToWriter);
            }
        };
        proto.stream.CreateRoomReq.prototype.getPlayerinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.PlayerInfo, 1);
        };
        proto.stream.CreateRoomReq.prototype.setPlayerinfo = function(value) {
            jspb.Message.setWrapperField(this, 1, value);
        };
        proto.stream.CreateRoomReq.prototype.clearPlayerinfo = function() {
            this.setPlayerinfo(undefined);
        };
        proto.stream.CreateRoomReq.prototype.hasPlayerinfo = function() {
            return jspb.Message.getField(this, 1) != null;
        };
        proto.stream.CreateRoomReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.CreateRoomReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.CreateRoomReq.prototype.getRoominfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomInfo, 3);
        };
        proto.stream.CreateRoomReq.prototype.setRoominfo = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.CreateRoomReq.prototype.clearRoominfo = function() {
            this.setRoominfo(undefined);
        };
        proto.stream.CreateRoomReq.prototype.hasRoominfo = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.CreateRoomReq.prototype.getWatchsetting = function() {
            return jspb.Message.getWrapperField(this, proto.stream.WatchSetting, 4);
        };
        proto.stream.CreateRoomReq.prototype.setWatchsetting = function(value) {
            jspb.Message.setWrapperField(this, 4, value);
        };
        proto.stream.CreateRoomReq.prototype.clearWatchsetting = function() {
            this.setWatchsetting(undefined);
        };
        proto.stream.CreateRoomReq.prototype.hasWatchsetting = function() {
            return jspb.Message.getField(this, 4) != null;
        };
        proto.stream.CreateRoomRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.CreateRoomRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.CreateRoomRsp.displayName = "proto.stream.CreateRoomRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.CreateRoomRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.CreateRoomRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.CreateRoomRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    bookinfo: (f = msg.getBookinfo()) && proto.stream.BookInfo.toObject(includeInstance, f),
                    owner: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.CreateRoomRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.CreateRoomRsp();
            return proto.stream.CreateRoomRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.CreateRoomRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = new proto.stream.BookInfo();
                    reader.readMessage(value, proto.stream.BookInfo.deserializeBinaryFromReader);
                    msg.setBookinfo(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.CreateRoomRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.CreateRoomRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.CreateRoomRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getBookinfo();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.BookInfo.serializeBinaryToWriter);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.CreateRoomRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.CreateRoomRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.CreateRoomRsp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.CreateRoomRsp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.CreateRoomRsp.prototype.getBookinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.BookInfo, 3);
        };
        proto.stream.CreateRoomRsp.prototype.setBookinfo = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.CreateRoomRsp.prototype.clearBookinfo = function() {
            this.setBookinfo(undefined);
        };
        proto.stream.CreateRoomRsp.prototype.hasBookinfo = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.CreateRoomRsp.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.CreateRoomRsp.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.GetRoomListReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.GetRoomListReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetRoomListReq.displayName = "proto.stream.GetRoomListReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetRoomListReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetRoomListReq.toObject(opt_includeInstance, this);
            };
            proto.stream.GetRoomListReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomfilter: (f = msg.getRoomfilter()) && proto.stream.RoomFilter.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetRoomListReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetRoomListReq();
            return proto.stream.GetRoomListReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetRoomListReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = new proto.stream.RoomFilter();
                    reader.readMessage(value, proto.stream.RoomFilter.deserializeBinaryFromReader);
                    msg.setRoomfilter(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetRoomListReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetRoomListReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetRoomListReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomfilter();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.RoomFilter.serializeBinaryToWriter);
            }
        };
        proto.stream.GetRoomListReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetRoomListReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.GetRoomListReq.prototype.getRoomfilter = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomFilter, 2);
        };
        proto.stream.GetRoomListReq.prototype.setRoomfilter = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.GetRoomListReq.prototype.clearRoomfilter = function() {
            this.setRoomfilter(undefined);
        };
        proto.stream.GetRoomListReq.prototype.hasRoomfilter = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.RoomFilter = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.RoomFilter, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.RoomFilter.displayName = "proto.stream.RoomFilter";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.RoomFilter.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.RoomFilter.toObject(opt_includeInstance, this);
            };
            proto.stream.RoomFilter.toObject = function(includeInstance, msg) {
                var f, obj = {
                    maxplayer: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    mode: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    canwatch: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    roomproperty: msg.getRoomproperty_asB64(),
                    full: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    state: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.RoomFilter.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.RoomFilter();
            return proto.stream.RoomFilter.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.RoomFilter.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setMaxplayer(value);
                    break;

                  case 2:
                    var value = reader.readInt32();
                    msg.setMode(value);
                    break;

                  case 3:
                    var value = reader.readInt32();
                    msg.setCanwatch(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setRoomproperty(value);
                    break;

                  case 5:
                    var value = reader.readInt32();
                    msg.setFull(value);
                    break;

                  case 6:
                    var value = reader.readEnum();
                    msg.setState(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.RoomFilter.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.RoomFilter.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.RoomFilter.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getMaxplayer();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getMode();
            if (f !== 0) {
                writer.writeInt32(2, f);
            }
            f = message.getCanwatch();
            if (f !== 0) {
                writer.writeInt32(3, f);
            }
            f = message.getRoomproperty_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
            f = message.getFull();
            if (f !== 0) {
                writer.writeInt32(5, f);
            }
            f = message.getState();
            if (f !== 0) {
                writer.writeEnum(6, f);
            }
        };
        proto.stream.RoomFilter.prototype.getMaxplayer = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.RoomFilter.prototype.setMaxplayer = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.RoomFilter.prototype.getMode = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.RoomFilter.prototype.setMode = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.RoomFilter.prototype.getCanwatch = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.RoomFilter.prototype.setCanwatch = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.RoomFilter.prototype.getRoomproperty = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.RoomFilter.prototype.getRoomproperty_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getRoomproperty());
        };
        proto.stream.RoomFilter.prototype.getRoomproperty_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getRoomproperty());
        };
        proto.stream.RoomFilter.prototype.setRoomproperty = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.RoomFilter.prototype.getFull = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.RoomFilter.prototype.setFull = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.RoomFilter.prototype.getState = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.RoomFilter.prototype.setState = function(value) {
            jspb.Message.setProto3EnumField(this, 6, value);
        };
        proto.stream.GetRoomListRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.GetRoomListRsp.repeatedFields_, null);
        };
        goog.inherits(proto.stream.GetRoomListRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetRoomListRsp.displayName = "proto.stream.GetRoomListRsp";
        }
        proto.stream.GetRoomListRsp.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetRoomListRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetRoomListRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.GetRoomListRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roominfoList: jspb.Message.toObjectList(msg.getRoominfoList(), proto.stream.RoomInfo.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetRoomListRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetRoomListRsp();
            return proto.stream.GetRoomListRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetRoomListRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = new proto.stream.RoomInfo();
                    reader.readMessage(value, proto.stream.RoomInfo.deserializeBinaryFromReader);
                    msg.addRoominfo(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetRoomListRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetRoomListRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetRoomListRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getRoominfoList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(2, f, proto.stream.RoomInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.GetRoomListRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetRoomListRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.GetRoomListRsp.prototype.getRoominfoList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.RoomInfo, 2);
        };
        proto.stream.GetRoomListRsp.prototype.setRoominfoList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 2, value);
        };
        proto.stream.GetRoomListRsp.prototype.addRoominfo = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stream.RoomInfo, opt_index);
        };
        proto.stream.GetRoomListRsp.prototype.clearRoominfoList = function() {
            this.setRoominfoList([]);
        };
        proto.stream.GetRoomListExReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.GetRoomListExReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetRoomListExReq.displayName = "proto.stream.GetRoomListExReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetRoomListExReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetRoomListExReq.toObject(opt_includeInstance, this);
            };
            proto.stream.GetRoomListExReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomfilter: (f = msg.getRoomfilter()) && proto.stream.RoomFilter.toObject(includeInstance, f),
                    sort: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    order: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    pageno: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    pagesize: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetRoomListExReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetRoomListExReq();
            return proto.stream.GetRoomListExReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetRoomListExReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = new proto.stream.RoomFilter();
                    reader.readMessage(value, proto.stream.RoomFilter.deserializeBinaryFromReader);
                    msg.setRoomfilter(value);
                    break;

                  case 3:
                    var value = reader.readEnum();
                    msg.setSort(value);
                    break;

                  case 4:
                    var value = reader.readEnum();
                    msg.setOrder(value);
                    break;

                  case 5:
                    var value = reader.readInt32();
                    msg.setPageno(value);
                    break;

                  case 6:
                    var value = reader.readInt32();
                    msg.setPagesize(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetRoomListExReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetRoomListExReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetRoomListExReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomfilter();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.RoomFilter.serializeBinaryToWriter);
            }
            f = message.getSort();
            if (f !== 0) {
                writer.writeEnum(3, f);
            }
            f = message.getOrder();
            if (f !== 0) {
                writer.writeEnum(4, f);
            }
            f = message.getPageno();
            if (f !== 0) {
                writer.writeInt32(5, f);
            }
            f = message.getPagesize();
            if (f !== 0) {
                writer.writeInt32(6, f);
            }
        };
        proto.stream.GetRoomListExReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetRoomListExReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.GetRoomListExReq.prototype.getRoomfilter = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomFilter, 2);
        };
        proto.stream.GetRoomListExReq.prototype.setRoomfilter = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.GetRoomListExReq.prototype.clearRoomfilter = function() {
            this.setRoomfilter(undefined);
        };
        proto.stream.GetRoomListExReq.prototype.hasRoomfilter = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.GetRoomListExReq.prototype.getSort = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.GetRoomListExReq.prototype.setSort = function(value) {
            jspb.Message.setProto3EnumField(this, 3, value);
        };
        proto.stream.GetRoomListExReq.prototype.getOrder = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.GetRoomListExReq.prototype.setOrder = function(value) {
            jspb.Message.setProto3EnumField(this, 4, value);
        };
        proto.stream.GetRoomListExReq.prototype.getPageno = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.GetRoomListExReq.prototype.setPageno = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.GetRoomListExReq.prototype.getPagesize = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.GetRoomListExReq.prototype.setPagesize = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.RoomInfoEx = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.RoomInfoEx, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.RoomInfoEx.displayName = "proto.stream.RoomInfoEx";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.RoomInfoEx.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.RoomInfoEx.toObject(opt_includeInstance, this);
            };
            proto.stream.RoomInfoEx.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    roomname: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    maxplayer: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    gameplayer: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    watchplayer: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    mode: jspb.Message.getFieldWithDefault(msg, 6, 0),
                    canwatch: jspb.Message.getFieldWithDefault(msg, 7, 0),
                    roomproperty: msg.getRoomproperty_asB64(),
                    owner: jspb.Message.getFieldWithDefault(msg, 9, 0),
                    state: jspb.Message.getFieldWithDefault(msg, 10, 0),
                    createtime: jspb.Message.getFieldWithDefault(msg, 11, "0"),
                    watchinfo: (f = msg.getWatchinfo()) && proto.stream.WatchInfo.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.RoomInfoEx.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.RoomInfoEx();
            return proto.stream.RoomInfoEx.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.RoomInfoEx.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setRoomname(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setMaxplayer(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setGameplayer(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setWatchplayer(value);
                    break;

                  case 6:
                    var value = reader.readInt32();
                    msg.setMode(value);
                    break;

                  case 7:
                    var value = reader.readInt32();
                    msg.setCanwatch(value);
                    break;

                  case 8:
                    var value = reader.readBytes();
                    msg.setRoomproperty(value);
                    break;

                  case 9:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  case 10:
                    var value = reader.readEnum();
                    msg.setState(value);
                    break;

                  case 11:
                    var value = reader.readUint64String();
                    msg.setCreatetime(value);
                    break;

                  case 12:
                    var value = new proto.stream.WatchInfo();
                    reader.readMessage(value, proto.stream.WatchInfo.deserializeBinaryFromReader);
                    msg.setWatchinfo(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.RoomInfoEx.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.RoomInfoEx.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.RoomInfoEx.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getRoomname();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getMaxplayer();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getGameplayer();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
            f = message.getWatchplayer();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
            f = message.getMode();
            if (f !== 0) {
                writer.writeInt32(6, f);
            }
            f = message.getCanwatch();
            if (f !== 0) {
                writer.writeInt32(7, f);
            }
            f = message.getRoomproperty_asU8();
            if (f.length > 0) {
                writer.writeBytes(8, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(9, f);
            }
            f = message.getState();
            if (f !== 0) {
                writer.writeEnum(10, f);
            }
            f = message.getCreatetime();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(11, f);
            }
            f = message.getWatchinfo();
            if (f != null) {
                writer.writeMessage(12, f, proto.stream.WatchInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.RoomInfoEx.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.RoomInfoEx.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.RoomInfoEx.prototype.getRoomname = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.RoomInfoEx.prototype.setRoomname = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.RoomInfoEx.prototype.getMaxplayer = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.RoomInfoEx.prototype.setMaxplayer = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.RoomInfoEx.prototype.getGameplayer = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.RoomInfoEx.prototype.setGameplayer = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.RoomInfoEx.prototype.getWatchplayer = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.RoomInfoEx.prototype.setWatchplayer = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.RoomInfoEx.prototype.getMode = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.RoomInfoEx.prototype.setMode = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.RoomInfoEx.prototype.getCanwatch = function() {
            return jspb.Message.getFieldWithDefault(this, 7, 0);
        };
        proto.stream.RoomInfoEx.prototype.setCanwatch = function(value) {
            jspb.Message.setProto3IntField(this, 7, value);
        };
        proto.stream.RoomInfoEx.prototype.getRoomproperty = function() {
            return jspb.Message.getFieldWithDefault(this, 8, "");
        };
        proto.stream.RoomInfoEx.prototype.getRoomproperty_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getRoomproperty());
        };
        proto.stream.RoomInfoEx.prototype.getRoomproperty_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getRoomproperty());
        };
        proto.stream.RoomInfoEx.prototype.setRoomproperty = function(value) {
            jspb.Message.setProto3BytesField(this, 8, value);
        };
        proto.stream.RoomInfoEx.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 9, 0);
        };
        proto.stream.RoomInfoEx.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 9, value);
        };
        proto.stream.RoomInfoEx.prototype.getState = function() {
            return jspb.Message.getFieldWithDefault(this, 10, 0);
        };
        proto.stream.RoomInfoEx.prototype.setState = function(value) {
            jspb.Message.setProto3EnumField(this, 10, value);
        };
        proto.stream.RoomInfoEx.prototype.getCreatetime = function() {
            return jspb.Message.getFieldWithDefault(this, 11, "0");
        };
        proto.stream.RoomInfoEx.prototype.setCreatetime = function(value) {
            jspb.Message.setProto3StringIntField(this, 11, value);
        };
        proto.stream.RoomInfoEx.prototype.getWatchinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.WatchInfo, 12);
        };
        proto.stream.RoomInfoEx.prototype.setWatchinfo = function(value) {
            jspb.Message.setWrapperField(this, 12, value);
        };
        proto.stream.RoomInfoEx.prototype.clearWatchinfo = function() {
            this.setWatchinfo(undefined);
        };
        proto.stream.RoomInfoEx.prototype.hasWatchinfo = function() {
            return jspb.Message.getField(this, 12) != null;
        };
        proto.stream.GetRoomListExRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.GetRoomListExRsp.repeatedFields_, null);
        };
        goog.inherits(proto.stream.GetRoomListExRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetRoomListExRsp.displayName = "proto.stream.GetRoomListExRsp";
        }
        proto.stream.GetRoomListExRsp.repeatedFields_ = [ 3 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetRoomListExRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetRoomListExRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.GetRoomListExRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roominfoexList: jspb.Message.toObjectList(msg.getRoominfoexList(), proto.stream.RoomInfoEx.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetRoomListExRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetRoomListExRsp();
            return proto.stream.GetRoomListExRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetRoomListExRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readInt32();
                    msg.setTotal(value);
                    break;

                  case 3:
                    var value = new proto.stream.RoomInfoEx();
                    reader.readMessage(value, proto.stream.RoomInfoEx.deserializeBinaryFromReader);
                    msg.addRoominfoex(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetRoomListExRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetRoomListExRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetRoomListExRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getTotal();
            if (f !== 0) {
                writer.writeInt32(2, f);
            }
            f = message.getRoominfoexList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(3, f, proto.stream.RoomInfoEx.serializeBinaryToWriter);
            }
        };
        proto.stream.GetRoomListExRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetRoomListExRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.GetRoomListExRsp.prototype.getTotal = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.GetRoomListExRsp.prototype.setTotal = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.GetRoomListExRsp.prototype.getRoominfoexList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.RoomInfoEx, 3);
        };
        proto.stream.GetRoomListExRsp.prototype.setRoominfoexList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 3, value);
        };
        proto.stream.GetRoomListExRsp.prototype.addRoominfoex = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.stream.RoomInfoEx, opt_index);
        };
        proto.stream.GetRoomListExRsp.prototype.clearRoominfoexList = function() {
            this.setRoominfoexList([]);
        };
        proto.stream.KickPlayerReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.KickPlayerReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.KickPlayerReq.displayName = "proto.stream.KickPlayerReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.KickPlayerReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.KickPlayerReq.toObject(opt_includeInstance, this);
            };
            proto.stream.KickPlayerReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    srcuserid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.KickPlayerReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.KickPlayerReq();
            return proto.stream.KickPlayerReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.KickPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setSrcuserid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.KickPlayerReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.KickPlayerReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.KickPlayerReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getSrcuserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.KickPlayerReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.KickPlayerReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.KickPlayerReq.prototype.getSrcuserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.KickPlayerReq.prototype.setSrcuserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.KickPlayerReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.KickPlayerReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.KickPlayerReq.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.KickPlayerReq.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.KickPlayerReq.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.KickPlayerReq.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.KickPlayerRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.KickPlayerRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.KickPlayerRsp.displayName = "proto.stream.KickPlayerRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.KickPlayerRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.KickPlayerRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.KickPlayerRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
                    owner: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.KickPlayerRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.KickPlayerRsp();
            return proto.stream.KickPlayerRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.KickPlayerRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 3:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.KickPlayerRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.KickPlayerRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.KickPlayerRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(3, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.KickPlayerRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.KickPlayerRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.KickPlayerRsp.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.KickPlayerRsp.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.KickPlayerRsp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "0");
        };
        proto.stream.KickPlayerRsp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 3, value);
        };
        proto.stream.KickPlayerRsp.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.KickPlayerRsp.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.KickPlayerNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.KickPlayerNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.KickPlayerNotify.displayName = "proto.stream.KickPlayerNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.KickPlayerNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.KickPlayerNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.KickPlayerNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    srcuserid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cpproto: msg.getCpproto_asB64(),
                    owner: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.KickPlayerNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.KickPlayerNotify();
            return proto.stream.KickPlayerNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.KickPlayerNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSrcuserid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.KickPlayerNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.KickPlayerNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.KickPlayerNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSrcuserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.KickPlayerNotify.prototype.getSrcuserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.KickPlayerNotify.prototype.setSrcuserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.KickPlayerNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.KickPlayerNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.KickPlayerNotify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.KickPlayerNotify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.KickPlayerNotify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.KickPlayerNotify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.KickPlayerNotify.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.KickPlayerNotify.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.GetRoomDetailReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.GetRoomDetailReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetRoomDetailReq.displayName = "proto.stream.GetRoomDetailReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetRoomDetailReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetRoomDetailReq.toObject(opt_includeInstance, this);
            };
            proto.stream.GetRoomDetailReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    latestwatchernum: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetRoomDetailReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetRoomDetailReq();
            return proto.stream.GetRoomDetailReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetRoomDetailReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setLatestwatchernum(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetRoomDetailReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetRoomDetailReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetRoomDetailReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getLatestwatchernum();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.GetRoomDetailReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetRoomDetailReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.GetRoomDetailReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.GetRoomDetailReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.GetRoomDetailReq.prototype.getLatestwatchernum = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.GetRoomDetailReq.prototype.setLatestwatchernum = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.GetRoomDetailRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.GetRoomDetailRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetRoomDetailRsp.displayName = "proto.stream.GetRoomDetailRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetRoomDetailRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetRoomDetailRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.GetRoomDetailRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomdetail: (f = msg.getRoomdetail()) && proto.stream.RoomDetail.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetRoomDetailRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetRoomDetailRsp();
            return proto.stream.GetRoomDetailRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetRoomDetailRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = new proto.stream.RoomDetail();
                    reader.readMessage(value, proto.stream.RoomDetail.deserializeBinaryFromReader);
                    msg.setRoomdetail(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetRoomDetailRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetRoomDetailRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetRoomDetailRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getRoomdetail();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.RoomDetail.serializeBinaryToWriter);
            }
        };
        proto.stream.GetRoomDetailRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetRoomDetailRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.GetRoomDetailRsp.prototype.getRoomdetail = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomDetail, 2);
        };
        proto.stream.GetRoomDetailRsp.prototype.setRoomdetail = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.GetRoomDetailRsp.prototype.clearRoomdetail = function() {
            this.setRoomdetail(undefined);
        };
        proto.stream.GetRoomDetailRsp.prototype.hasRoomdetail = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.RoomDetail = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.RoomDetail.repeatedFields_, null);
        };
        goog.inherits(proto.stream.RoomDetail, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.RoomDetail.displayName = "proto.stream.RoomDetail";
        }
        proto.stream.RoomDetail.repeatedFields_ = [ 9, 11 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.RoomDetail.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.RoomDetail.toObject(opt_includeInstance, this);
            };
            proto.stream.RoomDetail.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    maxplayer: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    canwatch: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    roomproperty: msg.getRoomproperty_asB64(),
                    owner: jspb.Message.getFieldWithDefault(msg, 7, 0),
                    createflag: jspb.Message.getFieldWithDefault(msg, 8, 0),
                    playerinfosList: jspb.Message.toObjectList(msg.getPlayerinfosList(), proto.stream.PlayerInfo.toObject, includeInstance),
                    watchroom: (f = msg.getWatchroom()) && proto.stream.WatchRoom.toObject(includeInstance, f),
                    brigadesList: jspb.Message.toObjectList(msg.getBrigadesList(), proto.stream.BrigadeInfo.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.RoomDetail.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.RoomDetail();
            return proto.stream.RoomDetail.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.RoomDetail.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readEnum();
                    msg.setState(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setMaxplayer(value);
                    break;

                  case 4:
                    var value = reader.readInt32();
                    msg.setMode(value);
                    break;

                  case 5:
                    var value = reader.readInt32();
                    msg.setCanwatch(value);
                    break;

                  case 6:
                    var value = reader.readBytes();
                    msg.setRoomproperty(value);
                    break;

                  case 7:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  case 8:
                    var value = reader.readUint32();
                    msg.setCreateflag(value);
                    break;

                  case 9:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.addPlayerinfos(value);
                    break;

                  case 10:
                    var value = new proto.stream.WatchRoom();
                    reader.readMessage(value, proto.stream.WatchRoom.deserializeBinaryFromReader);
                    msg.setWatchroom(value);
                    break;

                  case 11:
                    var value = new proto.stream.BrigadeInfo();
                    reader.readMessage(value, proto.stream.BrigadeInfo.deserializeBinaryFromReader);
                    msg.addBrigades(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.RoomDetail.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.RoomDetail.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.RoomDetail.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getState();
            if (f !== 0) {
                writer.writeEnum(2, f);
            }
            f = message.getMaxplayer();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getMode();
            if (f !== 0) {
                writer.writeInt32(4, f);
            }
            f = message.getCanwatch();
            if (f !== 0) {
                writer.writeInt32(5, f);
            }
            f = message.getRoomproperty_asU8();
            if (f.length > 0) {
                writer.writeBytes(6, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(7, f);
            }
            f = message.getCreateflag();
            if (f !== 0) {
                writer.writeUint32(8, f);
            }
            f = message.getPlayerinfosList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(9, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
            f = message.getWatchroom();
            if (f != null) {
                writer.writeMessage(10, f, proto.stream.WatchRoom.serializeBinaryToWriter);
            }
            f = message.getBrigadesList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(11, f, proto.stream.BrigadeInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.RoomDetail.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.RoomDetail.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.RoomDetail.prototype.getState = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.RoomDetail.prototype.setState = function(value) {
            jspb.Message.setProto3EnumField(this, 2, value);
        };
        proto.stream.RoomDetail.prototype.getMaxplayer = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.RoomDetail.prototype.setMaxplayer = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.RoomDetail.prototype.getMode = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.RoomDetail.prototype.setMode = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.RoomDetail.prototype.getCanwatch = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.RoomDetail.prototype.setCanwatch = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.RoomDetail.prototype.getRoomproperty = function() {
            return jspb.Message.getFieldWithDefault(this, 6, "");
        };
        proto.stream.RoomDetail.prototype.getRoomproperty_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getRoomproperty());
        };
        proto.stream.RoomDetail.prototype.getRoomproperty_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getRoomproperty());
        };
        proto.stream.RoomDetail.prototype.setRoomproperty = function(value) {
            jspb.Message.setProto3BytesField(this, 6, value);
        };
        proto.stream.RoomDetail.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 7, 0);
        };
        proto.stream.RoomDetail.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 7, value);
        };
        proto.stream.RoomDetail.prototype.getCreateflag = function() {
            return jspb.Message.getFieldWithDefault(this, 8, 0);
        };
        proto.stream.RoomDetail.prototype.setCreateflag = function(value) {
            jspb.Message.setProto3IntField(this, 8, value);
        };
        proto.stream.RoomDetail.prototype.getPlayerinfosList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 9);
        };
        proto.stream.RoomDetail.prototype.setPlayerinfosList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 9, value);
        };
        proto.stream.RoomDetail.prototype.addPlayerinfos = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.stream.PlayerInfo, opt_index);
        };
        proto.stream.RoomDetail.prototype.clearPlayerinfosList = function() {
            this.setPlayerinfosList([]);
        };
        proto.stream.RoomDetail.prototype.getWatchroom = function() {
            return jspb.Message.getWrapperField(this, proto.stream.WatchRoom, 10);
        };
        proto.stream.RoomDetail.prototype.setWatchroom = function(value) {
            jspb.Message.setWrapperField(this, 10, value);
        };
        proto.stream.RoomDetail.prototype.clearWatchroom = function() {
            this.setWatchroom(undefined);
        };
        proto.stream.RoomDetail.prototype.hasWatchroom = function() {
            return jspb.Message.getField(this, 10) != null;
        };
        proto.stream.RoomDetail.prototype.getBrigadesList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.BrigadeInfo, 11);
        };
        proto.stream.RoomDetail.prototype.setBrigadesList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 11, value);
        };
        proto.stream.RoomDetail.prototype.addBrigades = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.stream.BrigadeInfo, opt_index);
        };
        proto.stream.RoomDetail.prototype.clearBrigadesList = function() {
            this.setBrigadesList([]);
        };
        proto.stream.SetRoomPropertyReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetRoomPropertyReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetRoomPropertyReq.displayName = "proto.stream.SetRoomPropertyReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetRoomPropertyReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetRoomPropertyReq.toObject(opt_includeInstance, this);
            };
            proto.stream.SetRoomPropertyReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    roomproperty: msg.getRoomproperty_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetRoomPropertyReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetRoomPropertyReq();
            return proto.stream.SetRoomPropertyReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetRoomPropertyReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setRoomproperty(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetRoomPropertyReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetRoomPropertyReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetRoomPropertyReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getRoomproperty_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.SetRoomPropertyReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetRoomPropertyReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetRoomPropertyReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.SetRoomPropertyReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.SetRoomPropertyReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.SetRoomPropertyReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.SetRoomPropertyReq.prototype.getRoomproperty = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.SetRoomPropertyReq.prototype.getRoomproperty_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getRoomproperty());
        };
        proto.stream.SetRoomPropertyReq.prototype.getRoomproperty_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getRoomproperty());
        };
        proto.stream.SetRoomPropertyReq.prototype.setRoomproperty = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.SetRoomPropertyRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetRoomPropertyRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetRoomPropertyRsp.displayName = "proto.stream.SetRoomPropertyRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetRoomPropertyRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetRoomPropertyRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.SetRoomPropertyRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    roomproperty: msg.getRoomproperty_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetRoomPropertyRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetRoomPropertyRsp();
            return proto.stream.SetRoomPropertyRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetRoomPropertyRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setRoomproperty(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetRoomPropertyRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetRoomPropertyRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetRoomPropertyRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getRoomproperty_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.SetRoomPropertyRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetRoomPropertyRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.SetRoomPropertyRsp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.SetRoomPropertyRsp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.SetRoomPropertyRsp.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.SetRoomPropertyRsp.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.SetRoomPropertyRsp.prototype.getRoomproperty = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.SetRoomPropertyRsp.prototype.getRoomproperty_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getRoomproperty());
        };
        proto.stream.SetRoomPropertyRsp.prototype.getRoomproperty_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getRoomproperty());
        };
        proto.stream.SetRoomPropertyRsp.prototype.setRoomproperty = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.NoticeRoomProperty = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.NoticeRoomProperty, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.NoticeRoomProperty.displayName = "proto.stream.NoticeRoomProperty";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.NoticeRoomProperty.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.NoticeRoomProperty.toObject(opt_includeInstance, this);
            };
            proto.stream.NoticeRoomProperty.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roomproperty: msg.getRoomproperty_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.NoticeRoomProperty.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.NoticeRoomProperty();
            return proto.stream.NoticeRoomProperty.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.NoticeRoomProperty.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setRoomproperty(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.NoticeRoomProperty.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.NoticeRoomProperty.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.NoticeRoomProperty.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getRoomproperty_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
        };
        proto.stream.NoticeRoomProperty.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.NoticeRoomProperty.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.NoticeRoomProperty.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.NoticeRoomProperty.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.NoticeRoomProperty.prototype.getRoomproperty = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.NoticeRoomProperty.prototype.getRoomproperty_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getRoomproperty());
        };
        proto.stream.NoticeRoomProperty.prototype.getRoomproperty_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getRoomproperty());
        };
        proto.stream.NoticeRoomProperty.prototype.setRoomproperty = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.DestroyRoomReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.DestroyRoomReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.DestroyRoomReq.displayName = "proto.stream.DestroyRoomReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.DestroyRoomReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.DestroyRoomReq.toObject(opt_includeInstance, this);
            };
            proto.stream.DestroyRoomReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.DestroyRoomReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.DestroyRoomReq();
            return proto.stream.DestroyRoomReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.DestroyRoomReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.DestroyRoomReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.DestroyRoomReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.DestroyRoomReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
        };
        proto.stream.DestroyRoomReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.DestroyRoomReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.DestroyRoomReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.DestroyRoomReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.DestroyRoomRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.DestroyRoomRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.DestroyRoomRsp.displayName = "proto.stream.DestroyRoomRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.DestroyRoomRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.DestroyRoomRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.DestroyRoomRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.DestroyRoomRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.DestroyRoomRsp();
            return proto.stream.DestroyRoomRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.DestroyRoomRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.DestroyRoomRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.DestroyRoomRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.DestroyRoomRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
        };
        proto.stream.DestroyRoomRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.DestroyRoomRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.WatchSetting = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.WatchSetting, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.WatchSetting.displayName = "proto.stream.WatchSetting";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.WatchSetting.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.WatchSetting.toObject(opt_includeInstance, this);
            };
            proto.stream.WatchSetting.toObject = function(includeInstance, msg) {
                var f, obj = {
                    maxwatch: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    watchpersistent: jspb.Message.getFieldWithDefault(msg, 2, false),
                    watchdelayms: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cachetime: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.WatchSetting.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.WatchSetting();
            return proto.stream.WatchSetting.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.WatchSetting.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setMaxwatch(value);
                    break;

                  case 2:
                    var value = reader.readBool();
                    msg.setWatchpersistent(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setWatchdelayms(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setCachetime(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.WatchSetting.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.WatchSetting.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.WatchSetting.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getMaxwatch();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getWatchpersistent();
            if (f) {
                writer.writeBool(2, f);
            }
            f = message.getWatchdelayms();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCachetime();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.WatchSetting.prototype.getMaxwatch = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.WatchSetting.prototype.setMaxwatch = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.WatchSetting.prototype.getWatchpersistent = function() {
            return jspb.Message.getFieldWithDefault(this, 2, false);
        };
        proto.stream.WatchSetting.prototype.setWatchpersistent = function(value) {
            jspb.Message.setProto3BooleanField(this, 2, value);
        };
        proto.stream.WatchSetting.prototype.getWatchdelayms = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.WatchSetting.prototype.setWatchdelayms = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.WatchSetting.prototype.getCachetime = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.WatchSetting.prototype.setCachetime = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.WatchInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.WatchInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.WatchInfo.displayName = "proto.stream.WatchInfo";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.WatchInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.WatchInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.WatchInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    watchsetting: (f = msg.getWatchsetting()) && proto.stream.WatchSetting.toObject(includeInstance, f),
                    curwatch: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.WatchInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.WatchInfo();
            return proto.stream.WatchInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.WatchInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setState(value);
                    break;

                  case 3:
                    var value = new proto.stream.WatchSetting();
                    reader.readMessage(value, proto.stream.WatchSetting.deserializeBinaryFromReader);
                    msg.setWatchsetting(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setCurwatch(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.WatchInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.WatchInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.WatchInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getState();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getWatchsetting();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.WatchSetting.serializeBinaryToWriter);
            }
            f = message.getCurwatch();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
        };
        proto.stream.WatchInfo.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.WatchInfo.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.WatchInfo.prototype.getState = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.WatchInfo.prototype.setState = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.WatchInfo.prototype.getWatchsetting = function() {
            return jspb.Message.getWrapperField(this, proto.stream.WatchSetting, 3);
        };
        proto.stream.WatchInfo.prototype.setWatchsetting = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.WatchInfo.prototype.clearWatchsetting = function() {
            this.setWatchsetting(undefined);
        };
        proto.stream.WatchInfo.prototype.hasWatchsetting = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.WatchInfo.prototype.getCurwatch = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.WatchInfo.prototype.setCurwatch = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.WatchRoom = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.WatchRoom.repeatedFields_, null);
        };
        goog.inherits(proto.stream.WatchRoom, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.WatchRoom.displayName = "proto.stream.WatchRoom";
        }
        proto.stream.WatchRoom.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.WatchRoom.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.WatchRoom.toObject(opt_includeInstance, this);
            };
            proto.stream.WatchRoom.toObject = function(includeInstance, msg) {
                var f, obj = {
                    watchinfo: (f = msg.getWatchinfo()) && proto.stream.WatchInfo.toObject(includeInstance, f),
                    watchplayersList: jspb.Message.toObjectList(msg.getWatchplayersList(), proto.stream.PlayerInfo.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.WatchRoom.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.WatchRoom();
            return proto.stream.WatchRoom.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.WatchRoom.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = new proto.stream.WatchInfo();
                    reader.readMessage(value, proto.stream.WatchInfo.deserializeBinaryFromReader);
                    msg.setWatchinfo(value);
                    break;

                  case 2:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.addWatchplayers(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.WatchRoom.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.WatchRoom.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.WatchRoom.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getWatchinfo();
            if (f != null) {
                writer.writeMessage(1, f, proto.stream.WatchInfo.serializeBinaryToWriter);
            }
            f = message.getWatchplayersList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(2, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.WatchRoom.prototype.getWatchinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.WatchInfo, 1);
        };
        proto.stream.WatchRoom.prototype.setWatchinfo = function(value) {
            jspb.Message.setWrapperField(this, 1, value);
        };
        proto.stream.WatchRoom.prototype.clearWatchinfo = function() {
            this.setWatchinfo(undefined);
        };
        proto.stream.WatchRoom.prototype.hasWatchinfo = function() {
            return jspb.Message.getField(this, 1) != null;
        };
        proto.stream.WatchRoom.prototype.getWatchplayersList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
        };
        proto.stream.WatchRoom.prototype.setWatchplayersList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 2, value);
        };
        proto.stream.WatchRoom.prototype.addWatchplayers = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stream.PlayerInfo, opt_index);
        };
        proto.stream.WatchRoom.prototype.clearWatchplayersList = function() {
            this.setWatchplayersList([]);
        };
        proto.stream.PlayRoom = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.PlayRoom.repeatedFields_, null);
        };
        goog.inherits(proto.stream.PlayRoom, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.PlayRoom.displayName = "proto.stream.PlayRoom";
        }
        proto.stream.PlayRoom.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.PlayRoom.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.PlayRoom.toObject(opt_includeInstance, this);
            };
            proto.stream.PlayRoom.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roominfo: (f = msg.getRoominfo()) && proto.stream.RoomInfo.toObject(includeInstance, f),
                    playerList: jspb.Message.toObjectList(msg.getPlayerList(), proto.stream.PlayerInfo.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.PlayRoom.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.PlayRoom();
            return proto.stream.PlayRoom.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.PlayRoom.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = new proto.stream.RoomInfo();
                    reader.readMessage(value, proto.stream.RoomInfo.deserializeBinaryFromReader);
                    msg.setRoominfo(value);
                    break;

                  case 2:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.addPlayer(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.PlayRoom.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.PlayRoom.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.PlayRoom.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoominfo();
            if (f != null) {
                writer.writeMessage(1, f, proto.stream.RoomInfo.serializeBinaryToWriter);
            }
            f = message.getPlayerList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(2, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.PlayRoom.prototype.getRoominfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomInfo, 1);
        };
        proto.stream.PlayRoom.prototype.setRoominfo = function(value) {
            jspb.Message.setWrapperField(this, 1, value);
        };
        proto.stream.PlayRoom.prototype.clearRoominfo = function() {
            this.setRoominfo(undefined);
        };
        proto.stream.PlayRoom.prototype.hasRoominfo = function() {
            return jspb.Message.getField(this, 1) != null;
        };
        proto.stream.PlayRoom.prototype.getPlayerList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
        };
        proto.stream.PlayRoom.prototype.setPlayerList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 2, value);
        };
        proto.stream.PlayRoom.prototype.addPlayer = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stream.PlayerInfo, opt_index);
        };
        proto.stream.PlayRoom.prototype.clearPlayerList = function() {
            this.setPlayerList([]);
        };
        proto.stream.JoinWatchRoomReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinWatchRoomReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinWatchRoomReq.displayName = "proto.stream.JoinWatchRoomReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinWatchRoomReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinWatchRoomReq.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinWatchRoomReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    userprofile: msg.getUserprofile_asB64(),
                    roomid: jspb.Message.getFieldWithDefault(msg, 4, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinWatchRoomReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinWatchRoomReq();
            return proto.stream.JoinWatchRoomReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinWatchRoomReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setUserprofile(value);
                    break;

                  case 4:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinWatchRoomReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinWatchRoomReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinWatchRoomReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getUserprofile_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(4, f);
            }
        };
        proto.stream.JoinWatchRoomReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinWatchRoomReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.JoinWatchRoomReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.JoinWatchRoomReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.JoinWatchRoomReq.prototype.getUserprofile = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.JoinWatchRoomReq.prototype.getUserprofile_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getUserprofile());
        };
        proto.stream.JoinWatchRoomReq.prototype.getUserprofile_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getUserprofile());
        };
        proto.stream.JoinWatchRoomReq.prototype.setUserprofile = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.JoinWatchRoomReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "0");
        };
        proto.stream.JoinWatchRoomReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 4, value);
        };
        proto.stream.JoinWatchRoomRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinWatchRoomRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinWatchRoomRsp.displayName = "proto.stream.JoinWatchRoomRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinWatchRoomRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinWatchRoomRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinWatchRoomRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    bookinfo: (f = msg.getBookinfo()) && proto.stream.BookInfo.toObject(includeInstance, f),
                    setid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 4, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinWatchRoomRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinWatchRoomRsp();
            return proto.stream.JoinWatchRoomRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinWatchRoomRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = new proto.stream.BookInfo();
                    reader.readMessage(value, proto.stream.BookInfo.deserializeBinaryFromReader);
                    msg.setBookinfo(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setSetid(value);
                    break;

                  case 4:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinWatchRoomRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinWatchRoomRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinWatchRoomRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getBookinfo();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.BookInfo.serializeBinaryToWriter);
            }
            f = message.getSetid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(4, f);
            }
        };
        proto.stream.JoinWatchRoomRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinWatchRoomRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.JoinWatchRoomRsp.prototype.getBookinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.BookInfo, 2);
        };
        proto.stream.JoinWatchRoomRsp.prototype.setBookinfo = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.JoinWatchRoomRsp.prototype.clearBookinfo = function() {
            this.setBookinfo(undefined);
        };
        proto.stream.JoinWatchRoomRsp.prototype.hasBookinfo = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.JoinWatchRoomRsp.prototype.getSetid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.JoinWatchRoomRsp.prototype.setSetid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.JoinWatchRoomRsp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "0");
        };
        proto.stream.JoinWatchRoomRsp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 4, value);
        };
        proto.stream.LeaveWatchRoomReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LeaveWatchRoomReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LeaveWatchRoomReq.displayName = "proto.stream.LeaveWatchRoomReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LeaveWatchRoomReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LeaveWatchRoomReq.toObject(opt_includeInstance, this);
            };
            proto.stream.LeaveWatchRoomReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LeaveWatchRoomReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LeaveWatchRoomReq();
            return proto.stream.LeaveWatchRoomReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LeaveWatchRoomReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 3:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LeaveWatchRoomReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LeaveWatchRoomReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LeaveWatchRoomReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.LeaveWatchRoomReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LeaveWatchRoomReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LeaveWatchRoomReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.LeaveWatchRoomReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.LeaveWatchRoomReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "0");
        };
        proto.stream.LeaveWatchRoomReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 3, value);
        };
        proto.stream.LeaveWatchRoomReq.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.LeaveWatchRoomReq.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.LeaveWatchRoomReq.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.LeaveWatchRoomReq.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.LeaveWatchRoomRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LeaveWatchRoomRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LeaveWatchRoomRsp.displayName = "proto.stream.LeaveWatchRoomRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LeaveWatchRoomRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LeaveWatchRoomRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.LeaveWatchRoomRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LeaveWatchRoomRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LeaveWatchRoomRsp();
            return proto.stream.LeaveWatchRoomRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LeaveWatchRoomRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LeaveWatchRoomRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LeaveWatchRoomRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LeaveWatchRoomRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
        };
        proto.stream.LeaveWatchRoomRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LeaveWatchRoomRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.ChangeRoleReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.ChangeRoleReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.ChangeRoleReq.displayName = "proto.stream.ChangeRoleReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.ChangeRoleReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.ChangeRoleReq.toObject(opt_includeInstance, this);
            };
            proto.stream.ChangeRoleReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
                    targetroomtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    userprofile: msg.getUserprofile_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.ChangeRoleReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.ChangeRoleReq();
            return proto.stream.ChangeRoleReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.ChangeRoleReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 3:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 4:
                    var value = reader.readEnum();
                    msg.setTargetroomtype(value);
                    break;

                  case 5:
                    var value = reader.readBytes();
                    msg.setUserprofile(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.ChangeRoleReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.ChangeRoleReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.ChangeRoleReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(3, f);
            }
            f = message.getTargetroomtype();
            if (f !== 0) {
                writer.writeEnum(4, f);
            }
            f = message.getUserprofile_asU8();
            if (f.length > 0) {
                writer.writeBytes(5, f);
            }
        };
        proto.stream.ChangeRoleReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.ChangeRoleReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.ChangeRoleReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.ChangeRoleReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.ChangeRoleReq.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "0");
        };
        proto.stream.ChangeRoleReq.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 3, value);
        };
        proto.stream.ChangeRoleReq.prototype.getTargetroomtype = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.ChangeRoleReq.prototype.setTargetroomtype = function(value) {
            jspb.Message.setProto3EnumField(this, 4, value);
        };
        proto.stream.ChangeRoleReq.prototype.getUserprofile = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "");
        };
        proto.stream.ChangeRoleReq.prototype.getUserprofile_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getUserprofile());
        };
        proto.stream.ChangeRoleReq.prototype.getUserprofile_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getUserprofile());
        };
        proto.stream.ChangeRoleReq.prototype.setUserprofile = function(value) {
            jspb.Message.setProto3BytesField(this, 5, value);
        };
        proto.stream.ChangeRoleRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.ChangeRoleRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.ChangeRoleRsp.displayName = "proto.stream.ChangeRoleRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.ChangeRoleRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.ChangeRoleRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.ChangeRoleRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    targetroomtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    playroom: (f = msg.getPlayroom()) && proto.stream.PlayRoom.toObject(includeInstance, f),
                    bookinfo: (f = msg.getBookinfo()) && proto.stream.BookInfo.toObject(includeInstance, f),
                    roomid: jspb.Message.getFieldWithDefault(msg, 5, "0"),
                    setid: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.ChangeRoleRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.ChangeRoleRsp();
            return proto.stream.ChangeRoleRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.ChangeRoleRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readEnum();
                    msg.setTargetroomtype(value);
                    break;

                  case 3:
                    var value = new proto.stream.PlayRoom();
                    reader.readMessage(value, proto.stream.PlayRoom.deserializeBinaryFromReader);
                    msg.setPlayroom(value);
                    break;

                  case 4:
                    var value = new proto.stream.BookInfo();
                    reader.readMessage(value, proto.stream.BookInfo.deserializeBinaryFromReader);
                    msg.setBookinfo(value);
                    break;

                  case 5:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setSetid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.ChangeRoleRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.ChangeRoleRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.ChangeRoleRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getTargetroomtype();
            if (f !== 0) {
                writer.writeEnum(2, f);
            }
            f = message.getPlayroom();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.PlayRoom.serializeBinaryToWriter);
            }
            f = message.getBookinfo();
            if (f != null) {
                writer.writeMessage(4, f, proto.stream.BookInfo.serializeBinaryToWriter);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(5, f);
            }
            f = message.getSetid();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
        };
        proto.stream.ChangeRoleRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.ChangeRoleRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.ChangeRoleRsp.prototype.getTargetroomtype = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.ChangeRoleRsp.prototype.setTargetroomtype = function(value) {
            jspb.Message.setProto3EnumField(this, 2, value);
        };
        proto.stream.ChangeRoleRsp.prototype.getPlayroom = function() {
            return jspb.Message.getWrapperField(this, proto.stream.PlayRoom, 3);
        };
        proto.stream.ChangeRoleRsp.prototype.setPlayroom = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.ChangeRoleRsp.prototype.clearPlayroom = function() {
            this.setPlayroom(undefined);
        };
        proto.stream.ChangeRoleRsp.prototype.hasPlayroom = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.ChangeRoleRsp.prototype.getBookinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.BookInfo, 4);
        };
        proto.stream.ChangeRoleRsp.prototype.setBookinfo = function(value) {
            jspb.Message.setWrapperField(this, 4, value);
        };
        proto.stream.ChangeRoleRsp.prototype.clearBookinfo = function() {
            this.setBookinfo(undefined);
        };
        proto.stream.ChangeRoleRsp.prototype.hasBookinfo = function() {
            return jspb.Message.getField(this, 4) != null;
        };
        proto.stream.ChangeRoleRsp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "0");
        };
        proto.stream.ChangeRoleRsp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 5, value);
        };
        proto.stream.ChangeRoleRsp.prototype.getSetid = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.ChangeRoleRsp.prototype.setSetid = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.GetWatchRoomsReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.GetWatchRoomsReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetWatchRoomsReq.displayName = "proto.stream.GetWatchRoomsReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetWatchRoomsReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetWatchRoomsReq.toObject(opt_includeInstance, this);
            };
            proto.stream.GetWatchRoomsReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomfilter: (f = msg.getRoomfilter()) && proto.stream.RoomFilter.toObject(includeInstance, f),
                    sort: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    order: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    pageno: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    pagesize: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetWatchRoomsReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetWatchRoomsReq();
            return proto.stream.GetWatchRoomsReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetWatchRoomsReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = new proto.stream.RoomFilter();
                    reader.readMessage(value, proto.stream.RoomFilter.deserializeBinaryFromReader);
                    msg.setRoomfilter(value);
                    break;

                  case 3:
                    var value = reader.readEnum();
                    msg.setSort(value);
                    break;

                  case 4:
                    var value = reader.readEnum();
                    msg.setOrder(value);
                    break;

                  case 5:
                    var value = reader.readInt32();
                    msg.setPageno(value);
                    break;

                  case 6:
                    var value = reader.readInt32();
                    msg.setPagesize(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetWatchRoomsReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetWatchRoomsReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetWatchRoomsReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomfilter();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.RoomFilter.serializeBinaryToWriter);
            }
            f = message.getSort();
            if (f !== 0) {
                writer.writeEnum(3, f);
            }
            f = message.getOrder();
            if (f !== 0) {
                writer.writeEnum(4, f);
            }
            f = message.getPageno();
            if (f !== 0) {
                writer.writeInt32(5, f);
            }
            f = message.getPagesize();
            if (f !== 0) {
                writer.writeInt32(6, f);
            }
        };
        proto.stream.GetWatchRoomsReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetWatchRoomsReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.GetWatchRoomsReq.prototype.getRoomfilter = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomFilter, 2);
        };
        proto.stream.GetWatchRoomsReq.prototype.setRoomfilter = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.GetWatchRoomsReq.prototype.clearRoomfilter = function() {
            this.setRoomfilter(undefined);
        };
        proto.stream.GetWatchRoomsReq.prototype.hasRoomfilter = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.GetWatchRoomsReq.prototype.getSort = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.GetWatchRoomsReq.prototype.setSort = function(value) {
            jspb.Message.setProto3EnumField(this, 3, value);
        };
        proto.stream.GetWatchRoomsReq.prototype.getOrder = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.GetWatchRoomsReq.prototype.setOrder = function(value) {
            jspb.Message.setProto3EnumField(this, 4, value);
        };
        proto.stream.GetWatchRoomsReq.prototype.getPageno = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.GetWatchRoomsReq.prototype.setPageno = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.GetWatchRoomsReq.prototype.getPagesize = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.GetWatchRoomsReq.prototype.setPagesize = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.GetWatchRoomsRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.GetWatchRoomsRsp.repeatedFields_, null);
        };
        goog.inherits(proto.stream.GetWatchRoomsRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetWatchRoomsRsp.displayName = "proto.stream.GetWatchRoomsRsp";
        }
        proto.stream.GetWatchRoomsRsp.repeatedFields_ = [ 3 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetWatchRoomsRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetWatchRoomsRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.GetWatchRoomsRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    roominfoexList: jspb.Message.toObjectList(msg.getRoominfoexList(), proto.stream.RoomInfoEx.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetWatchRoomsRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetWatchRoomsRsp();
            return proto.stream.GetWatchRoomsRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetWatchRoomsRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readInt32();
                    msg.setTotal(value);
                    break;

                  case 3:
                    var value = new proto.stream.RoomInfoEx();
                    reader.readMessage(value, proto.stream.RoomInfoEx.deserializeBinaryFromReader);
                    msg.addRoominfoex(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetWatchRoomsRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetWatchRoomsRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetWatchRoomsRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getTotal();
            if (f !== 0) {
                writer.writeInt32(2, f);
            }
            f = message.getRoominfoexList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(3, f, proto.stream.RoomInfoEx.serializeBinaryToWriter);
            }
        };
        proto.stream.GetWatchRoomsRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetWatchRoomsRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.GetWatchRoomsRsp.prototype.getTotal = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.GetWatchRoomsRsp.prototype.setTotal = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.GetWatchRoomsRsp.prototype.getRoominfoexList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.RoomInfoEx, 3);
        };
        proto.stream.GetWatchRoomsRsp.prototype.setRoominfoexList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 3, value);
        };
        proto.stream.GetWatchRoomsRsp.prototype.addRoominfoex = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.stream.RoomInfoEx, opt_index);
        };
        proto.stream.GetWatchRoomsRsp.prototype.clearRoominfoexList = function() {
            this.setRoominfoexList([]);
        };
        proto.stream.TeamInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.TeamInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TeamInfo.displayName = "proto.stream.TeamInfo";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TeamInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TeamInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.TeamInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    capacity: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    visibility: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    owner: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TeamInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TeamInfo();
            return proto.stream.TeamInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TeamInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setPassword(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setCapacity(value);
                    break;

                  case 4:
                    var value = reader.readInt32();
                    msg.setMode(value);
                    break;

                  case 5:
                    var value = reader.readInt32();
                    msg.setVisibility(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TeamInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TeamInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TeamInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getPassword();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getCapacity();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getMode();
            if (f !== 0) {
                writer.writeInt32(4, f);
            }
            f = message.getVisibility();
            if (f !== 0) {
                writer.writeInt32(5, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
        };
        proto.stream.TeamInfo.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.TeamInfo.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.TeamInfo.prototype.getPassword = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.TeamInfo.prototype.setPassword = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.TeamInfo.prototype.getCapacity = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.TeamInfo.prototype.setCapacity = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.TeamInfo.prototype.getMode = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.TeamInfo.prototype.setMode = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.TeamInfo.prototype.getVisibility = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.TeamInfo.prototype.setVisibility = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.TeamInfo.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.TeamInfo.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.CreateTeamReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.CreateTeamReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.CreateTeamReq.displayName = "proto.stream.CreateTeamReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.CreateTeamReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.CreateTeamReq.toObject(opt_includeInstance, this);
            };
            proto.stream.CreateTeamReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teaminfo: (f = msg.getTeaminfo()) && proto.stream.TeamInfo.toObject(includeInstance, f),
                    playerinfo: (f = msg.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.CreateTeamReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.CreateTeamReq();
            return proto.stream.CreateTeamReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.CreateTeamReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = new proto.stream.TeamInfo();
                    reader.readMessage(value, proto.stream.TeamInfo.deserializeBinaryFromReader);
                    msg.setTeaminfo(value);
                    break;

                  case 3:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.setPlayerinfo(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.CreateTeamReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.CreateTeamReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.CreateTeamReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTeaminfo();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.TeamInfo.serializeBinaryToWriter);
            }
            f = message.getPlayerinfo();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.CreateTeamReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.CreateTeamReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.CreateTeamReq.prototype.getTeaminfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.TeamInfo, 2);
        };
        proto.stream.CreateTeamReq.prototype.setTeaminfo = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.CreateTeamReq.prototype.clearTeaminfo = function() {
            this.setTeaminfo(undefined);
        };
        proto.stream.CreateTeamReq.prototype.hasTeaminfo = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.CreateTeamReq.prototype.getPlayerinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.PlayerInfo, 3);
        };
        proto.stream.CreateTeamReq.prototype.setPlayerinfo = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.CreateTeamReq.prototype.clearPlayerinfo = function() {
            this.setPlayerinfo(undefined);
        };
        proto.stream.CreateTeamReq.prototype.hasPlayerinfo = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.CreateTeamRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.CreateTeamRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.CreateTeamRsp.displayName = "proto.stream.CreateTeamRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.CreateTeamRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.CreateTeamRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.CreateTeamRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teamid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    owner: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.CreateTeamRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.CreateTeamRsp();
            return proto.stream.CreateTeamRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.CreateTeamRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.CreateTeamRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.CreateTeamRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.CreateTeamRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.CreateTeamRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.CreateTeamRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.CreateTeamRsp.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.CreateTeamRsp.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.CreateTeamRsp.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.CreateTeamRsp.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.JoinTeamReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinTeamReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinTeamReq.displayName = "proto.stream.JoinTeamReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinTeamReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinTeamReq.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinTeamReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teamid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    playerinfo: (f = msg.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(includeInstance, f),
                    password: jspb.Message.getFieldWithDefault(msg, 4, "")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinTeamReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinTeamReq();
            return proto.stream.JoinTeamReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinTeamReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 3:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.setPlayerinfo(value);
                    break;

                  case 4:
                    var value = reader.readString();
                    msg.setPassword(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinTeamReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinTeamReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinTeamReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getPlayerinfo();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
            f = message.getPassword();
            if (f.length > 0) {
                writer.writeString(4, f);
            }
        };
        proto.stream.JoinTeamReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinTeamReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.JoinTeamReq.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.JoinTeamReq.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.JoinTeamReq.prototype.getPlayerinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.PlayerInfo, 3);
        };
        proto.stream.JoinTeamReq.prototype.setPlayerinfo = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.JoinTeamReq.prototype.clearPlayerinfo = function() {
            this.setPlayerinfo(undefined);
        };
        proto.stream.JoinTeamReq.prototype.hasPlayerinfo = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.JoinTeamReq.prototype.getPassword = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.JoinTeamReq.prototype.setPassword = function(value) {
            jspb.Message.setProto3StringField(this, 4, value);
        };
        proto.stream.JoinTeamRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.JoinTeamRsp.repeatedFields_, null);
        };
        goog.inherits(proto.stream.JoinTeamRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinTeamRsp.displayName = "proto.stream.JoinTeamRsp";
        }
        proto.stream.JoinTeamRsp.repeatedFields_ = [ 3 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinTeamRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinTeamRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinTeamRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teaminfo: (f = msg.getTeaminfo()) && proto.stream.TeamInfo.toObject(includeInstance, f),
                    usersList: jspb.Message.toObjectList(msg.getUsersList(), proto.stream.PlayerInfo.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinTeamRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinTeamRsp();
            return proto.stream.JoinTeamRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinTeamRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = new proto.stream.TeamInfo();
                    reader.readMessage(value, proto.stream.TeamInfo.deserializeBinaryFromReader);
                    msg.setTeaminfo(value);
                    break;

                  case 3:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.addUsers(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinTeamRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinTeamRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinTeamRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getTeaminfo();
            if (f != null) {
                writer.writeMessage(2, f, proto.stream.TeamInfo.serializeBinaryToWriter);
            }
            f = message.getUsersList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(3, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.JoinTeamRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.JoinTeamRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.JoinTeamRsp.prototype.getTeaminfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.TeamInfo, 2);
        };
        proto.stream.JoinTeamRsp.prototype.setTeaminfo = function(value) {
            jspb.Message.setWrapperField(this, 2, value);
        };
        proto.stream.JoinTeamRsp.prototype.clearTeaminfo = function() {
            this.setTeaminfo(undefined);
        };
        proto.stream.JoinTeamRsp.prototype.hasTeaminfo = function() {
            return jspb.Message.getField(this, 2) != null;
        };
        proto.stream.JoinTeamRsp.prototype.getUsersList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 3);
        };
        proto.stream.JoinTeamRsp.prototype.setUsersList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 3, value);
        };
        proto.stream.JoinTeamRsp.prototype.addUsers = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.stream.PlayerInfo, opt_index);
        };
        proto.stream.JoinTeamRsp.prototype.clearUsersList = function() {
            this.setUsersList([]);
        };
        proto.stream.JoinTeamNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.JoinTeamNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.JoinTeamNotify.displayName = "proto.stream.JoinTeamNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.JoinTeamNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.JoinTeamNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.JoinTeamNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    user: (f = msg.getUser()) && proto.stream.PlayerInfo.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.JoinTeamNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.JoinTeamNotify();
            return proto.stream.JoinTeamNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.JoinTeamNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.setUser(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.JoinTeamNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.JoinTeamNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.JoinTeamNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUser();
            if (f != null) {
                writer.writeMessage(1, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.JoinTeamNotify.prototype.getUser = function() {
            return jspb.Message.getWrapperField(this, proto.stream.PlayerInfo, 1);
        };
        proto.stream.JoinTeamNotify.prototype.setUser = function(value) {
            jspb.Message.setWrapperField(this, 1, value);
        };
        proto.stream.JoinTeamNotify.prototype.clearUser = function() {
            this.setUser(undefined);
        };
        proto.stream.JoinTeamNotify.prototype.hasUser = function() {
            return jspb.Message.getField(this, 1) != null;
        };
        proto.stream.LeaveTeamReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LeaveTeamReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LeaveTeamReq.displayName = "proto.stream.LeaveTeamReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LeaveTeamReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LeaveTeamReq.toObject(opt_includeInstance, this);
            };
            proto.stream.LeaveTeamReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teamid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LeaveTeamReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LeaveTeamReq();
            return proto.stream.LeaveTeamReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LeaveTeamReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LeaveTeamReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LeaveTeamReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LeaveTeamReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.LeaveTeamReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LeaveTeamReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LeaveTeamReq.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.LeaveTeamReq.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.LeaveTeamReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.LeaveTeamReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.LeaveTeamRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LeaveTeamRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LeaveTeamRsp.displayName = "proto.stream.LeaveTeamRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LeaveTeamRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LeaveTeamRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.LeaveTeamRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teamid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LeaveTeamRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LeaveTeamRsp();
            return proto.stream.LeaveTeamRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LeaveTeamRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LeaveTeamRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LeaveTeamRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LeaveTeamRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.LeaveTeamRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LeaveTeamRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.LeaveTeamRsp.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.LeaveTeamRsp.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.LeaveTeamRsp.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.LeaveTeamRsp.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.LeaveTeamNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LeaveTeamNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LeaveTeamNotify.displayName = "proto.stream.LeaveTeamNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LeaveTeamNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LeaveTeamNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.LeaveTeamNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    owner: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LeaveTeamNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LeaveTeamNotify();
            return proto.stream.LeaveTeamNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LeaveTeamNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setOwner(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LeaveTeamNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LeaveTeamNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LeaveTeamNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getOwner();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.LeaveTeamNotify.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.LeaveTeamNotify.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.LeaveTeamNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.LeaveTeamNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.LeaveTeamNotify.prototype.getOwner = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.LeaveTeamNotify.prototype.setOwner = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.TeamMatchCond = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.TeamMatchCond, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TeamMatchCond.displayName = "proto.stream.TeamMatchCond";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TeamMatchCond.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TeamMatchCond.toObject(opt_includeInstance, this);
            };
            proto.stream.TeamMatchCond.toObject = function(includeInstance, msg) {
                var f, obj = {
                    teamnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teammembernum: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    timeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    weight: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    weightrange: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    weightrule: jspb.Message.getFieldWithDefault(msg, 6, 0),
                    full: jspb.Message.getFieldWithDefault(msg, 7, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TeamMatchCond.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TeamMatchCond();
            return proto.stream.TeamMatchCond.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TeamMatchCond.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setTeamnum(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setTeammembernum(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setTimeout(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setWeight(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setWeightrange(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setWeightrule(value);
                    break;

                  case 7:
                    var value = reader.readUint32();
                    msg.setFull(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TeamMatchCond.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TeamMatchCond.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TeamMatchCond.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getTeamnum();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTeammembernum();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getTimeout();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getWeight();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
            f = message.getWeightrange();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
            f = message.getWeightrule();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
            f = message.getFull();
            if (f !== 0) {
                writer.writeUint32(7, f);
            }
        };
        proto.stream.TeamMatchCond.prototype.getTeamnum = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.TeamMatchCond.prototype.setTeamnum = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.TeamMatchCond.prototype.getTeammembernum = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.TeamMatchCond.prototype.setTeammembernum = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.TeamMatchCond.prototype.getTimeout = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.TeamMatchCond.prototype.setTimeout = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.TeamMatchCond.prototype.getWeight = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.TeamMatchCond.prototype.setWeight = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.TeamMatchCond.prototype.getWeightrange = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.TeamMatchCond.prototype.setWeightrange = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.TeamMatchCond.prototype.getWeightrule = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.TeamMatchCond.prototype.setWeightrule = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.TeamMatchCond.prototype.getFull = function() {
            return jspb.Message.getFieldWithDefault(this, 7, 0);
        };
        proto.stream.TeamMatchCond.prototype.setFull = function(value) {
            jspb.Message.setProto3IntField(this, 7, value);
        };
        proto.stream.TeamMatchReq = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.TeamMatchReq, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TeamMatchReq.displayName = "proto.stream.TeamMatchReq";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TeamMatchReq.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TeamMatchReq.toObject(opt_includeInstance, this);
            };
            proto.stream.TeamMatchReq.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teamid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    cond: (f = msg.getCond()) && proto.stream.TeamMatchCond.toObject(includeInstance, f),
                    roominfo: (f = msg.getRoominfo()) && proto.stream.RoomInfo.toObject(includeInstance, f),
                    watchsetting: (f = msg.getWatchsetting()) && proto.stream.WatchSetting.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TeamMatchReq.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TeamMatchReq();
            return proto.stream.TeamMatchReq.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TeamMatchReq.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = new proto.stream.TeamMatchCond();
                    reader.readMessage(value, proto.stream.TeamMatchCond.deserializeBinaryFromReader);
                    msg.setCond(value);
                    break;

                  case 5:
                    var value = new proto.stream.RoomInfo();
                    reader.readMessage(value, proto.stream.RoomInfo.deserializeBinaryFromReader);
                    msg.setRoominfo(value);
                    break;

                  case 6:
                    var value = new proto.stream.WatchSetting();
                    reader.readMessage(value, proto.stream.WatchSetting.deserializeBinaryFromReader);
                    msg.setWatchsetting(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TeamMatchReq.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TeamMatchReq.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TeamMatchReq.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getCond();
            if (f != null) {
                writer.writeMessage(4, f, proto.stream.TeamMatchCond.serializeBinaryToWriter);
            }
            f = message.getRoominfo();
            if (f != null) {
                writer.writeMessage(5, f, proto.stream.RoomInfo.serializeBinaryToWriter);
            }
            f = message.getWatchsetting();
            if (f != null) {
                writer.writeMessage(6, f, proto.stream.WatchSetting.serializeBinaryToWriter);
            }
        };
        proto.stream.TeamMatchReq.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.TeamMatchReq.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.TeamMatchReq.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.TeamMatchReq.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.TeamMatchReq.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.TeamMatchReq.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.TeamMatchReq.prototype.getCond = function() {
            return jspb.Message.getWrapperField(this, proto.stream.TeamMatchCond, 4);
        };
        proto.stream.TeamMatchReq.prototype.setCond = function(value) {
            jspb.Message.setWrapperField(this, 4, value);
        };
        proto.stream.TeamMatchReq.prototype.clearCond = function() {
            this.setCond(undefined);
        };
        proto.stream.TeamMatchReq.prototype.hasCond = function() {
            return jspb.Message.getField(this, 4) != null;
        };
        proto.stream.TeamMatchReq.prototype.getRoominfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomInfo, 5);
        };
        proto.stream.TeamMatchReq.prototype.setRoominfo = function(value) {
            jspb.Message.setWrapperField(this, 5, value);
        };
        proto.stream.TeamMatchReq.prototype.clearRoominfo = function() {
            this.setRoominfo(undefined);
        };
        proto.stream.TeamMatchReq.prototype.hasRoominfo = function() {
            return jspb.Message.getField(this, 5) != null;
        };
        proto.stream.TeamMatchReq.prototype.getWatchsetting = function() {
            return jspb.Message.getWrapperField(this, proto.stream.WatchSetting, 6);
        };
        proto.stream.TeamMatchReq.prototype.setWatchsetting = function(value) {
            jspb.Message.setWrapperField(this, 6, value);
        };
        proto.stream.TeamMatchReq.prototype.clearWatchsetting = function() {
            this.setWatchsetting(undefined);
        };
        proto.stream.TeamMatchReq.prototype.hasWatchsetting = function() {
            return jspb.Message.getField(this, 6) != null;
        };
        proto.stream.TeamMatchRsp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.TeamMatchRsp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TeamMatchRsp.displayName = "proto.stream.TeamMatchRsp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TeamMatchRsp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TeamMatchRsp.toObject(opt_includeInstance, this);
            };
            proto.stream.TeamMatchRsp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TeamMatchRsp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TeamMatchRsp();
            return proto.stream.TeamMatchRsp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TeamMatchRsp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TeamMatchRsp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TeamMatchRsp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TeamMatchRsp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
        };
        proto.stream.TeamMatchRsp.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.TeamMatchRsp.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.TeamDetail = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.TeamDetail.repeatedFields_, null);
        };
        goog.inherits(proto.stream.TeamDetail, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TeamDetail.displayName = "proto.stream.TeamDetail";
        }
        proto.stream.TeamDetail.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TeamDetail.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TeamDetail.toObject(opt_includeInstance, this);
            };
            proto.stream.TeamDetail.toObject = function(includeInstance, msg) {
                var f, obj = {
                    teaminfo: (f = msg.getTeaminfo()) && proto.stream.TeamInfo.toObject(includeInstance, f),
                    playerList: jspb.Message.toObjectList(msg.getPlayerList(), proto.stream.PlayerInfo.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TeamDetail.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TeamDetail();
            return proto.stream.TeamDetail.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TeamDetail.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = new proto.stream.TeamInfo();
                    reader.readMessage(value, proto.stream.TeamInfo.deserializeBinaryFromReader);
                    msg.setTeaminfo(value);
                    break;

                  case 2:
                    var value = new proto.stream.PlayerInfo();
                    reader.readMessage(value, proto.stream.PlayerInfo.deserializeBinaryFromReader);
                    msg.addPlayer(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TeamDetail.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TeamDetail.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TeamDetail.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getTeaminfo();
            if (f != null) {
                writer.writeMessage(1, f, proto.stream.TeamInfo.serializeBinaryToWriter);
            }
            f = message.getPlayerList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(2, f, proto.stream.PlayerInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.TeamDetail.prototype.getTeaminfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.TeamInfo, 1);
        };
        proto.stream.TeamDetail.prototype.setTeaminfo = function(value) {
            jspb.Message.setWrapperField(this, 1, value);
        };
        proto.stream.TeamDetail.prototype.clearTeaminfo = function() {
            this.setTeaminfo(undefined);
        };
        proto.stream.TeamDetail.prototype.hasTeaminfo = function() {
            return jspb.Message.getField(this, 1) != null;
        };
        proto.stream.TeamDetail.prototype.getPlayerList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
        };
        proto.stream.TeamDetail.prototype.setPlayerList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 2, value);
        };
        proto.stream.TeamDetail.prototype.addPlayer = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stream.PlayerInfo, opt_index);
        };
        proto.stream.TeamDetail.prototype.clearPlayerList = function() {
            this.setPlayerList([]);
        };
        proto.stream.BrigadeInfo = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.BrigadeInfo.repeatedFields_, null);
        };
        goog.inherits(proto.stream.BrigadeInfo, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.BrigadeInfo.displayName = "proto.stream.BrigadeInfo";
        }
        proto.stream.BrigadeInfo.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.BrigadeInfo.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.BrigadeInfo.toObject(opt_includeInstance, this);
            };
            proto.stream.BrigadeInfo.toObject = function(includeInstance, msg) {
                var f, obj = {
                    brigadeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    teamsList: jspb.Message.toObjectList(msg.getTeamsList(), proto.stream.TeamDetail.toObject, includeInstance)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.BrigadeInfo.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.BrigadeInfo();
            return proto.stream.BrigadeInfo.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.BrigadeInfo.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setBrigadeid(value);
                    break;

                  case 2:
                    var value = new proto.stream.TeamDetail();
                    reader.readMessage(value, proto.stream.TeamDetail.deserializeBinaryFromReader);
                    msg.addTeams(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.BrigadeInfo.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.BrigadeInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.BrigadeInfo.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getBrigadeid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTeamsList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(2, f, proto.stream.TeamDetail.serializeBinaryToWriter);
            }
        };
        proto.stream.BrigadeInfo.prototype.getBrigadeid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.BrigadeInfo.prototype.setBrigadeid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.BrigadeInfo.prototype.getTeamsList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.TeamDetail, 2);
        };
        proto.stream.BrigadeInfo.prototype.setTeamsList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 2, value);
        };
        proto.stream.BrigadeInfo.prototype.addTeams = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stream.TeamDetail, opt_index);
        };
        proto.stream.BrigadeInfo.prototype.clearTeamsList = function() {
            this.setTeamsList([]);
        };
        proto.stream.TeamMatchResultNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.TeamMatchResultNotify.repeatedFields_, null);
        };
        goog.inherits(proto.stream.TeamMatchResultNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TeamMatchResultNotify.displayName = "proto.stream.TeamMatchResultNotify";
        }
        proto.stream.TeamMatchResultNotify.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TeamMatchResultNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TeamMatchResultNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.TeamMatchResultNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    brigadesList: jspb.Message.toObjectList(msg.getBrigadesList(), proto.stream.BrigadeInfo.toObject, includeInstance),
                    roominfo: (f = msg.getRoominfo()) && proto.stream.RoomInfo.toObject(includeInstance, f),
                    bookinfo: (f = msg.getBookinfo()) && proto.stream.BookInfo.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TeamMatchResultNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TeamMatchResultNotify();
            return proto.stream.TeamMatchResultNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TeamMatchResultNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readEnum();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = new proto.stream.BrigadeInfo();
                    reader.readMessage(value, proto.stream.BrigadeInfo.deserializeBinaryFromReader);
                    msg.addBrigades(value);
                    break;

                  case 3:
                    var value = new proto.stream.RoomInfo();
                    reader.readMessage(value, proto.stream.RoomInfo.deserializeBinaryFromReader);
                    msg.setRoominfo(value);
                    break;

                  case 4:
                    var value = new proto.stream.BookInfo();
                    reader.readMessage(value, proto.stream.BookInfo.deserializeBinaryFromReader);
                    msg.setBookinfo(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TeamMatchResultNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TeamMatchResultNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TeamMatchResultNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeEnum(1, f);
            }
            f = message.getBrigadesList();
            if (f.length > 0) {
                writer.writeRepeatedMessage(2, f, proto.stream.BrigadeInfo.serializeBinaryToWriter);
            }
            f = message.getRoominfo();
            if (f != null) {
                writer.writeMessage(3, f, proto.stream.RoomInfo.serializeBinaryToWriter);
            }
            f = message.getBookinfo();
            if (f != null) {
                writer.writeMessage(4, f, proto.stream.BookInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.TeamMatchResultNotify.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.TeamMatchResultNotify.prototype.setStatus = function(value) {
            jspb.Message.setProto3EnumField(this, 1, value);
        };
        proto.stream.TeamMatchResultNotify.prototype.getBrigadesList = function() {
            return jspb.Message.getRepeatedWrapperField(this, proto.stream.BrigadeInfo, 2);
        };
        proto.stream.TeamMatchResultNotify.prototype.setBrigadesList = function(value) {
            jspb.Message.setRepeatedWrapperField(this, 2, value);
        };
        proto.stream.TeamMatchResultNotify.prototype.addBrigades = function(opt_value, opt_index) {
            return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.stream.BrigadeInfo, opt_index);
        };
        proto.stream.TeamMatchResultNotify.prototype.clearBrigadesList = function() {
            this.setBrigadesList([]);
        };
        proto.stream.TeamMatchResultNotify.prototype.getRoominfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.RoomInfo, 3);
        };
        proto.stream.TeamMatchResultNotify.prototype.setRoominfo = function(value) {
            jspb.Message.setWrapperField(this, 3, value);
        };
        proto.stream.TeamMatchResultNotify.prototype.clearRoominfo = function() {
            this.setRoominfo(undefined);
        };
        proto.stream.TeamMatchResultNotify.prototype.hasRoominfo = function() {
            return jspb.Message.getField(this, 3) != null;
        };
        proto.stream.TeamMatchResultNotify.prototype.getBookinfo = function() {
            return jspb.Message.getWrapperField(this, proto.stream.BookInfo, 4);
        };
        proto.stream.TeamMatchResultNotify.prototype.setBookinfo = function(value) {
            jspb.Message.setWrapperField(this, 4, value);
        };
        proto.stream.TeamMatchResultNotify.prototype.clearBookinfo = function() {
            this.setBookinfo(undefined);
        };
        proto.stream.TeamMatchResultNotify.prototype.hasBookinfo = function() {
            return jspb.Message.getField(this, 4) != null;
        };
        proto.stream.TeamMatchStartNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.TeamMatchStartNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.TeamMatchStartNotify.displayName = "proto.stream.TeamMatchStartNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.TeamMatchStartNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.TeamMatchStartNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.TeamMatchStartNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 2, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.TeamMatchStartNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.TeamMatchStartNotify();
            return proto.stream.TeamMatchStartNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.TeamMatchStartNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setTeamid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.TeamMatchStartNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.TeamMatchStartNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.TeamMatchStartNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getTeamid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
        };
        proto.stream.TeamMatchStartNotify.prototype.getTeamid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.TeamMatchStartNotify.prototype.setTeamid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.TeamMatchStartNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.TeamMatchStartNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.CmdId = {
            NOCMD: 0,
            LOGINREQ: 1101,
            LOGINRSP: 1102,
            HEARTBEATREQ: 1103,
            LOGOUTREQ: 1105,
            LOGOUTRSP: 1106,
            SETRECONNECTTIMEOUTREQ: 1109,
            SETRECONNECTTIMEOUTRSP: 1110,
            NETWORKSTATEREQ: 1120,
            NETWORKSTATERSP: 1121,
            NOTICENETWORKSTATEREQ: 1122,
            JOINROOMREQ: 1201,
            JOINROOMRSP: 1202,
            NOTICEUSERJOINREQ: 1301,
            CREATEROOMREQ: 1203,
            CREATEROOMRSP: 1204,
            LEAVEROOMREQ: 1205,
            LEAVEROOMRSP: 1206,
            NOTICEUSERLEAVEREQ: 1302,
            GETROOMLISTREQ: 1207,
            GETROOMLISTRSP: 1208,
            GETROOMDETAILREQ: 1209,
            GETROOMDETAILRSP: 1210,
            ROOMDETAILUPDATENOTIFY: 1211,
            JOINOVERREQ: 1213,
            JOINOVERRSP: 1214,
            JOINOVERNOTIFY: 1306,
            ROOMLISTEXREQ: 1215,
            ROOMLISTEXRSP: 1216,
            MVSSTARTEDREQ: 1217,
            MVSSTARTEDRSP: 1218,
            SETROOMPROPERTYREQ: 1219,
            SETROOMPROPERTYRSP: 1220,
            NOTICEROOMPROPERTY: 1307,
            JOINOPENREQ: 1221,
            JOINOPENRSP: 1222,
            JOINOPENNOTIFY: 1308,
            DESTROYROOMREQ: 1223,
            DESTROYROOMRSP: 1224,
            JOINWATCHROOMREQ: 1225,
            JOINWATCHROOMRSP: 1226,
            LEAVEWATCHROOMREQ: 1227,
            LEAVEWATCHROOMRSP: 1228,
            GETWATCHROOMSREQ: 1229,
            GETWATCHROOMSRSP: 1230,
            CHANGEROLEREQ: 1231,
            CHANGEROLERSP: 1232,
            KICKPLAYERREQ: 1303,
            KICKPLAYERRSP: 1304,
            KICKPLAYERNOTIFY: 1305,
            CREATETEAMREQ: 1233,
            CREATETEAMRSP: 1234,
            JOINTEAMREQ: 1235,
            JOINTEAMRSP: 1236,
            JOINTEAMNOTIFY: 1309,
            LEAVETEAMREQ: 1237,
            LEAVETEAMRSP: 1238,
            LEAVETEAMNOTIFY: 1310,
            TEAMMATCHREQ: 1239,
            TEAMMATCHRSP: 1240,
            TEAMMATCHRESULTNOTIFY: 1311,
            TEAMMATCHSTARTNOTIFY: 1312
        };
        proto.stream.JoinRoomType = {
            NOJOIN: 0,
            JOINSPECIALROOM: 1,
            JOINROOMWITHPROPERTY: 2,
            JOINRANDOMROOM: 3,
            REJOINROOM: 4,
            CREATEJOINROOM: 5,
            WATCHERJOIN: 6
        };
        proto.stream.RoomState = {
            ROOMSTATENIL: 0,
            ROOMSTATEOPEN: 1,
            ROOMSTATECLOSED: 2
        };
        proto.stream.CreateFlag = {
            CREATEROOMUNKNOWN: 0,
            CREATEROOMSYSTEM: 1,
            CREATEROOMPLAYER: 2,
            CREATEROOMGS: 3
        };
        proto.stream.RoomListSort = {
            NIL: 0,
            CREATETIME: 1,
            PLAYERNUM: 2,
            STATE: 3
        };
        proto.stream.SortOrder = {
            ASC: 0,
            DESC: 1
        };
        proto.stream.RoomType = {
            GAMEROOM: 0,
            WATCHROOMTYPE: 1
        };
        goog.object.extend(exports, proto.stream);
    }, {
        "./errorcode_pb.js": 5,
        "google-protobuf": 8
    } ],
    8: [ function(_require, module, exports) {
        (function(global, Buffer) {
            var $jscomp = {
                scope: {},
                getGlobal: function(a) {
                    return "undefined" != typeof window && window === a ? a : "undefined" != typeof global ? global : a;
                }
            };
            $jscomp.global = $jscomp.getGlobal(this);
            $jscomp.initSymbol = function() {
                $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
                $jscomp.initSymbol = function() {};
            };
            $jscomp.symbolCounter_ = 0;
            $jscomp.Symbol = function(a) {
                return "jscomp_symbol_" + a + $jscomp.symbolCounter_++;
            };
            $jscomp.initSymbolIterator = function() {
                $jscomp.initSymbol();
                $jscomp.global.Symbol.iterator || ($jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
                $jscomp.initSymbolIterator = function() {};
            };
            $jscomp.makeIterator = function(a) {
                $jscomp.initSymbolIterator();
                $jscomp.initSymbol();
                $jscomp.initSymbolIterator();
                var b = a[Symbol.iterator];
                if (b) return b.call(a);
                var c = 0;
                return {
                    next: function() {
                        return c < a.length ? {
                            done: !1,
                            value: a[c++]
                        } : {
                            done: !0
                        };
                    }
                };
            };
            $jscomp.arrayFromIterator = function(a) {
                for (var b, c = []; !(b = a.next()).done; ) c.push(b.value);
                return c;
            };
            $jscomp.arrayFromIterable = function(a) {
                return a instanceof Array ? a : $jscomp.arrayFromIterator($jscomp.makeIterator(a));
            };
            $jscomp.inherits = function(a, b) {
                function c() {}
                c.prototype = b.prototype;
                a.prototype = new c();
                a.prototype.constructor = a;
                for (var d in b) if (Object.defineProperties) {
                    var e = Object.getOwnPropertyDescriptor(b, d);
                    e && Object.defineProperty(a, d, e);
                } else a[d] = b[d];
            };
            $jscomp.array = $jscomp.array || {};
            $jscomp.iteratorFromArray = function(a, b) {
                $jscomp.initSymbolIterator();
                a instanceof String && (a += "");
                var c = 0, d = {
                    next: function() {
                        if (c < a.length) {
                            var e = c++;
                            return {
                                value: b(e, a[e]),
                                done: !1
                            };
                        }
                        d.next = function() {
                            return {
                                done: !0,
                                value: void 0
                            };
                        };
                        return d.next();
                    }
                };
                $jscomp.initSymbol();
                $jscomp.initSymbolIterator();
                d[Symbol.iterator] = function() {
                    return d;
                };
                return d;
            };
            $jscomp.findInternal = function(a, b, c) {
                a instanceof String && (a = String(a));
                for (var d = a.length, e = 0; e < d; e++) {
                    var f = a[e];
                    if (b.call(c, f, e, a)) return {
                        i: e,
                        v: f
                    };
                }
                return {
                    i: -1,
                    v: void 0
                };
            };
            $jscomp.array.from = function(a, b, c) {
                $jscomp.initSymbolIterator();
                b = null != b ? b : function(a) {
                    return a;
                };
                var d = [];
                $jscomp.initSymbol();
                $jscomp.initSymbolIterator();
                var e = a[Symbol.iterator];
                "function" == typeof e && (a = e.call(a));
                if ("function" == typeof a.next) for (;!(e = a.next()).done; ) d.push(b.call(c, e.value)); else for (var e = a.length, f = 0; f < e; f++) d.push(b.call(c, a[f]));
                return d;
            };
            $jscomp.array.of = function(a) {
                return $jscomp.array.from(arguments);
            };
            $jscomp.array.entries = function() {
                return $jscomp.iteratorFromArray(this, function(a, b) {
                    return [ a, b ];
                });
            };
            $jscomp.array.installHelper_ = function(a, b) {
                !Array.prototype[a] && Object.defineProperties && Object.defineProperty && Object.defineProperty(Array.prototype, a, {
                    configurable: !0,
                    enumerable: !1,
                    writable: !0,
                    value: b
                });
            };
            $jscomp.array.entries$install = function() {
                $jscomp.array.installHelper_("entries", $jscomp.array.entries);
            };
            $jscomp.array.keys = function() {
                return $jscomp.iteratorFromArray(this, function(a) {
                    return a;
                });
            };
            $jscomp.array.keys$install = function() {
                $jscomp.array.installHelper_("keys", $jscomp.array.keys);
            };
            $jscomp.array.values = function() {
                return $jscomp.iteratorFromArray(this, function(a, b) {
                    return b;
                });
            };
            $jscomp.array.values$install = function() {
                $jscomp.array.installHelper_("values", $jscomp.array.values);
            };
            $jscomp.array.copyWithin = function(a, b, c) {
                var d = this.length;
                a = Number(a);
                b = Number(b);
                c = Number(null != c ? c : d);
                if (a < b) for (c = Math.min(c, d); b < c; ) b in this ? this[a++] = this[b++] : (delete this[a++], 
                b++); else for (c = Math.min(c, d + b - a), a += c - b; c > b; ) --c in this ? this[--a] = this[c] : delete this[a];
                return this;
            };
            $jscomp.array.copyWithin$install = function() {
                $jscomp.array.installHelper_("copyWithin", $jscomp.array.copyWithin);
            };
            $jscomp.array.fill = function(a, b, c) {
                var d = this.length || 0;
                0 > b && (b = Math.max(0, d + b));
                if (null == c || c > d) c = d;
                c = Number(c);
                0 > c && (c = Math.max(0, d + c));
                for (b = Number(b || 0); b < c; b++) this[b] = a;
                return this;
            };
            $jscomp.array.fill$install = function() {
                $jscomp.array.installHelper_("fill", $jscomp.array.fill);
            };
            $jscomp.array.find = function(a, b) {
                return $jscomp.findInternal(this, a, b).v;
            };
            $jscomp.array.find$install = function() {
                $jscomp.array.installHelper_("find", $jscomp.array.find);
            };
            $jscomp.array.findIndex = function(a, b) {
                return $jscomp.findInternal(this, a, b).i;
            };
            $jscomp.array.findIndex$install = function() {
                $jscomp.array.installHelper_("findIndex", $jscomp.array.findIndex);
            };
            $jscomp.ASSUME_NO_NATIVE_MAP = !1;
            $jscomp.Map$isConformant = function() {
                if ($jscomp.ASSUME_NO_NATIVE_MAP) return !1;
                var a = $jscomp.global.Map;
                if (!a || !a.prototype.entries || "function" != typeof Object.seal) return !1;
                try {
                    var b = Object.seal({
                        x: 4
                    }), c = new a($jscomp.makeIterator([ [ b, "s" ] ]));
                    if ("s" != c.get(b) || 1 != c.size || c.get({
                        x: 4
                    }) || c.set({
                        x: 4
                    }, "t") != c || 2 != c.size) return !1;
                    var d = c.entries(), e = d.next();
                    if (e.done || e.value[0] != b || "s" != e.value[1]) return !1;
                    e = d.next();
                    return e.done || 4 != e.value[0].x || "t" != e.value[1] || !d.next().done ? !1 : !0;
                } catch (f) {
                    return !1;
                }
            };
            $jscomp.Map = function(a) {
                this.data_ = {};
                this.head_ = $jscomp.Map.createHead();
                this.size = 0;
                if (a) {
                    a = $jscomp.makeIterator(a);
                    for (var b; !(b = a.next()).done; ) b = b.value, this.set(b[0], b[1]);
                }
            };
            $jscomp.Map.prototype.set = function(a, b) {
                var c = $jscomp.Map.maybeGetEntry(this, a);
                c.list || (c.list = this.data_[c.id] = []);
                c.entry ? c.entry.value = b : (c.entry = {
                    next: this.head_,
                    previous: this.head_.previous,
                    head: this.head_,
                    key: a,
                    value: b
                }, c.list.push(c.entry), this.head_.previous.next = c.entry, this.head_.previous = c.entry, 
                this.size++);
                return this;
            };
            $jscomp.Map.prototype["delete"] = function(a) {
                a = $jscomp.Map.maybeGetEntry(this, a);
                return a.entry && a.list ? (a.list.splice(a.index, 1), a.list.length || delete this.data_[a.id], 
                a.entry.previous.next = a.entry.next, a.entry.next.previous = a.entry.previous, 
                a.entry.head = null, this.size--, !0) : !1;
            };
            $jscomp.Map.prototype.clear = function() {
                this.data_ = {};
                this.head_ = this.head_.previous = $jscomp.Map.createHead();
                this.size = 0;
            };
            $jscomp.Map.prototype.has = function(a) {
                return !!$jscomp.Map.maybeGetEntry(this, a).entry;
            };
            $jscomp.Map.prototype.get = function(a) {
                return (a = $jscomp.Map.maybeGetEntry(this, a).entry) && a.value;
            };
            $jscomp.Map.prototype.entries = function() {
                return $jscomp.Map.makeIterator_(this, function(a) {
                    return [ a.key, a.value ];
                });
            };
            $jscomp.Map.prototype.keys = function() {
                return $jscomp.Map.makeIterator_(this, function(a) {
                    return a.key;
                });
            };
            $jscomp.Map.prototype.values = function() {
                return $jscomp.Map.makeIterator_(this, function(a) {
                    return a.value;
                });
            };
            $jscomp.Map.prototype.forEach = function(a, b) {
                for (var c = this.entries(), d; !(d = c.next()).done; ) d = d.value, a.call(b, d[1], d[0], this);
            };
            $jscomp.Map.maybeGetEntry = function(a, b) {
                var c = $jscomp.Map.getId(b), d = a.data_[c];
                if (d && Object.prototype.hasOwnProperty.call(a.data_, c)) for (var e = 0; e < d.length; e++) {
                    var f = d[e];
                    if (b !== b && f.key !== f.key || b === f.key) return {
                        id: c,
                        list: d,
                        index: e,
                        entry: f
                    };
                }
                return {
                    id: c,
                    list: d,
                    index: -1,
                    entry: void 0
                };
            };
            $jscomp.Map.makeIterator_ = function(a, b) {
                var c = a.head_, d = {
                    next: function() {
                        if (c) {
                            for (;c.head != a.head_; ) c = c.previous;
                            for (;c.next != c.head; ) return c = c.next, {
                                done: !1,
                                value: b(c)
                            };
                            c = null;
                        }
                        return {
                            done: !0,
                            value: void 0
                        };
                    }
                };
                $jscomp.initSymbol();
                $jscomp.initSymbolIterator();
                d[Symbol.iterator] = function() {
                    return d;
                };
                return d;
            };
            $jscomp.Map.mapIndex_ = 0;
            $jscomp.Map.createHead = function() {
                var a = {};
                return a.previous = a.next = a.head = a;
            };
            $jscomp.Map.getId = function(a) {
                if (!(a instanceof Object)) return "p_" + a;
                if (!($jscomp.Map.idKey in a)) try {
                    $jscomp.Map.defineProperty(a, $jscomp.Map.idKey, {
                        value: ++$jscomp.Map.mapIndex_
                    });
                } catch (b) {}
                return $jscomp.Map.idKey in a ? a[$jscomp.Map.idKey] : "o_ " + a;
            };
            $jscomp.Map.defineProperty = Object.defineProperty ? function(a, b, c) {
                Object.defineProperty(a, b, {
                    value: String(c)
                });
            } : function(a, b, c) {
                a[b] = String(c);
            };
            $jscomp.Map.Entry = function() {};
            $jscomp.Map$install = function() {
                $jscomp.initSymbol();
                $jscomp.initSymbolIterator();
                $jscomp.Map$isConformant() ? $jscomp.Map = $jscomp.global.Map : ($jscomp.initSymbol(), 
                $jscomp.initSymbolIterator(), $jscomp.Map.prototype[Symbol.iterator] = $jscomp.Map.prototype.entries, 
                $jscomp.initSymbol(), $jscomp.Map.idKey = Symbol("map-id-key"), $jscomp.Map$install = function() {});
            };
            $jscomp.math = $jscomp.math || {};
            $jscomp.math.clz32 = function(a) {
                a = Number(a) >>> 0;
                if (0 === a) return 32;
                var b = 0;
                0 === (a & 4294901760) && (a <<= 16, b += 16);
                0 === (a & 4278190080) && (a <<= 8, b += 8);
                0 === (a & 4026531840) && (a <<= 4, b += 4);
                0 === (a & 3221225472) && (a <<= 2, b += 2);
                0 === (a & 2147483648) && b++;
                return b;
            };
            $jscomp.math.imul = function(a, b) {
                a = Number(a);
                b = Number(b);
                var c = a & 65535, d = b & 65535;
                return c * d + ((a >>> 16 & 65535) * d + c * (b >>> 16 & 65535) << 16 >>> 0) | 0;
            };
            $jscomp.math.sign = function(a) {
                a = Number(a);
                return 0 === a || isNaN(a) ? a : 0 < a ? 1 : -1;
            };
            $jscomp.math.log10 = function(a) {
                return Math.log(a) / Math.LN10;
            };
            $jscomp.math.log2 = function(a) {
                return Math.log(a) / Math.LN2;
            };
            $jscomp.math.log1p = function(a) {
                a = Number(a);
                if (.25 > a && -.25 < a) {
                    for (var b = a, c = 1, d = a, e = 0, f = 1; e != d; ) b *= a, f *= -1, d = (e = d) + f * b / ++c;
                    return d;
                }
                return Math.log(1 + a);
            };
            $jscomp.math.expm1 = function(a) {
                a = Number(a);
                if (.25 > a && -.25 < a) {
                    for (var b = a, c = 1, d = a, e = 0; e != d; ) b *= a / ++c, d = (e = d) + b;
                    return d;
                }
                return Math.exp(a) - 1;
            };
            $jscomp.math.cosh = function(a) {
                a = Number(a);
                return (Math.exp(a) + Math.exp(-a)) / 2;
            };
            $jscomp.math.sinh = function(a) {
                a = Number(a);
                return 0 === a ? a : (Math.exp(a) - Math.exp(-a)) / 2;
            };
            $jscomp.math.tanh = function(a) {
                a = Number(a);
                if (0 === a) return a;
                var b = Math.exp(-2 * Math.abs(a)), b = (1 - b) / (1 + b);
                return 0 > a ? -b : b;
            };
            $jscomp.math.acosh = function(a) {
                a = Number(a);
                return Math.log(a + Math.sqrt(a * a - 1));
            };
            $jscomp.math.asinh = function(a) {
                a = Number(a);
                if (0 === a) return a;
                var b = Math.log(Math.abs(a) + Math.sqrt(a * a + 1));
                return 0 > a ? -b : b;
            };
            $jscomp.math.atanh = function(a) {
                a = Number(a);
                return ($jscomp.math.log1p(a) - $jscomp.math.log1p(-a)) / 2;
            };
            $jscomp.math.hypot = function(a, b, c) {
                a = Number(a);
                b = Number(b);
                var d, e, f, g = Math.max(Math.abs(a), Math.abs(b));
                for (d = 2; d < arguments.length; d++) g = Math.max(g, Math.abs(arguments[d]));
                if (1e100 < g || 1e-100 > g) {
                    a /= g;
                    b /= g;
                    f = a * a + b * b;
                    for (d = 2; d < arguments.length; d++) e = Number(arguments[d]) / g, f += e * e;
                    return Math.sqrt(f) * g;
                }
                f = a * a + b * b;
                for (d = 2; d < arguments.length; d++) e = Number(arguments[d]), f += e * e;
                return Math.sqrt(f);
            };
            $jscomp.math.trunc = function(a) {
                a = Number(a);
                if (isNaN(a) || Infinity === a || -Infinity === a || 0 === a) return a;
                var b = Math.floor(Math.abs(a));
                return 0 > a ? -b : b;
            };
            $jscomp.math.cbrt = function(a) {
                if (0 === a) return a;
                a = Number(a);
                var b = Math.pow(Math.abs(a), 1 / 3);
                return 0 > a ? -b : b;
            };
            $jscomp.number = $jscomp.number || {};
            $jscomp.number.isFinite = function(a) {
                return "number" !== typeof a ? !1 : !isNaN(a) && Infinity !== a && -Infinity !== a;
            };
            $jscomp.number.isInteger = function(a) {
                return $jscomp.number.isFinite(a) ? a === Math.floor(a) : !1;
            };
            $jscomp.number.isNaN = function(a) {
                return "number" === typeof a && isNaN(a);
            };
            $jscomp.number.isSafeInteger = function(a) {
                return $jscomp.number.isInteger(a) && Math.abs(a) <= $jscomp.number.MAX_SAFE_INTEGER;
            };
            $jscomp.number.EPSILON = function() {
                return Math.pow(2, -52);
            }();
            $jscomp.number.MAX_SAFE_INTEGER = function() {
                return 9007199254740991;
            }();
            $jscomp.number.MIN_SAFE_INTEGER = function() {
                return -9007199254740991;
            }();
            $jscomp.object = $jscomp.object || {};
            $jscomp.object.assign = function(a, b) {
                for (var c = 1; c < arguments.length; c++) {
                    var d = arguments[c];
                    if (d) for (var e in d) Object.prototype.hasOwnProperty.call(d, e) && (a[e] = d[e]);
                }
                return a;
            };
            $jscomp.object.is = function(a, b) {
                return a === b ? 0 !== a || 1 / a === 1 / b : a !== a && b !== b;
            };
            $jscomp.ASSUME_NO_NATIVE_SET = !1;
            $jscomp.Set$isConformant = function() {
                if ($jscomp.ASSUME_NO_NATIVE_SET) return !1;
                var a = $jscomp.global.Set;
                if (!a || !a.prototype.entries || "function" != typeof Object.seal) return !1;
                try {
                    var b = Object.seal({
                        x: 4
                    }), c = new a($jscomp.makeIterator([ b ]));
                    if (!c.has(b) || 1 != c.size || c.add(b) != c || 1 != c.size || c.add({
                        x: 4
                    }) != c || 2 != c.size) return !1;
                    var d = c.entries(), e = d.next();
                    if (e.done || e.value[0] != b || e.value[1] != b) return !1;
                    e = d.next();
                    return e.done || e.value[0] == b || 4 != e.value[0].x || e.value[1] != e.value[0] ? !1 : d.next().done;
                } catch (f) {
                    return !1;
                }
            };
            $jscomp.Set = function(a) {
                this.map_ = new $jscomp.Map();
                if (a) {
                    a = $jscomp.makeIterator(a);
                    for (var b; !(b = a.next()).done; ) this.add(b.value);
                }
                this.size = this.map_.size;
            };
            $jscomp.Set.prototype.add = function(a) {
                this.map_.set(a, a);
                this.size = this.map_.size;
                return this;
            };
            $jscomp.Set.prototype["delete"] = function(a) {
                a = this.map_["delete"](a);
                this.size = this.map_.size;
                return a;
            };
            $jscomp.Set.prototype.clear = function() {
                this.map_.clear();
                this.size = 0;
            };
            $jscomp.Set.prototype.has = function(a) {
                return this.map_.has(a);
            };
            $jscomp.Set.prototype.entries = function() {
                return this.map_.entries();
            };
            $jscomp.Set.prototype.values = function() {
                return this.map_.values();
            };
            $jscomp.Set.prototype.forEach = function(a, b) {
                var c = this;
                this.map_.forEach(function(d) {
                    return a.call(b, d, d, c);
                });
            };
            $jscomp.Set$install = function() {
                $jscomp.Map$install();
                $jscomp.Set$isConformant() ? $jscomp.Set = $jscomp.global.Set : ($jscomp.initSymbol(), 
                $jscomp.initSymbolIterator(), $jscomp.Set.prototype[Symbol.iterator] = $jscomp.Set.prototype.values, 
                $jscomp.Set$install = function() {});
            };
            $jscomp.string = $jscomp.string || {};
            $jscomp.checkStringArgs = function(a, b, c) {
                if (null == a) throw new TypeError("The 'this' value for String.prototype." + c + " must not be null or undefined");
                if (b instanceof RegExp) throw new TypeError("First argument to String.prototype." + c + " must not be a regular expression");
                return a + "";
            };
            $jscomp.string.fromCodePoint = function(a) {
                for (var b = "", c = 0; c < arguments.length; c++) {
                    var d = Number(arguments[c]);
                    if (0 > d || 1114111 < d || d !== Math.floor(d)) throw new RangeError("invalid_code_point " + d);
                    65535 >= d ? b += String.fromCharCode(d) : (d -= 65536, b += String.fromCharCode(d >>> 10 & 1023 | 55296), 
                    b += String.fromCharCode(d & 1023 | 56320));
                }
                return b;
            };
            $jscomp.string.repeat = function(a) {
                var b = $jscomp.checkStringArgs(this, null, "repeat");
                if (0 > a || 1342177279 < a) throw new RangeError("Invalid count value");
                a |= 0;
                for (var c = ""; a; ) if (a & 1 && (c += b), a >>>= 1) b += b;
                return c;
            };
            $jscomp.string.repeat$install = function() {
                String.prototype.repeat || (String.prototype.repeat = $jscomp.string.repeat);
            };
            $jscomp.string.codePointAt = function(a) {
                var b = $jscomp.checkStringArgs(this, null, "codePointAt"), c = b.length;
                a = Number(a) || 0;
                if (0 <= a && a < c) {
                    a |= 0;
                    var d = b.charCodeAt(a);
                    if (55296 > d || 56319 < d || a + 1 === c) return d;
                    a = b.charCodeAt(a + 1);
                    return 56320 > a || 57343 < a ? d : 1024 * (d - 55296) + a + 9216;
                }
            };
            $jscomp.string.codePointAt$install = function() {
                String.prototype.codePointAt || (String.prototype.codePointAt = $jscomp.string.codePointAt);
            };
            $jscomp.string.includes = function(a, b) {
                return -1 !== $jscomp.checkStringArgs(this, a, "includes").indexOf(a, b || 0);
            };
            $jscomp.string.includes$install = function() {
                String.prototype.includes || (String.prototype.includes = $jscomp.string.includes);
            };
            $jscomp.string.startsWith = function(a, b) {
                var c = $jscomp.checkStringArgs(this, a, "startsWith");
                a += "";
                for (var d = c.length, e = a.length, f = Math.max(0, Math.min(b | 0, c.length)), g = 0; g < e && f < d; ) if (c[f++] != a[g++]) return !1;
                return g >= e;
            };
            $jscomp.string.startsWith$install = function() {
                String.prototype.startsWith || (String.prototype.startsWith = $jscomp.string.startsWith);
            };
            $jscomp.string.endsWith = function(a, b) {
                var c = $jscomp.checkStringArgs(this, a, "endsWith");
                a += "";
                void 0 === b && (b = c.length);
                for (var d = Math.max(0, Math.min(b | 0, c.length)), e = a.length; 0 < e && 0 < d; ) if (c[--d] != a[--e]) return !1;
                return 0 >= e;
            };
            $jscomp.string.endsWith$install = function() {
                String.prototype.endsWith || (String.prototype.endsWith = $jscomp.string.endsWith);
            };
            var COMPILED = !0, goog = goog || {};
            goog.global = this;
            goog.isDef = function(a) {
                return void 0 !== a;
            };
            goog.exportPath_ = function(a, b, c) {
                a = a.split(".");
                c = c || goog.global;
                a[0] in c || !c.execScript || c.execScript("var " + a[0]);
                for (var d; a.length && (d = a.shift()); ) !a.length && goog.isDef(b) ? c[d] = b : c = c[d] ? c[d] : c[d] = {};
            };
            goog.define = function(a, b) {
                var c = b;
                COMPILED || (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, a) ? c = goog.global.CLOSURE_UNCOMPILED_DEFINES[a] : goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, a) && (c = goog.global.CLOSURE_DEFINES[a]));
                goog.exportPath_(a, c);
            };
            goog.DEBUG = !0;
            goog.LOCALE = "en";
            goog.TRUSTED_SITE = !0;
            goog.STRICT_MODE_COMPATIBLE = !1;
            goog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG;
            goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = !1;
            goog.provide = function(a) {
                if (!COMPILED && goog.isProvided_(a)) throw Error('Namespace "' + a + '" already declared.');
                goog.constructNamespace_(a);
            };
            goog.constructNamespace_ = function(a, b) {
                if (!COMPILED) {
                    delete goog.implicitNamespaces_[a];
                    for (var c = a; (c = c.substring(0, c.lastIndexOf("."))) && !goog.getObjectByName(c); ) goog.implicitNamespaces_[c] = !0;
                }
                goog.exportPath_(a, b);
            };
            goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
            goog.module = function(a) {
                if (!goog.isString(a) || !a || -1 == a.search(goog.VALID_MODULE_RE_)) throw Error("Invalid module identifier");
                if (!goog.isInModuleLoader_()) throw Error("Module " + a + " has been loaded incorrectly.");
                if (goog.moduleLoaderState_.moduleName) throw Error("goog.module may only be called once per module.");
                goog.moduleLoaderState_.moduleName = a;
                if (!COMPILED) {
                    if (goog.isProvided_(a)) throw Error('Namespace "' + a + '" already declared.');
                    delete goog.implicitNamespaces_[a];
                }
            };
            goog.module.get = function(a) {
                return goog.module.getInternal_(a);
            };
            goog.module.getInternal_ = function(a) {
                if (!COMPILED) return goog.isProvided_(a) ? a in goog.loadedModules_ ? goog.loadedModules_[a] : goog.getObjectByName(a) : null;
            };
            goog.moduleLoaderState_ = null;
            goog.isInModuleLoader_ = function() {
                return null != goog.moduleLoaderState_;
            };
            goog.module.declareLegacyNamespace = function() {
                if (!COMPILED && !goog.isInModuleLoader_()) throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");
                if (!COMPILED && !goog.moduleLoaderState_.moduleName) throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");
                goog.moduleLoaderState_.declareLegacyNamespace = !0;
            };
            goog.setTestOnly = function(a) {
                if (goog.DISALLOW_TEST_ONLY_CODE) throw a = a || "", Error("Importing test-only code into non-debug environment" + (a ? ": " + a : "."));
            };
            goog.forwardDeclare = function(a) {};
            COMPILED || (goog.isProvided_ = function(a) {
                return a in goog.loadedModules_ || !goog.implicitNamespaces_[a] && goog.isDefAndNotNull(goog.getObjectByName(a));
            }, goog.implicitNamespaces_ = {
                "goog.module": !0
            });
            goog.getObjectByName = function(a, b) {
                for (var c = a.split("."), d = b || goog.global, e; e = c.shift(); ) if (goog.isDefAndNotNull(d[e])) d = d[e]; else return null;
                return d;
            };
            goog.globalize = function(a, b) {
                var c = b || goog.global, d;
                for (d in a) c[d] = a[d];
            };
            goog.addDependency = function(a, b, c, d) {
                if (goog.DEPENDENCIES_ENABLED) {
                    var e;
                    a = a.replace(/\\/g, "/");
                    for (var f = goog.dependencies_, g = 0; e = b[g]; g++) f.nameToPath[e] = a, f.pathIsModule[a] = !!d;
                    for (d = 0; b = c[d]; d++) a in f.requires || (f.requires[a] = {}), f.requires[a][b] = !0;
                }
            };
            goog.ENABLE_DEBUG_LOADER = !0;
            goog.logToConsole_ = function(a) {
                goog.global.console && goog.global.console.error(a);
            };
            goog.require = function(a) {
                if (!COMPILED) {
                    goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_ && goog.maybeProcessDeferredDep_(a);
                    if (goog.isProvided_(a)) return goog.isInModuleLoader_() ? goog.module.getInternal_(a) : null;
                    if (goog.ENABLE_DEBUG_LOADER) {
                        var b = goog.getPathFromDeps_(a);
                        if (b) return goog.writeScripts_(b), null;
                    }
                    a = "goog.require could not find: " + a;
                    goog.logToConsole_(a);
                    throw Error(a);
                }
            };
            goog.basePath = "";
            goog.nullFunction = function() {};
            goog.abstractMethod = function() {
                throw Error("unimplemented abstract method");
            };
            goog.addSingletonGetter = function(a) {
                a.getInstance = function() {
                    if (a.instance_) return a.instance_;
                    goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);
                    return a.instance_ = new a();
                };
            };
            goog.instantiatedSingletons_ = [];
            goog.LOAD_MODULE_USING_EVAL = !0;
            goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
            goog.loadedModules_ = {};
            goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
            goog.DEPENDENCIES_ENABLED && (goog.dependencies_ = {
                pathIsModule: {},
                nameToPath: {},
                requires: {},
                visited: {},
                written: {},
                deferred: {}
            }, goog.inHtmlDocument_ = function() {
                var a = goog.global.document;
                return null != a && "write" in a;
            }, goog.findBasePath_ = function() {
                if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) goog.basePath = goog.global.CLOSURE_BASE_PATH; else if (goog.inHtmlDocument_()) for (var a = goog.global.document.getElementsByTagName("SCRIPT"), b = a.length - 1; 0 <= b; --b) {
                    var c = a[b].src, d = c.lastIndexOf("?"), d = -1 == d ? c.length : d;
                    if ("base.js" == c.substr(d - 7, 7)) {
                        goog.basePath = c.substr(0, d - 7);
                        break;
                    }
                }
            }, goog.importScript_ = function(a, b) {
                (goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_)(a, b) && (goog.dependencies_.written[a] = !0);
            }, goog.IS_OLD_IE_ = !(goog.global.atob || !goog.global.document || !goog.global.document.all), 
            goog.importModule_ = function(a) {
                goog.importScript_("", 'goog.retrieveAndExecModule_("' + a + '");') && (goog.dependencies_.written[a] = !0);
            }, goog.queuedModules_ = [], goog.wrapModule_ = function(a, b) {
                return goog.LOAD_MODULE_USING_EVAL && goog.isDef(goog.global.JSON) ? "goog.loadModule(" + goog.global.JSON.stringify(b + "\n//# sourceURL=" + a + "\n") + ");" : 'goog.loadModule(function(exports) {"use strict";' + b + "\n;return exports});\n//# sourceURL=" + a + "\n";
            }, goog.loadQueuedModules_ = function() {
                var a = goog.queuedModules_.length;
                if (0 < a) {
                    var b = goog.queuedModules_;
                    goog.queuedModules_ = [];
                    for (var c = 0; c < a; c++) goog.maybeProcessDeferredPath_(b[c]);
                }
            }, goog.maybeProcessDeferredDep_ = function(a) {
                goog.isDeferredModule_(a) && goog.allDepsAreAvailable_(a) && (a = goog.getPathFromDeps_(a), 
                goog.maybeProcessDeferredPath_(goog.basePath + a));
            }, goog.isDeferredModule_ = function(a) {
                return (a = goog.getPathFromDeps_(a)) && goog.dependencies_.pathIsModule[a] ? goog.basePath + a in goog.dependencies_.deferred : !1;
            }, goog.allDepsAreAvailable_ = function(a) {
                if ((a = goog.getPathFromDeps_(a)) && a in goog.dependencies_.requires) for (var b in goog.dependencies_.requires[a]) if (!goog.isProvided_(b) && !goog.isDeferredModule_(b)) return !1;
                return !0;
            }, goog.maybeProcessDeferredPath_ = function(a) {
                if (a in goog.dependencies_.deferred) {
                    var b = goog.dependencies_.deferred[a];
                    delete goog.dependencies_.deferred[a];
                    goog.globalEval(b);
                }
            }, goog.loadModuleFromUrl = function(a) {
                goog.retrieveAndExecModule_(a);
            }, goog.loadModule = function(a) {
                var b = goog.moduleLoaderState_;
                try {
                    goog.moduleLoaderState_ = {
                        moduleName: void 0,
                        declareLegacyNamespace: !1
                    };
                    var c;
                    if (goog.isFunction(a)) c = a.call(goog.global, {}); else if (goog.isString(a)) c = goog.loadModuleFromSource_.call(goog.global, a); else throw Error("Invalid module definition");
                    var d = goog.moduleLoaderState_.moduleName;
                    if (!goog.isString(d) || !d) throw Error('Invalid module name "' + d + '"');
                    goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(d, c) : goog.SEAL_MODULE_EXPORTS && Object.seal && Object.seal(c);
                    goog.loadedModules_[d] = c;
                } finally {
                    goog.moduleLoaderState_ = b;
                }
            }, goog.loadModuleFromSource_ = function(a) {
                eval(a);
                return {};
            }, goog.writeScriptSrcNode_ = function(a) {
                goog.global.document.write('<script type="text/javascript" src="' + a + '"><\/script>');
            }, goog.appendScriptSrcNode_ = function(a) {
                var b = goog.global.document, c = b.createElement("script");
                c.type = "text/javascript";
                c.src = a;
                c.defer = !1;
                c.async = !1;
                b.head.appendChild(c);
            }, goog.writeScriptTag_ = function(a, b) {
                if (goog.inHtmlDocument_()) {
                    var c = goog.global.document;
                    if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && "complete" == c.readyState) {
                        if (/\bdeps.js$/.test(a)) return !1;
                        throw Error('Cannot write "' + a + '" after document load');
                    }
                    var d = goog.IS_OLD_IE_;
                    void 0 === b ? d ? (d = " onreadystatechange='goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ", 
                    c.write('<script type="text/javascript" src="' + a + '"' + d + "><\/script>")) : goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING ? goog.appendScriptSrcNode_(a) : goog.writeScriptSrcNode_(a) : c.write('<script type="text/javascript">' + b + "<\/script>");
                    return !0;
                }
                return !1;
            }, goog.lastNonModuleScriptIndex_ = 0, goog.onScriptLoad_ = function(a, b) {
                "complete" == a.readyState && goog.lastNonModuleScriptIndex_ == b && goog.loadQueuedModules_();
                return !0;
            }, goog.writeScripts_ = function(a) {
                function b(a) {
                    if (!(a in e.written || a in e.visited)) {
                        e.visited[a] = !0;
                        if (a in e.requires) for (var f in e.requires[a]) if (!goog.isProvided_(f)) if (f in e.nameToPath) b(e.nameToPath[f]); else throw Error("Undefined nameToPath for " + f);
                        a in d || (d[a] = !0, c.push(a));
                    }
                }
                var c = [], d = {}, e = goog.dependencies_;
                b(a);
                for (a = 0; a < c.length; a++) {
                    var f = c[a];
                    goog.dependencies_.written[f] = !0;
                }
                var g = goog.moduleLoaderState_;
                goog.moduleLoaderState_ = null;
                for (a = 0; a < c.length; a++) if (f = c[a]) e.pathIsModule[f] ? goog.importModule_(goog.basePath + f) : goog.importScript_(goog.basePath + f); else throw goog.moduleLoaderState_ = g, 
                Error("Undefined script input");
                goog.moduleLoaderState_ = g;
            }, goog.getPathFromDeps_ = function(a) {
                return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] : null;
            }, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + "deps.js"));
            goog.normalizePath_ = function(a) {
                a = a.split("/");
                for (var b = 0; b < a.length; ) "." == a[b] ? a.splice(b, 1) : b && ".." == a[b] && a[b - 1] && ".." != a[b - 1] ? a.splice(--b, 2) : b++;
                return a.join("/");
            };
            goog.loadFileSync_ = function(a) {
                if (goog.global.CLOSURE_LOAD_FILE_SYNC) return goog.global.CLOSURE_LOAD_FILE_SYNC(a);
                var b = new goog.global.XMLHttpRequest();
                b.open("get", a, !1);
                b.send();
                return b.responseText;
            };
            goog.retrieveAndExecModule_ = function(a) {
                if (!COMPILED) {
                    var b = a;
                    a = goog.normalizePath_(a);
                    var c = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_, d = goog.loadFileSync_(a);
                    if (null != d) d = goog.wrapModule_(a, d), goog.IS_OLD_IE_ ? (goog.dependencies_.deferred[b] = d, 
                    goog.queuedModules_.push(b)) : c(a, d); else throw Error("load of " + a + "failed");
                }
            };
            goog.typeOf = function(a) {
                var b = typeof a;
                if ("object" == b) if (a) {
                    if (a instanceof Array) return "array";
                    if (a instanceof Object) return b;
                    var c = Object.prototype.toString.call(a);
                    if ("[object Window]" == c) return "object";
                    if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
                    if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
                } else return "null"; else if ("function" == b && "undefined" == typeof a.call) return "object";
                return b;
            };
            goog.isNull = function(a) {
                return null === a;
            };
            goog.isDefAndNotNull = function(a) {
                return null != a;
            };
            goog.isArray = function(a) {
                return "array" == goog.typeOf(a);
            };
            goog.isArrayLike = function(a) {
                var b = goog.typeOf(a);
                return "array" == b || "object" == b && "number" == typeof a.length;
            };
            goog.isDateLike = function(a) {
                return goog.isObject(a) && "function" == typeof a.getFullYear;
            };
            goog.isString = function(a) {
                return "string" == typeof a;
            };
            goog.isBoolean = function(a) {
                return "boolean" == typeof a;
            };
            goog.isNumber = function(a) {
                return "number" == typeof a;
            };
            goog.isFunction = function(a) {
                return "function" == goog.typeOf(a);
            };
            goog.isObject = function(a) {
                var b = typeof a;
                return "object" == b && null != a || "function" == b;
            };
            goog.getUid = function(a) {
                return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_);
            };
            goog.hasUid = function(a) {
                return !!a[goog.UID_PROPERTY_];
            };
            goog.removeUid = function(a) {
                null !== a && "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);
                try {
                    delete a[goog.UID_PROPERTY_];
                } catch (b) {}
            };
            goog.UID_PROPERTY_ = "closure_uid_" + (1e9 * Math.random() >>> 0);
            goog.uidCounter_ = 0;
            goog.getHashCode = goog.getUid;
            goog.removeHashCode = goog.removeUid;
            goog.cloneObject = function(a) {
                var b = goog.typeOf(a);
                if ("object" == b || "array" == b) {
                    if (a.clone) return a.clone();
                    var b = "array" == b ? [] : {}, c;
                    for (c in a) b[c] = goog.cloneObject(a[c]);
                    return b;
                }
                return a;
            };
            goog.bindNative_ = function(a, b, c) {
                return a.call.apply(a.bind, arguments);
            };
            goog.bindJs_ = function(a, b, c) {
                if (!a) throw Error();
                if (2 < arguments.length) {
                    var d = Array.prototype.slice.call(arguments, 2);
                    return function() {
                        var c = Array.prototype.slice.call(arguments);
                        Array.prototype.unshift.apply(c, d);
                        return a.apply(b, c);
                    };
                }
                return function() {
                    return a.apply(b, arguments);
                };
            };
            goog.bind = function(a, b, c) {
                Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
                return goog.bind.apply(null, arguments);
            };
            goog.partial = function(a, b) {
                var c = Array.prototype.slice.call(arguments, 1);
                return function() {
                    var b = c.slice();
                    b.push.apply(b, arguments);
                    return a.apply(this, b);
                };
            };
            goog.mixin = function(a, b) {
                for (var c in b) a[c] = b[c];
            };
            goog.now = goog.TRUSTED_SITE && Date.now || function() {
                return +new Date();
            };
            goog.globalEval = function(a) {
                if (goog.global.execScript) goog.global.execScript(a, "JavaScript"); else if (goog.global.eval) {
                    if (null == goog.evalWorksForGlobals_) if (goog.global.eval("var _evalTest_ = 1;"), 
                    "undefined" != typeof goog.global._evalTest_) {
                        try {
                            delete goog.global._evalTest_;
                        } catch (d) {}
                        goog.evalWorksForGlobals_ = !0;
                    } else goog.evalWorksForGlobals_ = !1;
                    if (goog.evalWorksForGlobals_) goog.global.eval(a); else {
                        var b = goog.global.document, c = b.createElement("SCRIPT");
                        c.type = "text/javascript";
                        c.defer = !1;
                        c.appendChild(b.createTextNode(a));
                        b.body.appendChild(c);
                        b.body.removeChild(c);
                    }
                } else throw Error("goog.globalEval not available");
            };
            goog.evalWorksForGlobals_ = null;
            goog.getCssName = function(a, b) {
                var c = function(a) {
                    return goog.cssNameMapping_[a] || a;
                }, d = function(a) {
                    a = a.split("-");
                    for (var b = [], d = 0; d < a.length; d++) b.push(c(a[d]));
                    return b.join("-");
                }, d = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c : d : function(a) {
                    return a;
                };
                return b ? a + "-" + d(b) : d(a);
            };
            goog.setCssNameMapping = function(a, b) {
                goog.cssNameMapping_ = a;
                goog.cssNameMappingStyle_ = b;
            };
            !COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
            goog.getMsg = function(a, b) {
                b && (a = a.replace(/\{\$([^}]+)}/g, function(a, d) {
                    return null != b && d in b ? b[d] : a;
                }));
                return a;
            };
            goog.getMsgWithFallback = function(a, b) {
                return a;
            };
            goog.exportSymbol = function(a, b, c) {
                goog.exportPath_(a, b, c);
            };
            goog.exportProperty = function(a, b, c) {
                a[b] = c;
            };
            goog.inherits = function(a, b) {
                function c() {}
                c.prototype = b.prototype;
                a.superClass_ = b.prototype;
                a.prototype = new c();
                a.prototype.constructor = a;
                a.base = function(a, c, f) {
                    for (var g = Array(arguments.length - 2), h = 2; h < arguments.length; h++) g[h - 2] = arguments[h];
                    return b.prototype[c].apply(a, g);
                };
            };
            goog.base = function(a, b, c) {
                var d = arguments.callee.caller;
                if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !d) throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");
                if (d.superClass_) {
                    for (var e = Array(arguments.length - 1), f = 1; f < arguments.length; f++) e[f - 1] = arguments[f];
                    return d.superClass_.constructor.apply(a, e);
                }
                e = Array(arguments.length - 2);
                for (f = 2; f < arguments.length; f++) e[f - 2] = arguments[f];
                for (var f = !1, g = a.constructor; g; g = g.superClass_ && g.superClass_.constructor) if (g.prototype[b] === d) f = !0; else if (f) return g.prototype[b].apply(a, e);
                if (a[b] === d) return a.constructor.prototype[b].apply(a, e);
                throw Error("goog.base called from a method of one name to a method of a different name");
            };
            goog.scope = function(a) {
                a.call(goog.global);
            };
            COMPILED || (goog.global.COMPILED = COMPILED);
            goog.defineClass = function(a, b) {
                var c = b.constructor, d = b.statics;
                c && c != Object.prototype.constructor || (c = function() {
                    throw Error("cannot instantiate an interface (no constructor defined).");
                });
                c = goog.defineClass.createSealingConstructor_(c, a);
                a && goog.inherits(c, a);
                delete b.constructor;
                delete b.statics;
                goog.defineClass.applyProperties_(c.prototype, b);
                null != d && (d instanceof Function ? d(c) : goog.defineClass.applyProperties_(c, d));
                return c;
            };
            goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;
            goog.defineClass.createSealingConstructor_ = function(a, b) {
                if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
                    if (b && b.prototype && b.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) return a;
                    var c = function() {
                        var b = a.apply(this, arguments) || this;
                        b[goog.UID_PROPERTY_] = b[goog.UID_PROPERTY_];
                        this.constructor === c && Object.seal(b);
                        return b;
                    };
                    return c;
                }
                return a;
            };
            goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
            goog.defineClass.applyProperties_ = function(a, b) {
                for (var c in b) Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
                for (var d = 0; d < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; d++) c = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d], 
                Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
            };
            goog.tagUnsealableClass = function(a) {
                !COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES && (a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = !0);
            };
            goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
            goog.dom = {};
            goog.dom.NodeType = {
                ELEMENT: 1,
                ATTRIBUTE: 2,
                TEXT: 3,
                CDATA_SECTION: 4,
                ENTITY_REFERENCE: 5,
                ENTITY: 6,
                PROCESSING_INSTRUCTION: 7,
                COMMENT: 8,
                DOCUMENT: 9,
                DOCUMENT_TYPE: 10,
                DOCUMENT_FRAGMENT: 11,
                NOTATION: 12
            };
            goog.debug = {};
            goog.debug.Error = function(a) {
                if (Error.captureStackTrace) Error.captureStackTrace(this, goog.debug.Error); else {
                    var b = Error().stack;
                    b && (this.stack = b);
                }
                a && (this.message = String(a));
                this.reportErrorToServer = !0;
            };
            goog.inherits(goog.debug.Error, Error);
            goog.debug.Error.prototype.name = "CustomError";
            goog.string = {};
            goog.string.DETECT_DOUBLE_ESCAPING = !1;
            goog.string.FORCE_NON_DOM_HTML_UNESCAPING = !1;
            goog.string.Unicode = {
                NBSP: " "
            };
            goog.string.startsWith = function(a, b) {
                return 0 == a.lastIndexOf(b, 0);
            };
            goog.string.endsWith = function(a, b) {
                var c = a.length - b.length;
                return 0 <= c && a.indexOf(b, c) == c;
            };
            goog.string.caseInsensitiveStartsWith = function(a, b) {
                return 0 == goog.string.caseInsensitiveCompare(b, a.substr(0, b.length));
            };
            goog.string.caseInsensitiveEndsWith = function(a, b) {
                return 0 == goog.string.caseInsensitiveCompare(b, a.substr(a.length - b.length, b.length));
            };
            goog.string.caseInsensitiveEquals = function(a, b) {
                return a.toLowerCase() == b.toLowerCase();
            };
            goog.string.subs = function(a, b) {
                for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length; ) d += c.shift() + e.shift();
                return d + c.join("%s");
            };
            goog.string.collapseWhitespace = function(a) {
                return a.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
            };
            goog.string.isEmptyOrWhitespace = function(a) {
                return /^[\s\xa0]*$/.test(a);
            };
            goog.string.isEmptyString = function(a) {
                return 0 == a.length;
            };
            goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
            goog.string.isEmptyOrWhitespaceSafe = function(a) {
                return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a));
            };
            goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
            goog.string.isBreakingWhitespace = function(a) {
                return !/[^\t\n\r ]/.test(a);
            };
            goog.string.isAlpha = function(a) {
                return !/[^a-zA-Z]/.test(a);
            };
            goog.string.isNumeric = function(a) {
                return !/[^0-9]/.test(a);
            };
            goog.string.isAlphaNumeric = function(a) {
                return !/[^a-zA-Z0-9]/.test(a);
            };
            goog.string.isSpace = function(a) {
                return " " == a;
            };
            goog.string.isUnicodeChar = function(a) {
                return 1 == a.length && " " <= a && "~" >= a || "" <= a && "�" >= a;
            };
            goog.string.stripNewlines = function(a) {
                return a.replace(/(\r\n|\r|\n)+/g, " ");
            };
            goog.string.canonicalizeNewlines = function(a) {
                return a.replace(/(\r\n|\r|\n)/g, "\n");
            };
            goog.string.normalizeWhitespace = function(a) {
                return a.replace(/\xa0|\s/g, " ");
            };
            goog.string.normalizeSpaces = function(a) {
                return a.replace(/\xa0|[ \t]+/g, " ");
            };
            goog.string.collapseBreakingSpaces = function(a) {
                return a.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
            };
            goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(a) {
                return a.trim();
            } : function(a) {
                return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
            };
            goog.string.trimLeft = function(a) {
                return a.replace(/^[\s\xa0]+/, "");
            };
            goog.string.trimRight = function(a) {
                return a.replace(/[\s\xa0]+$/, "");
            };
            goog.string.caseInsensitiveCompare = function(a, b) {
                var c = String(a).toLowerCase(), d = String(b).toLowerCase();
                return c < d ? -1 : c == d ? 0 : 1;
            };
            goog.string.numberAwareCompare_ = function(a, b, c) {
                if (a == b) return 0;
                if (!a) return -1;
                if (!b) return 1;
                for (var d = a.toLowerCase().match(c), e = b.toLowerCase().match(c), f = Math.min(d.length, e.length), g = 0; g < f; g++) {
                    c = d[g];
                    var h = e[g];
                    if (c != h) return a = parseInt(c, 10), !isNaN(a) && (b = parseInt(h, 10), !isNaN(b) && a - b) ? a - b : c < h ? -1 : 1;
                }
                return d.length != e.length ? d.length - e.length : a < b ? -1 : 1;
            };
            goog.string.intAwareCompare = function(a, b) {
                return goog.string.numberAwareCompare_(a, b, /\d+|\D+/g);
            };
            goog.string.floatAwareCompare = function(a, b) {
                return goog.string.numberAwareCompare_(a, b, /\d+|\.\d+|\D+/g);
            };
            goog.string.numerateCompare = goog.string.floatAwareCompare;
            goog.string.urlEncode = function(a) {
                return encodeURIComponent(String(a));
            };
            goog.string.urlDecode = function(a) {
                return decodeURIComponent(a.replace(/\+/g, " "));
            };
            goog.string.newLineToBr = function(a, b) {
                return a.replace(/(\r\n|\r|\n)/g, b ? "<br />" : "<br>");
            };
            goog.string.htmlEscape = function(a, b) {
                if (b) a = a.replace(goog.string.AMP_RE_, "&amp;").replace(goog.string.LT_RE_, "&lt;").replace(goog.string.GT_RE_, "&gt;").replace(goog.string.QUOT_RE_, "&quot;").replace(goog.string.SINGLE_QUOTE_RE_, "&#39;").replace(goog.string.NULL_RE_, "&#0;"), 
                goog.string.DETECT_DOUBLE_ESCAPING && (a = a.replace(goog.string.E_RE_, "&#101;")); else {
                    if (!goog.string.ALL_RE_.test(a)) return a;
                    -1 != a.indexOf("&") && (a = a.replace(goog.string.AMP_RE_, "&amp;"));
                    -1 != a.indexOf("<") && (a = a.replace(goog.string.LT_RE_, "&lt;"));
                    -1 != a.indexOf(">") && (a = a.replace(goog.string.GT_RE_, "&gt;"));
                    -1 != a.indexOf('"') && (a = a.replace(goog.string.QUOT_RE_, "&quot;"));
                    -1 != a.indexOf("'") && (a = a.replace(goog.string.SINGLE_QUOTE_RE_, "&#39;"));
                    -1 != a.indexOf("\0") && (a = a.replace(goog.string.NULL_RE_, "&#0;"));
                    goog.string.DETECT_DOUBLE_ESCAPING && -1 != a.indexOf("e") && (a = a.replace(goog.string.E_RE_, "&#101;"));
                }
                return a;
            };
            goog.string.AMP_RE_ = /&/g;
            goog.string.LT_RE_ = /</g;
            goog.string.GT_RE_ = />/g;
            goog.string.QUOT_RE_ = /"/g;
            goog.string.SINGLE_QUOTE_RE_ = /'/g;
            goog.string.NULL_RE_ = /\x00/g;
            goog.string.E_RE_ = /e/g;
            goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
            goog.string.unescapeEntities = function(a) {
                return goog.string.contains(a, "&") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(a) : goog.string.unescapePureXmlEntities_(a) : a;
            };
            goog.string.unescapeEntitiesWithDocument = function(a, b) {
                return goog.string.contains(a, "&") ? goog.string.unescapeEntitiesUsingDom_(a, b) : a;
            };
            goog.string.unescapeEntitiesUsingDom_ = function(a, b) {
                var c = {
                    "&amp;": "&",
                    "&lt;": "<",
                    "&gt;": ">",
                    "&quot;": '"'
                }, d;
                d = b ? b.createElement("div") : goog.global.document.createElement("div");
                return a.replace(goog.string.HTML_ENTITY_PATTERN_, function(a, b) {
                    var g = c[a];
                    if (g) return g;
                    if ("#" == b.charAt(0)) {
                        var h = Number("0" + b.substr(1));
                        isNaN(h) || (g = String.fromCharCode(h));
                    }
                    g || (d.innerHTML = a + " ", g = d.firstChild.nodeValue.slice(0, -1));
                    return c[a] = g;
                });
            };
            goog.string.unescapePureXmlEntities_ = function(a) {
                return a.replace(/&([^;]+);/g, function(a, c) {
                    switch (c) {
                      case "amp":
                        return "&";

                      case "lt":
                        return "<";

                      case "gt":
                        return ">";

                      case "quot":
                        return '"';

                      default:
                        if ("#" == c.charAt(0)) {
                            var d = Number("0" + c.substr(1));
                            if (!isNaN(d)) return String.fromCharCode(d);
                        }
                        return a;
                    }
                });
            };
            goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
            goog.string.whitespaceEscape = function(a, b) {
                return goog.string.newLineToBr(a.replace(/  /g, " &#160;"), b);
            };
            goog.string.preserveSpaces = function(a) {
                return a.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
            };
            goog.string.stripQuotes = function(a, b) {
                for (var c = b.length, d = 0; d < c; d++) {
                    var e = 1 == c ? b : b.charAt(d);
                    if (a.charAt(0) == e && a.charAt(a.length - 1) == e) return a.substring(1, a.length - 1);
                }
                return a;
            };
            goog.string.truncate = function(a, b, c) {
                c && (a = goog.string.unescapeEntities(a));
                a.length > b && (a = a.substring(0, b - 3) + "...");
                c && (a = goog.string.htmlEscape(a));
                return a;
            };
            goog.string.truncateMiddle = function(a, b, c, d) {
                c && (a = goog.string.unescapeEntities(a));
                if (d && a.length > b) {
                    d > b && (d = b);
                    var e = a.length - d;
                    a = a.substring(0, b - d) + "..." + a.substring(e);
                } else a.length > b && (d = Math.floor(b / 2), e = a.length - d, a = a.substring(0, d + b % 2) + "..." + a.substring(e));
                c && (a = goog.string.htmlEscape(a));
                return a;
            };
            goog.string.specialEscapeChars_ = {
                "\0": "\\0",
                "\b": "\\b",
                "\f": "\\f",
                "\n": "\\n",
                "\r": "\\r",
                "\t": "\\t",
                "\v": "\\x0B",
                '"': '\\"',
                "\\": "\\\\",
                "<": "<"
            };
            goog.string.jsEscapeCache_ = {
                "'": "\\'"
            };
            goog.string.quote = function(a) {
                a = String(a);
                for (var b = [ '"' ], c = 0; c < a.length; c++) {
                    var d = a.charAt(c), e = d.charCodeAt(0);
                    b[c + 1] = goog.string.specialEscapeChars_[d] || (31 < e && 127 > e ? d : goog.string.escapeChar(d));
                }
                b.push('"');
                return b.join("");
            };
            goog.string.escapeString = function(a) {
                for (var b = [], c = 0; c < a.length; c++) b[c] = goog.string.escapeChar(a.charAt(c));
                return b.join("");
            };
            goog.string.escapeChar = function(a) {
                if (a in goog.string.jsEscapeCache_) return goog.string.jsEscapeCache_[a];
                if (a in goog.string.specialEscapeChars_) return goog.string.jsEscapeCache_[a] = goog.string.specialEscapeChars_[a];
                var b, c = a.charCodeAt(0);
                if (31 < c && 127 > c) b = a; else {
                    if (256 > c) {
                        if (b = "\\x", 16 > c || 256 < c) b += "0";
                    } else b = "\\u", 4096 > c && (b += "0");
                    b += c.toString(16).toUpperCase();
                }
                return goog.string.jsEscapeCache_[a] = b;
            };
            goog.string.contains = function(a, b) {
                return -1 != a.indexOf(b);
            };
            goog.string.caseInsensitiveContains = function(a, b) {
                return goog.string.contains(a.toLowerCase(), b.toLowerCase());
            };
            goog.string.countOf = function(a, b) {
                return a && b ? a.split(b).length - 1 : 0;
            };
            goog.string.removeAt = function(a, b, c) {
                var d = a;
                0 <= b && b < a.length && 0 < c && (d = a.substr(0, b) + a.substr(b + c, a.length - b - c));
                return d;
            };
            goog.string.remove = function(a, b) {
                var c = new RegExp(goog.string.regExpEscape(b), "");
                return a.replace(c, "");
            };
            goog.string.removeAll = function(a, b) {
                var c = new RegExp(goog.string.regExpEscape(b), "g");
                return a.replace(c, "");
            };
            goog.string.regExpEscape = function(a) {
                return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
            };
            goog.string.repeat = String.prototype.repeat ? function(a, b) {
                return a.repeat(b);
            } : function(a, b) {
                return Array(b + 1).join(a);
            };
            goog.string.padNumber = function(a, b, c) {
                a = goog.isDef(c) ? a.toFixed(c) : String(a);
                c = a.indexOf(".");
                -1 == c && (c = a.length);
                return goog.string.repeat("0", Math.max(0, b - c)) + a;
            };
            goog.string.makeSafe = function(a) {
                return null == a ? "" : String(a);
            };
            goog.string.buildString = function(a) {
                return Array.prototype.join.call(arguments, "");
            };
            goog.string.getRandomString = function() {
                return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
            };
            goog.string.compareVersions = function(a, b) {
                for (var c = 0, d = goog.string.trim(String(a)).split("."), e = goog.string.trim(String(b)).split("."), f = Math.max(d.length, e.length), g = 0; 0 == c && g < f; g++) {
                    var h = d[g] || "", k = e[g] || "", l = RegExp("(\\d*)(\\D*)", "g"), p = RegExp("(\\d*)(\\D*)", "g");
                    do {
                        var m = l.exec(h) || [ "", "", "" ], n = p.exec(k) || [ "", "", "" ];
                        if (0 == m[0].length && 0 == n[0].length) break;
                        var c = 0 == m[1].length ? 0 : parseInt(m[1], 10), q = 0 == n[1].length ? 0 : parseInt(n[1], 10), c = goog.string.compareElements_(c, q) || goog.string.compareElements_(0 == m[2].length, 0 == n[2].length) || goog.string.compareElements_(m[2], n[2]);
                    } while (0 == c);
                }
                return c;
            };
            goog.string.compareElements_ = function(a, b) {
                return a < b ? -1 : a > b ? 1 : 0;
            };
            goog.string.hashCode = function(a) {
                for (var b = 0, c = 0; c < a.length; ++c) b = 31 * b + a.charCodeAt(c) >>> 0;
                return b;
            };
            goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;
            goog.string.createUniqueString = function() {
                return "goog_" + goog.string.uniqueStringCounter_++;
            };
            goog.string.toNumber = function(a) {
                var b = Number(a);
                return 0 == b && goog.string.isEmptyOrWhitespace(a) ? NaN : b;
            };
            goog.string.isLowerCamelCase = function(a) {
                return /^[a-z]+([A-Z][a-z]*)*$/.test(a);
            };
            goog.string.isUpperCamelCase = function(a) {
                return /^([A-Z][a-z]*)+$/.test(a);
            };
            goog.string.toCamelCase = function(a) {
                return String(a).replace(/\-([a-z])/g, function(a, c) {
                    return c.toUpperCase();
                });
            };
            goog.string.toSelectorCase = function(a) {
                return String(a).replace(/([A-Z])/g, "-$1").toLowerCase();
            };
            goog.string.toTitleCase = function(a, b) {
                var c = goog.isString(b) ? goog.string.regExpEscape(b) : "\\s";
                return a.replace(new RegExp("(^" + (c ? "|[" + c + "]+" : "") + ")([a-z])", "g"), function(a, b, c) {
                    return b + c.toUpperCase();
                });
            };
            goog.string.capitalize = function(a) {
                return String(a.charAt(0)).toUpperCase() + String(a.substr(1)).toLowerCase();
            };
            goog.string.parseInt = function(a) {
                isFinite(a) && (a = String(a));
                return goog.isString(a) ? /^\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;
            };
            goog.string.splitLimit = function(a, b, c) {
                a = a.split(b);
                for (var d = []; 0 < c && a.length; ) d.push(a.shift()), c--;
                a.length && d.push(a.join(b));
                return d;
            };
            goog.string.editDistance = function(a, b) {
                var c = [], d = [];
                if (a == b) return 0;
                if (!a.length || !b.length) return Math.max(a.length, b.length);
                for (var e = 0; e < b.length + 1; e++) c[e] = e;
                for (e = 0; e < a.length; e++) {
                    d[0] = e + 1;
                    for (var f = 0; f < b.length; f++) d[f + 1] = Math.min(d[f] + 1, c[f + 1] + 1, c[f] + Number(a[e] != b[f]));
                    for (f = 0; f < c.length; f++) c[f] = d[f];
                }
                return d[b.length];
            };
            goog.asserts = {};
            goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
            goog.asserts.AssertionError = function(a, b) {
                b.unshift(a);
                goog.debug.Error.call(this, goog.string.subs.apply(null, b));
                b.shift();
                this.messagePattern = a;
            };
            goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
            goog.asserts.AssertionError.prototype.name = "AssertionError";
            goog.asserts.DEFAULT_ERROR_HANDLER = function(a) {
                throw a;
            };
            goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
            goog.asserts.doAssertFailure_ = function(a, b, c, d) {
                var e = "Assertion failed";
                if (c) var e = e + (": " + c), f = d; else a && (e += ": " + a, f = b);
                a = new goog.asserts.AssertionError("" + e, f || []);
                goog.asserts.errorHandler_(a);
            };
            goog.asserts.setErrorHandler = function(a) {
                goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = a);
            };
            goog.asserts.assert = function(a, b, c) {
                goog.asserts.ENABLE_ASSERTS && !a && goog.asserts.doAssertFailure_("", null, b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.fail = function(a, b) {
                goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1)));
            };
            goog.asserts.assertNumber = function(a, b, c) {
                goog.asserts.ENABLE_ASSERTS && !goog.isNumber(a) && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [ goog.typeOf(a), a ], b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.assertString = function(a, b, c) {
                goog.asserts.ENABLE_ASSERTS && !goog.isString(a) && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [ goog.typeOf(a), a ], b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.assertFunction = function(a, b, c) {
                goog.asserts.ENABLE_ASSERTS && !goog.isFunction(a) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [ goog.typeOf(a), a ], b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.assertObject = function(a, b, c) {
                goog.asserts.ENABLE_ASSERTS && !goog.isObject(a) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [ goog.typeOf(a), a ], b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.assertArray = function(a, b, c) {
                goog.asserts.ENABLE_ASSERTS && !goog.isArray(a) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [ goog.typeOf(a), a ], b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.assertBoolean = function(a, b, c) {
                goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(a) && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [ goog.typeOf(a), a ], b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.assertElement = function(a, b, c) {
                !goog.asserts.ENABLE_ASSERTS || goog.isObject(a) && a.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [ goog.typeOf(a), a ], b, Array.prototype.slice.call(arguments, 2));
                return a;
            };
            goog.asserts.assertInstanceof = function(a, b, c, d) {
                !goog.asserts.ENABLE_ASSERTS || a instanceof b || goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [ goog.asserts.getType_(b), goog.asserts.getType_(a) ], c, Array.prototype.slice.call(arguments, 3));
                return a;
            };
            goog.asserts.assertObjectPrototypeIsIntact = function() {
                for (var a in Object.prototype) goog.asserts.fail(a + " should not be enumerable in Object.prototype.");
            };
            goog.asserts.getType_ = function(a) {
                return a instanceof Function ? a.displayName || a.name || "unknown type name" : a instanceof Object ? a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a) : null === a ? "null" : typeof a;
            };
            var jspb = {
                Map: function(a, b) {
                    this.arr_ = a;
                    this.valueCtor_ = b;
                    this.map_ = {};
                    this.arrClean = !0;
                    0 < this.arr_.length && this.loadFromArray_();
                }
            };
            jspb.Map.prototype.loadFromArray_ = function() {
                for (var a = 0; a < this.arr_.length; a++) {
                    var b = this.arr_[a], c = b[0];
                    this.map_[c.toString()] = new jspb.Map.Entry_(c, b[1]);
                }
                this.arrClean = !0;
            };
            jspb.Map.prototype.toArray = function() {
                if (this.arrClean) {
                    if (this.valueCtor_) {
                        var a = this.map_, b;
                        for (b in a) if (Object.prototype.hasOwnProperty.call(a, b)) {
                            var c = a[b].valueWrapper;
                            c && c.toArray();
                        }
                    }
                } else {
                    this.arr_.length = 0;
                    a = this.stringKeys_();
                    a.sort();
                    for (b = 0; b < a.length; b++) {
                        var d = this.map_[a[b]];
                        (c = d.valueWrapper) && c.toArray();
                        this.arr_.push([ d.key, d.value ]);
                    }
                    this.arrClean = !0;
                }
                return this.arr_;
            };
            jspb.Map.prototype.toObject = function(a, b) {
                for (var c = this.toArray(), d = [], e = 0; e < c.length; e++) {
                    var f = this.map_[c[e][0].toString()];
                    this.wrapEntry_(f);
                    var g = f.valueWrapper;
                    g ? (goog.asserts.assert(b), d.push([ f.key, b(a, g) ])) : d.push([ f.key, f.value ]);
                }
                return d;
            };
            jspb.Map.fromObject = function(a, b, c) {
                b = new jspb.Map([], b);
                for (var d = 0; d < a.length; d++) {
                    var e = a[d][0], f = c(a[d][1]);
                    b.set(e, f);
                }
                return b;
            };
            jspb.Map.ArrayIteratorIterable_ = function(a) {
                this.idx_ = 0;
                this.arr_ = a;
            };
            jspb.Map.ArrayIteratorIterable_.prototype.next = function() {
                return this.idx_ < this.arr_.length ? {
                    done: !1,
                    value: this.arr_[this.idx_++]
                } : {
                    done: !0,
                    value: void 0
                };
            };
            $jscomp.initSymbol();
            "undefined" != typeof Symbol && ($jscomp.initSymbol(), $jscomp.initSymbolIterator(), 
            jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator] = function() {
                return this;
            });
            jspb.Map.prototype.getLength = function() {
                return this.stringKeys_().length;
            };
            jspb.Map.prototype.clear = function() {
                this.map_ = {};
                this.arrClean = !1;
            };
            jspb.Map.prototype.del = function(a) {
                a = a.toString();
                var b = this.map_.hasOwnProperty(a);
                delete this.map_[a];
                this.arrClean = !1;
                return b;
            };
            jspb.Map.prototype.getEntryList = function() {
                var a = [], b = this.stringKeys_();
                b.sort();
                for (var c = 0; c < b.length; c++) {
                    var d = this.map_[b[c]];
                    a.push([ d.key, d.value ]);
                }
                return a;
            };
            jspb.Map.prototype.entries = function() {
                var a = [], b = this.stringKeys_();
                b.sort();
                for (var c = 0; c < b.length; c++) {
                    var d = this.map_[b[c]];
                    a.push([ d.key, this.wrapEntry_(d) ]);
                }
                return new jspb.Map.ArrayIteratorIterable_(a);
            };
            jspb.Map.prototype.keys = function() {
                var a = [], b = this.stringKeys_();
                b.sort();
                for (var c = 0; c < b.length; c++) a.push(this.map_[b[c]].key);
                return new jspb.Map.ArrayIteratorIterable_(a);
            };
            jspb.Map.prototype.values = function() {
                var a = [], b = this.stringKeys_();
                b.sort();
                for (var c = 0; c < b.length; c++) a.push(this.wrapEntry_(this.map_[b[c]]));
                return new jspb.Map.ArrayIteratorIterable_(a);
            };
            jspb.Map.prototype.forEach = function(a, b) {
                var c = this.stringKeys_();
                c.sort();
                for (var d = 0; d < c.length; d++) {
                    var e = this.map_[c[d]];
                    a.call(b, this.wrapEntry_(e), e.key, this);
                }
            };
            jspb.Map.prototype.set = function(a, b) {
                var c = new jspb.Map.Entry_(a);
                this.valueCtor_ ? (c.valueWrapper = b, c.value = b.toArray()) : c.value = b;
                this.map_[a.toString()] = c;
                this.arrClean = !1;
                return this;
            };
            jspb.Map.prototype.wrapEntry_ = function(a) {
                return this.valueCtor_ ? (a.valueWrapper || (a.valueWrapper = new this.valueCtor_(a.value)), 
                a.valueWrapper) : a.value;
            };
            jspb.Map.prototype.get = function(a) {
                if (a = this.map_[a.toString()]) return this.wrapEntry_(a);
            };
            jspb.Map.prototype.has = function(a) {
                return a.toString() in this.map_;
            };
            jspb.Map.prototype.serializeBinary = function(a, b, c, d, e) {
                var f = this.stringKeys_();
                f.sort();
                for (var g = 0; g < f.length; g++) {
                    var h = this.map_[f[g]];
                    b.beginSubMessage(a);
                    c.call(b, 1, h.key);
                    this.valueCtor_ ? d.call(b, 2, this.wrapEntry_(h), e) : d.call(b, 2, h.value);
                    b.endSubMessage();
                }
            };
            jspb.Map.deserializeBinary = function(a, b, c, d, e, f) {
                for (var g = void 0; b.nextField() && !b.isEndGroup(); ) {
                    var h = b.getFieldNumber();
                    1 == h ? f = c.call(b) : 2 == h && (a.valueCtor_ ? (goog.asserts.assert(e), g = new a.valueCtor_(), 
                    d.call(b, g, e)) : g = d.call(b));
                }
                goog.asserts.assert(void 0 != f);
                goog.asserts.assert(void 0 != g);
                a.set(f, g);
            };
            jspb.Map.prototype.stringKeys_ = function() {
                var a = this.map_, b = [], c;
                for (c in a) Object.prototype.hasOwnProperty.call(a, c) && b.push(c);
                return b;
            };
            jspb.Map.Entry_ = function(a, b) {
                this.key = a;
                this.value = b;
                this.valueWrapper = void 0;
            };
            goog.array = {};
            goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
            goog.array.ASSUME_NATIVE_FUNCTIONS = !1;
            goog.array.peek = function(a) {
                return a[a.length - 1];
            };
            goog.array.last = goog.array.peek;
            goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(a, b, c) {
                goog.asserts.assert(null != a.length);
                return Array.prototype.indexOf.call(a, b, c);
            } : function(a, b, c) {
                c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;
                if (goog.isString(a)) return goog.isString(b) && 1 == b.length ? a.indexOf(b, c) : -1;
                for (;c < a.length; c++) if (c in a && a[c] === b) return c;
                return -1;
            };
            goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(a, b, c) {
                goog.asserts.assert(null != a.length);
                return Array.prototype.lastIndexOf.call(a, b, null == c ? a.length - 1 : c);
            } : function(a, b, c) {
                c = null == c ? a.length - 1 : c;
                0 > c && (c = Math.max(0, a.length + c));
                if (goog.isString(a)) return goog.isString(b) && 1 == b.length ? a.lastIndexOf(b, c) : -1;
                for (;0 <= c; c--) if (c in a && a[c] === b) return c;
                return -1;
            };
            goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(a, b, c) {
                goog.asserts.assert(null != a.length);
                Array.prototype.forEach.call(a, b, c);
            } : function(a, b, c) {
                for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
            };
            goog.array.forEachRight = function(a, b, c) {
                for (var d = a.length, e = goog.isString(a) ? a.split("") : a, d = d - 1; 0 <= d; --d) d in e && b.call(c, e[d], d, a);
            };
            goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(a, b, c) {
                goog.asserts.assert(null != a.length);
                return Array.prototype.filter.call(a, b, c);
            } : function(a, b, c) {
                for (var d = a.length, e = [], f = 0, g = goog.isString(a) ? a.split("") : a, h = 0; h < d; h++) if (h in g) {
                    var k = g[h];
                    b.call(c, k, h, a) && (e[f++] = k);
                }
                return e;
            };
            goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(a, b, c) {
                goog.asserts.assert(null != a.length);
                return Array.prototype.map.call(a, b, c);
            } : function(a, b, c) {
                for (var d = a.length, e = Array(d), f = goog.isString(a) ? a.split("") : a, g = 0; g < d; g++) g in f && (e[g] = b.call(c, f[g], g, a));
                return e;
            };
            goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(a, b, c, d) {
                goog.asserts.assert(null != a.length);
                d && (b = goog.bind(b, d));
                return Array.prototype.reduce.call(a, b, c);
            } : function(a, b, c, d) {
                var e = c;
                goog.array.forEach(a, function(c, g) {
                    e = b.call(d, e, c, g, a);
                });
                return e;
            };
            goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(a, b, c, d) {
                goog.asserts.assert(null != a.length);
                goog.asserts.assert(null != b);
                d && (b = goog.bind(b, d));
                return Array.prototype.reduceRight.call(a, b, c);
            } : function(a, b, c, d) {
                var e = c;
                goog.array.forEachRight(a, function(c, g) {
                    e = b.call(d, e, c, g, a);
                });
                return e;
            };
            goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(a, b, c) {
                goog.asserts.assert(null != a.length);
                return Array.prototype.some.call(a, b, c);
            } : function(a, b, c) {
                for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && b.call(c, e[f], f, a)) return !0;
                return !1;
            };
            goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(a, b, c) {
                goog.asserts.assert(null != a.length);
                return Array.prototype.every.call(a, b, c);
            } : function(a, b, c) {
                for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && !b.call(c, e[f], f, a)) return !1;
                return !0;
            };
            goog.array.count = function(a, b, c) {
                var d = 0;
                goog.array.forEach(a, function(a, f, g) {
                    b.call(c, a, f, g) && ++d;
                }, c);
                return d;
            };
            goog.array.find = function(a, b, c) {
                b = goog.array.findIndex(a, b, c);
                return 0 > b ? null : goog.isString(a) ? a.charAt(b) : a[b];
            };
            goog.array.findIndex = function(a, b, c) {
                for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && b.call(c, e[f], f, a)) return f;
                return -1;
            };
            goog.array.findRight = function(a, b, c) {
                b = goog.array.findIndexRight(a, b, c);
                return 0 > b ? null : goog.isString(a) ? a.charAt(b) : a[b];
            };
            goog.array.findIndexRight = function(a, b, c) {
                for (var d = a.length, e = goog.isString(a) ? a.split("") : a, d = d - 1; 0 <= d; d--) if (d in e && b.call(c, e[d], d, a)) return d;
                return -1;
            };
            goog.array.contains = function(a, b) {
                return 0 <= goog.array.indexOf(a, b);
            };
            goog.array.isEmpty = function(a) {
                return 0 == a.length;
            };
            goog.array.clear = function(a) {
                if (!goog.isArray(a)) for (var b = a.length - 1; 0 <= b; b--) delete a[b];
                a.length = 0;
            };
            goog.array.insert = function(a, b) {
                goog.array.contains(a, b) || a.push(b);
            };
            goog.array.insertAt = function(a, b, c) {
                goog.array.splice(a, c, 0, b);
            };
            goog.array.insertArrayAt = function(a, b, c) {
                goog.partial(goog.array.splice, a, c, 0).apply(null, b);
            };
            goog.array.insertBefore = function(a, b, c) {
                var d;
                2 == arguments.length || 0 > (d = goog.array.indexOf(a, c)) ? a.push(b) : goog.array.insertAt(a, b, d);
            };
            goog.array.remove = function(a, b) {
                var c = goog.array.indexOf(a, b), d;
                (d = 0 <= c) && goog.array.removeAt(a, c);
                return d;
            };
            goog.array.removeAt = function(a, b) {
                goog.asserts.assert(null != a.length);
                return 1 == Array.prototype.splice.call(a, b, 1).length;
            };
            goog.array.removeIf = function(a, b, c) {
                b = goog.array.findIndex(a, b, c);
                return 0 <= b ? (goog.array.removeAt(a, b), !0) : !1;
            };
            goog.array.removeAllIf = function(a, b, c) {
                var d = 0;
                goog.array.forEachRight(a, function(e, f) {
                    b.call(c, e, f, a) && goog.array.removeAt(a, f) && d++;
                });
                return d;
            };
            goog.array.concat = function(a) {
                return Array.prototype.concat.apply(Array.prototype, arguments);
            };
            goog.array.join = function(a) {
                return Array.prototype.concat.apply(Array.prototype, arguments);
            };
            goog.array.toArray = function(a) {
                var b = a.length;
                if (0 < b) {
                    for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];
                    return c;
                }
                return [];
            };
            goog.array.clone = goog.array.toArray;
            goog.array.extend = function(a, b) {
                for (var c = 1; c < arguments.length; c++) {
                    var d = arguments[c];
                    if (goog.isArrayLike(d)) {
                        var e = a.length || 0, f = d.length || 0;
                        a.length = e + f;
                        for (var g = 0; g < f; g++) a[e + g] = d[g];
                    } else a.push(d);
                }
            };
            goog.array.splice = function(a, b, c, d) {
                goog.asserts.assert(null != a.length);
                return Array.prototype.splice.apply(a, goog.array.slice(arguments, 1));
            };
            goog.array.slice = function(a, b, c) {
                goog.asserts.assert(null != a.length);
                return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
            };
            goog.array.removeDuplicates = function(a, b, c) {
                b = b || a;
                var d = function(a) {
                    return goog.isObject(a) ? "o" + goog.getUid(a) : (typeof a).charAt(0) + a;
                };
                c = c || d;
                for (var d = {}, e = 0, f = 0; f < a.length; ) {
                    var g = a[f++], h = c(g);
                    Object.prototype.hasOwnProperty.call(d, h) || (d[h] = !0, b[e++] = g);
                }
                b.length = e;
            };
            goog.array.binarySearch = function(a, b, c) {
                return goog.array.binarySearch_(a, c || goog.array.defaultCompare, !1, b);
            };
            goog.array.binarySelect = function(a, b, c) {
                return goog.array.binarySearch_(a, b, !0, void 0, c);
            };
            goog.array.binarySearch_ = function(a, b, c, d, e) {
                for (var f = 0, g = a.length, h; f < g; ) {
                    var k = f + g >> 1, l;
                    l = c ? b.call(e, a[k], k, a) : b(d, a[k]);
                    0 < l ? f = k + 1 : (g = k, h = !l);
                }
                return h ? f : ~f;
            };
            goog.array.sort = function(a, b) {
                a.sort(b || goog.array.defaultCompare);
            };
            goog.array.stableSort = function(a, b) {
                for (var c = 0; c < a.length; c++) a[c] = {
                    index: c,
                    value: a[c]
                };
                var d = b || goog.array.defaultCompare;
                goog.array.sort(a, function(a, b) {
                    return d(a.value, b.value) || a.index - b.index;
                });
                for (c = 0; c < a.length; c++) a[c] = a[c].value;
            };
            goog.array.sortByKey = function(a, b, c) {
                var d = c || goog.array.defaultCompare;
                goog.array.sort(a, function(a, c) {
                    return d(b(a), b(c));
                });
            };
            goog.array.sortObjectsByKey = function(a, b, c) {
                goog.array.sortByKey(a, function(a) {
                    return a[b];
                }, c);
            };
            goog.array.isSorted = function(a, b, c) {
                b = b || goog.array.defaultCompare;
                for (var d = 1; d < a.length; d++) {
                    var e = b(a[d - 1], a[d]);
                    if (0 < e || 0 == e && c) return !1;
                }
                return !0;
            };
            goog.array.equals = function(a, b, c) {
                if (!goog.isArrayLike(a) || !goog.isArrayLike(b) || a.length != b.length) return !1;
                var d = a.length;
                c = c || goog.array.defaultCompareEquality;
                for (var e = 0; e < d; e++) if (!c(a[e], b[e])) return !1;
                return !0;
            };
            goog.array.compare3 = function(a, b, c) {
                c = c || goog.array.defaultCompare;
                for (var d = Math.min(a.length, b.length), e = 0; e < d; e++) {
                    var f = c(a[e], b[e]);
                    if (0 != f) return f;
                }
                return goog.array.defaultCompare(a.length, b.length);
            };
            goog.array.defaultCompare = function(a, b) {
                return a > b ? 1 : a < b ? -1 : 0;
            };
            goog.array.inverseDefaultCompare = function(a, b) {
                return -goog.array.defaultCompare(a, b);
            };
            goog.array.defaultCompareEquality = function(a, b) {
                return a === b;
            };
            goog.array.binaryInsert = function(a, b, c) {
                c = goog.array.binarySearch(a, b, c);
                return 0 > c ? (goog.array.insertAt(a, b, -(c + 1)), !0) : !1;
            };
            goog.array.binaryRemove = function(a, b, c) {
                b = goog.array.binarySearch(a, b, c);
                return 0 <= b ? goog.array.removeAt(a, b) : !1;
            };
            goog.array.bucket = function(a, b, c) {
                for (var d = {}, e = 0; e < a.length; e++) {
                    var f = a[e], g = b.call(c, f, e, a);
                    goog.isDef(g) && (d[g] || (d[g] = [])).push(f);
                }
                return d;
            };
            goog.array.toObject = function(a, b, c) {
                var d = {};
                goog.array.forEach(a, function(e, f) {
                    d[b.call(c, e, f, a)] = e;
                });
                return d;
            };
            goog.array.range = function(a, b, c) {
                var d = [], e = 0, f = a;
                c = c || 1;
                void 0 !== b && (e = a, f = b);
                if (0 > c * (f - e)) return [];
                if (0 < c) for (a = e; a < f; a += c) d.push(a); else for (a = e; a > f; a += c) d.push(a);
                return d;
            };
            goog.array.repeat = function(a, b) {
                for (var c = [], d = 0; d < b; d++) c[d] = a;
                return c;
            };
            goog.array.flatten = function(a) {
                for (var b = [], c = 0; c < arguments.length; c++) {
                    var d = arguments[c];
                    if (goog.isArray(d)) for (var e = 0; e < d.length; e += 8192) for (var f = goog.array.slice(d, e, e + 8192), f = goog.array.flatten.apply(null, f), g = 0; g < f.length; g++) b.push(f[g]); else b.push(d);
                }
                return b;
            };
            goog.array.rotate = function(a, b) {
                goog.asserts.assert(null != a.length);
                a.length && (b %= a.length, 0 < b ? Array.prototype.unshift.apply(a, a.splice(-b, b)) : 0 > b && Array.prototype.push.apply(a, a.splice(0, -b)));
                return a;
            };
            goog.array.moveItem = function(a, b, c) {
                goog.asserts.assert(0 <= b && b < a.length);
                goog.asserts.assert(0 <= c && c < a.length);
                b = Array.prototype.splice.call(a, b, 1);
                Array.prototype.splice.call(a, c, 0, b[0]);
            };
            goog.array.zip = function(a) {
                if (!arguments.length) return [];
                for (var b = [], c = arguments[0].length, d = 1; d < arguments.length; d++) arguments[d].length < c && (c = arguments[d].length);
                for (d = 0; d < c; d++) {
                    for (var e = [], f = 0; f < arguments.length; f++) e.push(arguments[f][d]);
                    b.push(e);
                }
                return b;
            };
            goog.array.shuffle = function(a, b) {
                for (var c = b || Math.random, d = a.length - 1; 0 < d; d--) {
                    var e = Math.floor(c() * (d + 1)), f = a[d];
                    a[d] = a[e];
                    a[e] = f;
                }
            };
            goog.array.copyByIndex = function(a, b) {
                var c = [];
                goog.array.forEach(b, function(b) {
                    c.push(a[b]);
                });
                return c;
            };
            goog.crypt = {};
            goog.crypt.stringToByteArray = function(a) {
                for (var b = [], c = 0, d = 0; d < a.length; d++) {
                    for (var e = a.charCodeAt(d); 255 < e; ) b[c++] = e & 255, e >>= 8;
                    b[c++] = e;
                }
                return b;
            };
            goog.crypt.byteArrayToString = function(a) {
                if (8192 >= a.length) return String.fromCharCode.apply(null, a);
                for (var b = "", c = 0; c < a.length; c += 8192) var d = goog.array.slice(a, c, c + 8192), b = b + String.fromCharCode.apply(null, d);
                return b;
            };
            goog.crypt.byteArrayToHex = function(a) {
                return goog.array.map(a, function(a) {
                    a = a.toString(16);
                    return 1 < a.length ? a : "0" + a;
                }).join("");
            };
            goog.crypt.hexToByteArray = function(a) {
                goog.asserts.assert(0 == a.length % 2, "Key string length must be multiple of 2");
                for (var b = [], c = 0; c < a.length; c += 2) b.push(parseInt(a.substring(c, c + 2), 16));
                return b;
            };
            goog.crypt.stringToUtf8ByteArray = function(a) {
                for (var b = [], c = 0, d = 0; d < a.length; d++) {
                    var e = a.charCodeAt(d);
                    128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (55296 == (e & 64512) && d + 1 < a.length && 56320 == (a.charCodeAt(d + 1) & 64512) ? (e = 65536 + ((e & 1023) << 10) + (a.charCodeAt(++d) & 1023), 
                    b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128) : b[c++] = e >> 12 | 224, b[c++] = e >> 6 & 63 | 128), 
                    b[c++] = e & 63 | 128);
                }
                return b;
            };
            goog.crypt.utf8ByteArrayToString = function(a) {
                for (var b = [], c = 0, d = 0; c < a.length; ) {
                    var e = a[c++];
                    if (128 > e) b[d++] = String.fromCharCode(e); else if (191 < e && 224 > e) {
                        var f = a[c++];
                        b[d++] = String.fromCharCode((e & 31) << 6 | f & 63);
                    } else if (239 < e && 365 > e) {
                        var f = a[c++], g = a[c++], h = a[c++], e = ((e & 7) << 18 | (f & 63) << 12 | (g & 63) << 6 | h & 63) - 65536;
                        b[d++] = String.fromCharCode(55296 + (e >> 10));
                        b[d++] = String.fromCharCode(56320 + (e & 1023));
                    } else f = a[c++], g = a[c++], b[d++] = String.fromCharCode((e & 15) << 12 | (f & 63) << 6 | g & 63);
                }
                return b.join("");
            };
            goog.crypt.xorByteArray = function(a, b) {
                goog.asserts.assert(a.length == b.length, "XOR array lengths must match");
                for (var c = [], d = 0; d < a.length; d++) c.push(a[d] ^ b[d]);
                return c;
            };
            goog.labs = {};
            goog.labs.userAgent = {};
            goog.labs.userAgent.util = {};
            goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
                var a = goog.labs.userAgent.util.getNavigator_();
                return a && (a = a.userAgent) ? a : "";
            };
            goog.labs.userAgent.util.getNavigator_ = function() {
                return goog.global.navigator;
            };
            goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
            goog.labs.userAgent.util.setUserAgent = function(a) {
                goog.labs.userAgent.util.userAgent_ = a || goog.labs.userAgent.util.getNativeUserAgentString_();
            };
            goog.labs.userAgent.util.getUserAgent = function() {
                return goog.labs.userAgent.util.userAgent_;
            };
            goog.labs.userAgent.util.matchUserAgent = function(a) {
                var b = goog.labs.userAgent.util.getUserAgent();
                return goog.string.contains(b, a);
            };
            goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(a) {
                var b = goog.labs.userAgent.util.getUserAgent();
                return goog.string.caseInsensitiveContains(b, a);
            };
            goog.labs.userAgent.util.extractVersionTuples = function(a) {
                for (var b = RegExp("(\\w[\\w ]+)/([^\\s]+)\\s*(?:\\((.*?)\\))?", "g"), c = [], d; d = b.exec(a); ) c.push([ d[1], d[2], d[3] || void 0 ]);
                return c;
            };
            goog.labs.userAgent.platform = {};
            goog.labs.userAgent.platform.isAndroid = function() {
                return goog.labs.userAgent.util.matchUserAgent("Android");
            };
            goog.labs.userAgent.platform.isIpod = function() {
                return goog.labs.userAgent.util.matchUserAgent("iPod");
            };
            goog.labs.userAgent.platform.isIphone = function() {
                return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
            };
            goog.labs.userAgent.platform.isIpad = function() {
                return goog.labs.userAgent.util.matchUserAgent("iPad");
            };
            goog.labs.userAgent.platform.isIos = function() {
                return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
            };
            goog.labs.userAgent.platform.isMacintosh = function() {
                return goog.labs.userAgent.util.matchUserAgent("Macintosh");
            };
            goog.labs.userAgent.platform.isLinux = function() {
                return goog.labs.userAgent.util.matchUserAgent("Linux");
            };
            goog.labs.userAgent.platform.isWindows = function() {
                return goog.labs.userAgent.util.matchUserAgent("Windows");
            };
            goog.labs.userAgent.platform.isChromeOS = function() {
                return goog.labs.userAgent.util.matchUserAgent("CrOS");
            };
            goog.labs.userAgent.platform.getVersion = function() {
                var a = goog.labs.userAgent.util.getUserAgent(), b = "";
                goog.labs.userAgent.platform.isWindows() ? (b = /Windows (?:NT|Phone) ([0-9.]+)/, 
                b = (a = b.exec(a)) ? a[1] : "0.0") : goog.labs.userAgent.platform.isIos() ? (b = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/, 
                b = (a = b.exec(a)) && a[1].replace(/_/g, ".")) : goog.labs.userAgent.platform.isMacintosh() ? (b = /Mac OS X ([0-9_.]+)/, 
                b = (a = b.exec(a)) ? a[1].replace(/_/g, ".") : "10") : goog.labs.userAgent.platform.isAndroid() ? (b = /Android\s+([^\);]+)(\)|;)/, 
                b = (a = b.exec(a)) && a[1]) : goog.labs.userAgent.platform.isChromeOS() && (b = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/, 
                b = (a = b.exec(a)) && a[1]);
                return b || "";
            };
            goog.labs.userAgent.platform.isVersionOrHigher = function(a) {
                return 0 <= goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), a);
            };
            goog.object = {};
            goog.object.forEach = function(a, b, c) {
                for (var d in a) b.call(c, a[d], d, a);
            };
            goog.object.filter = function(a, b, c) {
                var d = {}, e;
                for (e in a) b.call(c, a[e], e, a) && (d[e] = a[e]);
                return d;
            };
            goog.object.map = function(a, b, c) {
                var d = {}, e;
                for (e in a) d[e] = b.call(c, a[e], e, a);
                return d;
            };
            goog.object.some = function(a, b, c) {
                for (var d in a) if (b.call(c, a[d], d, a)) return !0;
                return !1;
            };
            goog.object.every = function(a, b, c) {
                for (var d in a) if (!b.call(c, a[d], d, a)) return !1;
                return !0;
            };
            goog.object.getCount = function(a) {
                var b = 0, c;
                for (c in a) b++;
                return b;
            };
            goog.object.getAnyKey = function(a) {
                for (var b in a) return b;
            };
            goog.object.getAnyValue = function(a) {
                for (var b in a) return a[b];
            };
            goog.object.contains = function(a, b) {
                return goog.object.containsValue(a, b);
            };
            goog.object.getValues = function(a) {
                var b = [], c = 0, d;
                for (d in a) b[c++] = a[d];
                return b;
            };
            goog.object.getKeys = function(a) {
                var b = [], c = 0, d;
                for (d in a) b[c++] = d;
                return b;
            };
            goog.object.getValueByKeys = function(a, b) {
                for (var c = goog.isArrayLike(b), d = c ? b : arguments, c = c ? 0 : 1; c < d.length && (a = a[d[c]], 
                goog.isDef(a)); c++) ;
                return a;
            };
            goog.object.containsKey = function(a, b) {
                return null !== a && b in a;
            };
            goog.object.containsValue = function(a, b) {
                for (var c in a) if (a[c] == b) return !0;
                return !1;
            };
            goog.object.findKey = function(a, b, c) {
                for (var d in a) if (b.call(c, a[d], d, a)) return d;
            };
            goog.object.findValue = function(a, b, c) {
                return (b = goog.object.findKey(a, b, c)) && a[b];
            };
            goog.object.isEmpty = function(a) {
                for (var b in a) return !1;
                return !0;
            };
            goog.object.clear = function(a) {
                for (var b in a) delete a[b];
            };
            goog.object.remove = function(a, b) {
                var c;
                (c = b in a) && delete a[b];
                return c;
            };
            goog.object.add = function(a, b, c) {
                if (null !== a && b in a) throw Error('The object already contains the key "' + b + '"');
                goog.object.set(a, b, c);
            };
            goog.object.get = function(a, b, c) {
                return null !== a && b in a ? a[b] : c;
            };
            goog.object.set = function(a, b, c) {
                a[b] = c;
            };
            goog.object.setIfUndefined = function(a, b, c) {
                return b in a ? a[b] : a[b] = c;
            };
            goog.object.setWithReturnValueIfNotSet = function(a, b, c) {
                if (b in a) return a[b];
                c = c();
                return a[b] = c;
            };
            goog.object.equals = function(a, b) {
                for (var c in a) if (!(c in b) || a[c] !== b[c]) return !1;
                for (c in b) if (!(c in a)) return !1;
                return !0;
            };
            goog.object.clone = function(a) {
                var b = {}, c;
                for (c in a) b[c] = a[c];
                return b;
            };
            goog.object.unsafeClone = function(a) {
                var b = goog.typeOf(a);
                if ("object" == b || "array" == b) {
                    if (goog.isFunction(a.clone)) return a.clone();
                    var b = "array" == b ? [] : {}, c;
                    for (c in a) b[c] = goog.object.unsafeClone(a[c]);
                    return b;
                }
                return a;
            };
            goog.object.transpose = function(a) {
                var b = {}, c;
                for (c in a) b[a[c]] = c;
                return b;
            };
            goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
            goog.object.extend = function(a, b) {
                for (var c, d, e = 1; e < arguments.length; e++) {
                    d = arguments[e];
                    for (c in d) a[c] = d[c];
                    for (var f = 0; f < goog.object.PROTOTYPE_FIELDS_.length; f++) c = goog.object.PROTOTYPE_FIELDS_[f], 
                    Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
                }
            };
            goog.object.create = function(a) {
                var b = arguments.length;
                if (1 == b && goog.isArray(arguments[0])) return goog.object.create.apply(null, arguments[0]);
                if (b % 2) throw Error("Uneven number of arguments");
                for (var c = {}, d = 0; d < b; d += 2) c[arguments[d]] = arguments[d + 1];
                return c;
            };
            goog.object.createSet = function(a) {
                var b = arguments.length;
                if (1 == b && goog.isArray(arguments[0])) return goog.object.createSet.apply(null, arguments[0]);
                for (var c = {}, d = 0; d < b; d++) c[arguments[d]] = !0;
                return c;
            };
            goog.object.createImmutableView = function(a) {
                var b = a;
                Object.isFrozen && !Object.isFrozen(a) && (b = Object.create(a), Object.freeze(b));
                return b;
            };
            goog.object.isImmutableView = function(a) {
                return !!Object.isFrozen && Object.isFrozen(a);
            };
            goog.labs.userAgent.browser = {};
            goog.labs.userAgent.browser.matchOpera_ = function() {
                return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
            };
            goog.labs.userAgent.browser.matchIE_ = function() {
                return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
            };
            goog.labs.userAgent.browser.matchEdge_ = function() {
                return goog.labs.userAgent.util.matchUserAgent("Edge");
            };
            goog.labs.userAgent.browser.matchFirefox_ = function() {
                return goog.labs.userAgent.util.matchUserAgent("Firefox");
            };
            goog.labs.userAgent.browser.matchSafari_ = function() {
                return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
            };
            goog.labs.userAgent.browser.matchCoast_ = function() {
                return goog.labs.userAgent.util.matchUserAgent("Coast");
            };
            goog.labs.userAgent.browser.matchIosWebview_ = function() {
                return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
            };
            goog.labs.userAgent.browser.matchChrome_ = function() {
                return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchEdge_();
            };
            goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
                return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
            };
            goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
            goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
            goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
            goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
            goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
            goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
            goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
            goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
            goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
            goog.labs.userAgent.browser.isSilk = function() {
                return goog.labs.userAgent.util.matchUserAgent("Silk");
            };
            goog.labs.userAgent.browser.getVersion = function() {
                function a(a) {
                    a = goog.array.find(a, d);
                    return c[a] || "";
                }
                var b = goog.labs.userAgent.util.getUserAgent();
                if (goog.labs.userAgent.browser.isIE()) return goog.labs.userAgent.browser.getIEVersion_(b);
                var b = goog.labs.userAgent.util.extractVersionTuples(b), c = {};
                goog.array.forEach(b, function(a) {
                    c[a[0]] = a[1];
                });
                var d = goog.partial(goog.object.containsKey, c);
                return goog.labs.userAgent.browser.isOpera() ? a([ "Version", "Opera", "OPR" ]) : goog.labs.userAgent.browser.isEdge() ? a([ "Edge" ]) : goog.labs.userAgent.browser.isChrome() ? a([ "Chrome", "CriOS" ]) : (b = b[2]) && b[1] || "";
            };
            goog.labs.userAgent.browser.isVersionOrHigher = function(a) {
                return 0 <= goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), a);
            };
            goog.labs.userAgent.browser.getIEVersion_ = function(a) {
                var b = /rv: *([\d\.]*)/.exec(a);
                if (b && b[1]) return b[1];
                var b = "", c = /MSIE +([\d\.]+)/.exec(a);
                if (c && c[1]) if (a = /Trident\/(\d.\d)/.exec(a), "7.0" == c[1]) if (a && a[1]) switch (a[1]) {
                  case "4.0":
                    b = "8.0";
                    break;

                  case "5.0":
                    b = "9.0";
                    break;

                  case "6.0":
                    b = "10.0";
                    break;

                  case "7.0":
                    b = "11.0";
                } else b = "7.0"; else b = c[1];
                return b;
            };
            goog.labs.userAgent.engine = {};
            goog.labs.userAgent.engine.isPresto = function() {
                return goog.labs.userAgent.util.matchUserAgent("Presto");
            };
            goog.labs.userAgent.engine.isTrident = function() {
                return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
            };
            goog.labs.userAgent.engine.isEdge = function() {
                return goog.labs.userAgent.util.matchUserAgent("Edge");
            };
            goog.labs.userAgent.engine.isWebKit = function() {
                return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
            };
            goog.labs.userAgent.engine.isGecko = function() {
                return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
            };
            goog.labs.userAgent.engine.getVersion = function() {
                var a = goog.labs.userAgent.util.getUserAgent();
                if (a) {
                    var a = goog.labs.userAgent.util.extractVersionTuples(a), b = goog.labs.userAgent.engine.getEngineTuple_(a);
                    if (b) return "Gecko" == b[0] ? goog.labs.userAgent.engine.getVersionForKey_(a, "Firefox") : b[1];
                    var a = a[0], c;
                    if (a && (c = a[2]) && (c = /Trident\/([^\s;]+)/.exec(c))) return c[1];
                }
                return "";
            };
            goog.labs.userAgent.engine.getEngineTuple_ = function(a) {
                if (!goog.labs.userAgent.engine.isEdge()) return a[1];
                for (var b = 0; b < a.length; b++) {
                    var c = a[b];
                    if ("Edge" == c[0]) return c;
                }
            };
            goog.labs.userAgent.engine.isVersionOrHigher = function(a) {
                return 0 <= goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), a);
            };
            goog.labs.userAgent.engine.getVersionForKey_ = function(a, b) {
                var c = goog.array.find(a, function(a) {
                    return b == a[0];
                });
                return c && c[1] || "";
            };
            goog.userAgent = {};
            goog.userAgent.ASSUME_IE = !1;
            goog.userAgent.ASSUME_EDGE = !1;
            goog.userAgent.ASSUME_GECKO = !1;
            goog.userAgent.ASSUME_WEBKIT = !1;
            goog.userAgent.ASSUME_MOBILE_WEBKIT = !1;
            goog.userAgent.ASSUME_OPERA = !1;
            goog.userAgent.ASSUME_ANY_VERSION = !1;
            goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
            goog.userAgent.getUserAgentString = function() {
                return goog.labs.userAgent.util.getUserAgent();
            };
            goog.userAgent.getNavigator = function() {
                return goog.global.navigator || null;
            };
            goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
            goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
            goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
            goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
            goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
            goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
            goog.userAgent.isMobile_ = function() {
                return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
            };
            goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
            goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
            goog.userAgent.determinePlatform_ = function() {
                var a = goog.userAgent.getNavigator();
                return a && a.platform || "";
            };
            goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
            goog.userAgent.ASSUME_MAC = !1;
            goog.userAgent.ASSUME_WINDOWS = !1;
            goog.userAgent.ASSUME_LINUX = !1;
            goog.userAgent.ASSUME_X11 = !1;
            goog.userAgent.ASSUME_ANDROID = !1;
            goog.userAgent.ASSUME_IPHONE = !1;
            goog.userAgent.ASSUME_IPAD = !1;
            goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
            goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
            goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
            goog.userAgent.isLegacyLinux_ = function() {
                return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
            };
            goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
            goog.userAgent.isX11_ = function() {
                var a = goog.userAgent.getNavigator();
                return !!a && goog.string.contains(a.appVersion || "", "X11");
            };
            goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
            goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
            goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
            goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
            goog.userAgent.operaVersion_ = function() {
                var a = goog.global.opera.version;
                try {
                    return a();
                } catch (b) {
                    return a;
                }
            };
            goog.userAgent.determineVersion_ = function() {
                if (goog.userAgent.OPERA && goog.global.opera) return goog.userAgent.operaVersion_();
                var a = "", b = goog.userAgent.getVersionRegexResult_();
                b && (a = b ? b[1] : "");
                return goog.userAgent.IE && (b = goog.userAgent.getDocumentMode_(), b > parseFloat(a)) ? String(b) : a;
            };
            goog.userAgent.getVersionRegexResult_ = function() {
                var a = goog.userAgent.getUserAgentString();
                if (goog.userAgent.GECKO) return /rv\:([^\);]+)(\)|;)/.exec(a);
                if (goog.userAgent.EDGE) return /Edge\/([\d\.]+)/.exec(a);
                if (goog.userAgent.IE) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
                if (goog.userAgent.WEBKIT) return /WebKit\/(\S+)/.exec(a);
            };
            goog.userAgent.getDocumentMode_ = function() {
                var a = goog.global.document;
                return a ? a.documentMode : void 0;
            };
            goog.userAgent.VERSION = goog.userAgent.determineVersion_();
            goog.userAgent.compare = function(a, b) {
                return goog.string.compareVersions(a, b);
            };
            goog.userAgent.isVersionOrHigherCache_ = {};
            goog.userAgent.isVersionOrHigher = function(a) {
                return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[a] || (goog.userAgent.isVersionOrHigherCache_[a] = 0 <= goog.string.compareVersions(goog.userAgent.VERSION, a));
            };
            goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
            goog.userAgent.isDocumentModeOrHigher = function(a) {
                return Number(goog.userAgent.DOCUMENT_MODE) >= a;
            };
            goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
            goog.userAgent.DOCUMENT_MODE = function() {
                var a = goog.global.document, b = goog.userAgent.getDocumentMode_();
                return a && goog.userAgent.IE ? b || ("CSS1Compat" == a.compatMode ? parseInt(goog.userAgent.VERSION, 10) : 5) : void 0;
            }();
            goog.userAgent.product = {};
            goog.userAgent.product.ASSUME_FIREFOX = !1;
            goog.userAgent.product.ASSUME_IPHONE = !1;
            goog.userAgent.product.ASSUME_IPAD = !1;
            goog.userAgent.product.ASSUME_ANDROID = !1;
            goog.userAgent.product.ASSUME_CHROME = !1;
            goog.userAgent.product.ASSUME_SAFARI = !1;
            goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
            goog.userAgent.product.OPERA = goog.userAgent.OPERA;
            goog.userAgent.product.IE = goog.userAgent.IE;
            goog.userAgent.product.EDGE = goog.userAgent.EDGE;
            goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
            goog.userAgent.product.isIphoneOrIpod_ = function() {
                return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
            };
            goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
            goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
            goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
            goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
            goog.userAgent.product.isSafariDesktop_ = function() {
                return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
            };
            goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
            goog.crypt.base64 = {};
            goog.crypt.base64.byteToCharMap_ = null;
            goog.crypt.base64.charToByteMap_ = null;
            goog.crypt.base64.byteToCharMapWebSafe_ = null;
            goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/=";
            goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
            goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ = goog.userAgent.GECKO || goog.userAgent.WEBKIT && !goog.userAgent.product.SAFARI || goog.userAgent.OPERA;
            goog.crypt.base64.HAS_NATIVE_ENCODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || "function" == typeof goog.global.btoa;
            goog.crypt.base64.HAS_NATIVE_DECODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || !goog.userAgent.product.SAFARI && !goog.userAgent.IE && "function" == typeof goog.global.atob;
            goog.crypt.base64.encodeByteArray = function(a, b) {
                goog.asserts.assert(goog.isArrayLike(a), "encodeByteArray takes an array as a parameter");
                goog.crypt.base64.init_();
                for (var c = b ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_, d = [], e = 0; e < a.length; e += 3) {
                    var f = a[e], g = e + 1 < a.length, h = g ? a[e + 1] : 0, k = e + 2 < a.length, l = k ? a[e + 2] : 0, p = f >> 2, f = (f & 3) << 4 | h >> 4, h = (h & 15) << 2 | l >> 6, l = l & 63;
                    k || (l = 64, g || (h = 64));
                    d.push(c[p], c[f], c[h], c[l]);
                }
                return d.join("");
            };
            goog.crypt.base64.encodeString = function(a, b) {
                return goog.crypt.base64.HAS_NATIVE_ENCODE_ && !b ? goog.global.btoa(a) : goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a), b);
            };
            goog.crypt.base64.decodeString = function(a, b) {
                if (goog.crypt.base64.HAS_NATIVE_DECODE_ && !b) return goog.global.atob(a);
                var c = "";
                goog.crypt.base64.decodeStringInternal_(a, function(a) {
                    c += String.fromCharCode(a);
                });
                return c;
            };
            goog.crypt.base64.decodeStringToByteArray = function(a, b) {
                var c = [];
                goog.crypt.base64.decodeStringInternal_(a, function(a) {
                    c.push(a);
                });
                return c;
            };
            goog.crypt.base64.decodeStringToUint8Array = function(a) {
                goog.asserts.assert(!goog.userAgent.IE || goog.userAgent.isVersionOrHigher("10"), "Browser does not support typed arrays");
                var b = new Uint8Array(Math.ceil(3 * a.length / 4)), c = 0;
                goog.crypt.base64.decodeStringInternal_(a, function(a) {
                    b[c++] = a;
                });
                return b.subarray(0, c);
            };
            goog.crypt.base64.decodeStringInternal_ = function(a, b) {
                function c(b) {
                    for (;d < a.length; ) {
                        var c = a.charAt(d++), e = goog.crypt.base64.charToByteMap_[c];
                        if (null != e) return e;
                        if (!goog.string.isEmptyOrWhitespace(c)) throw Error("Unknown base64 encoding at char: " + c);
                    }
                    return b;
                }
                goog.crypt.base64.init_();
                for (var d = 0; ;) {
                    var e = c(-1), f = c(0), g = c(64), h = c(64);
                    if (64 === h && -1 === e) break;
                    b(e << 2 | f >> 4);
                    64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
                }
            };
            goog.crypt.base64.init_ = function() {
                if (!goog.crypt.base64.byteToCharMap_) {
                    goog.crypt.base64.byteToCharMap_ = {};
                    goog.crypt.base64.charToByteMap_ = {};
                    goog.crypt.base64.byteToCharMapWebSafe_ = {};
                    for (var a = 0; a < goog.crypt.base64.ENCODED_VALS.length; a++) goog.crypt.base64.byteToCharMap_[a] = goog.crypt.base64.ENCODED_VALS.charAt(a), 
                    goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[a]] = a, goog.crypt.base64.byteToCharMapWebSafe_[a] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a), 
                    a >= goog.crypt.base64.ENCODED_VALS_BASE.length && (goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a)] = a);
                }
            };
            jspb.ExtensionFieldInfo = function(a, b, c, d, e) {
                this.fieldIndex = a;
                this.fieldName = b;
                this.ctor = c;
                this.toObjectFn = d;
                this.isRepeated = e;
            };
            jspb.ExtensionFieldBinaryInfo = function(a, b, c, d, e, f) {
                this.fieldInfo = a;
                this.binaryReaderFn = b;
                this.binaryWriterFn = c;
                this.binaryMessageSerializeFn = d;
                this.binaryMessageDeserializeFn = e;
                this.isPacked = f;
            };
            jspb.ExtensionFieldInfo.prototype.isMessageType = function() {
                return !!this.ctor;
            };
            jspb.Message = function() {};
            jspb.Message.GENERATE_TO_OBJECT = !0;
            jspb.Message.GENERATE_FROM_OBJECT = !goog.DISALLOW_TEST_ONLY_CODE;
            jspb.Message.GENERATE_TO_STRING = !0;
            jspb.Message.ASSUME_LOCAL_ARRAYS = !1;
            jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS = !0;
            jspb.Message.SUPPORTS_UINT8ARRAY_ = "function" == typeof Uint8Array;
            jspb.Message.prototype.getJsPbMessageId = function() {
                return this.messageId_;
            };
            jspb.Message.getIndex_ = function(a, b) {
                return b + a.arrayIndexOffset_;
            };
            jspb.Message.getFieldNumber_ = function(a, b) {
                return b - a.arrayIndexOffset_;
            };
            jspb.Message.initialize = function(a, b, c, d, e, f) {
                a.wrappers_ = null;
                b || (b = c ? [ c ] : []);
                a.messageId_ = c ? String(c) : void 0;
                a.arrayIndexOffset_ = 0 === c ? -1 : 0;
                a.array = b;
                jspb.Message.initPivotAndExtensionObject_(a, d);
                a.convertedFloatingPointFields_ = {};
                jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS || (a.repeatedFields = e);
                if (e) for (b = 0; b < e.length; b++) c = e[b], c < a.pivot_ ? (c = jspb.Message.getIndex_(a, c), 
                a.array[c] = a.array[c] || jspb.Message.EMPTY_LIST_SENTINEL_) : (jspb.Message.maybeInitEmptyExtensionObject_(a), 
                a.extensionObject_[c] = a.extensionObject_[c] || jspb.Message.EMPTY_LIST_SENTINEL_);
                if (f && f.length) for (b = 0; b < f.length; b++) jspb.Message.computeOneofCase(a, f[b]);
            };
            jspb.Message.EMPTY_LIST_SENTINEL_ = goog.DEBUG && Object.freeze ? Object.freeze([]) : [];
            jspb.Message.isArray_ = function(a) {
                return jspb.Message.ASSUME_LOCAL_ARRAYS ? a instanceof Array : goog.isArray(a);
            };
            jspb.Message.initPivotAndExtensionObject_ = function(a, b) {
                if (a.array.length) {
                    var c = a.array.length - 1, d = a.array[c];
                    if (d && "object" == typeof d && !jspb.Message.isArray_(d) && !(jspb.Message.SUPPORTS_UINT8ARRAY_ && d instanceof Uint8Array)) {
                        a.pivot_ = jspb.Message.getFieldNumber_(a, c);
                        a.extensionObject_ = d;
                        return;
                    }
                }
                -1 < b ? (a.pivot_ = b, a.extensionObject_ = null) : a.pivot_ = Number.MAX_VALUE;
            };
            jspb.Message.maybeInitEmptyExtensionObject_ = function(a) {
                var b = jspb.Message.getIndex_(a, a.pivot_);
                a.array[b] || (a.extensionObject_ = a.array[b] = {});
            };
            jspb.Message.toObjectList = function(a, b, c) {
                for (var d = [], e = 0; e < a.length; e++) d[e] = b.call(a[e], c, a[e]);
                return d;
            };
            jspb.Message.toObjectExtension = function(a, b, c, d, e) {
                for (var f in c) {
                    var g = c[f], h = d.call(a, g);
                    if (null != h) {
                        for (var k in g.fieldName) if (g.fieldName.hasOwnProperty(k)) break;
                        b[k] = g.toObjectFn ? g.isRepeated ? jspb.Message.toObjectList(h, g.toObjectFn, e) : g.toObjectFn(e, h) : h;
                    }
                }
            };
            jspb.Message.serializeBinaryExtensions = function(a, b, c, d) {
                for (var e in c) {
                    var f = c[e], g = f.fieldInfo;
                    if (!f.binaryWriterFn) throw Error("Message extension present that was generated without binary serialization support");
                    var h = d.call(a, g);
                    if (null != h) if (g.isMessageType()) if (f.binaryMessageSerializeFn) f.binaryWriterFn.call(b, g.fieldIndex, h, f.binaryMessageSerializeFn); else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format"); else f.binaryWriterFn.call(b, g.fieldIndex, h);
                }
            };
            jspb.Message.readBinaryExtension = function(a, b, c, d, e) {
                var f = c[b.getFieldNumber()];
                if (f) {
                    c = f.fieldInfo;
                    if (!f.binaryReaderFn) throw Error("Deserializing extension whose generated code does not support binary format");
                    var g;
                    c.isMessageType() ? (g = new c.ctor(), f.binaryReaderFn.call(b, g, f.binaryMessageDeserializeFn)) : g = f.binaryReaderFn.call(b);
                    c.isRepeated && !f.isPacked ? (b = d.call(a, c)) ? b.push(g) : e.call(a, c, [ g ]) : e.call(a, c, g);
                } else b.skipField();
            };
            jspb.Message.getField = function(a, b) {
                if (b < a.pivot_) {
                    var c = jspb.Message.getIndex_(a, b), d = a.array[c];
                    return d === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.array[c] = [] : d;
                }
                if (a.extensionObject_) return d = a.extensionObject_[b], d === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.extensionObject_[b] = [] : d;
            };
            jspb.Message.getRepeatedField = function(a, b) {
                if (b < a.pivot_) {
                    var c = jspb.Message.getIndex_(a, b), d = a.array[c];
                    return d === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.array[c] = [] : d;
                }
                d = a.extensionObject_[b];
                return d === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.extensionObject_[b] = [] : d;
            };
            jspb.Message.getOptionalFloatingPointField = function(a, b) {
                var c = jspb.Message.getField(a, b);
                return null == c ? c : +c;
            };
            jspb.Message.getRepeatedFloatingPointField = function(a, b) {
                var c = jspb.Message.getRepeatedField(a, b);
                a.convertedFloatingPointFields_ || (a.convertedFloatingPointFields_ = {});
                if (!a.convertedFloatingPointFields_[b]) {
                    for (var d = 0; d < c.length; d++) c[d] = +c[d];
                    a.convertedFloatingPointFields_[b] = !0;
                }
                return c;
            };
            jspb.Message.bytesAsB64 = function(a) {
                if (null == a || goog.isString(a)) return a;
                if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array) return goog.crypt.base64.encodeByteArray(a);
                goog.asserts.fail("Cannot coerce to b64 string: " + goog.typeOf(a));
                return null;
            };
            jspb.Message.bytesAsU8 = function(a) {
                if (null == a || a instanceof Uint8Array) return a;
                if (goog.isString(a)) return goog.crypt.base64.decodeStringToUint8Array(a);
                goog.asserts.fail("Cannot coerce to Uint8Array: " + goog.typeOf(a));
                return null;
            };
            jspb.Message.bytesListAsB64 = function(a) {
                jspb.Message.assertConsistentTypes_(a);
                return !a.length || goog.isString(a[0]) ? a : goog.array.map(a, jspb.Message.bytesAsB64);
            };
            jspb.Message.bytesListAsU8 = function(a) {
                jspb.Message.assertConsistentTypes_(a);
                return !a.length || a[0] instanceof Uint8Array ? a : goog.array.map(a, jspb.Message.bytesAsU8);
            };
            jspb.Message.assertConsistentTypes_ = function(a) {
                if (goog.DEBUG && a && 1 < a.length) {
                    var b = goog.typeOf(a[0]);
                    goog.array.forEach(a, function(a) {
                        goog.typeOf(a) != b && goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got " + goog.typeOf(a) + " expected " + b);
                    });
                }
            };
            jspb.Message.getFieldWithDefault = function(a, b, c) {
                a = jspb.Message.getField(a, b);
                return null == a ? c : a;
            };
            jspb.Message.getFieldProto3 = jspb.Message.getFieldWithDefault;
            jspb.Message.getMapField = function(a, b, c, d) {
                a.wrappers_ || (a.wrappers_ = {});
                if (b in a.wrappers_) return a.wrappers_[b];
                if (!c) return c = jspb.Message.getField(a, b), c || (c = [], jspb.Message.setField(a, b, c)), 
                a.wrappers_[b] = new jspb.Map(c, d);
            };
            jspb.Message.setField = function(a, b, c) {
                b < a.pivot_ ? a.array[jspb.Message.getIndex_(a, b)] = c : (jspb.Message.maybeInitEmptyExtensionObject_(a), 
                a.extensionObject_[b] = c);
            };
            jspb.Message.setProto3IntField = function(a, b, c) {
                jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
            };
            jspb.Message.setProto3StringIntField = function(a, b, c) {
                jspb.Message.setFieldIgnoringDefault_(a, b, c, "0");
            };
            jspb.Message.setProto3FloatField = function(a, b, c) {
                jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
            };
            jspb.Message.setProto3BooleanField = function(a, b, c) {
                jspb.Message.setFieldIgnoringDefault_(a, b, c, !1);
            };
            jspb.Message.setProto3StringField = function(a, b, c) {
                jspb.Message.setFieldIgnoringDefault_(a, b, c, "");
            };
            jspb.Message.setProto3BytesField = function(a, b, c) {
                jspb.Message.setFieldIgnoringDefault_(a, b, c, "");
            };
            jspb.Message.setProto3EnumField = function(a, b, c) {
                jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
            };
            jspb.Message.setFieldIgnoringDefault_ = function(a, b, c, d) {
                c != d ? jspb.Message.setField(a, b, c) : a.array[jspb.Message.getIndex_(a, b)] = null;
            };
            jspb.Message.addToRepeatedField = function(a, b, c, d) {
                a = jspb.Message.getRepeatedField(a, b);
                void 0 != d ? a.splice(d, 0, c) : a.push(c);
            };
            jspb.Message.setOneofField = function(a, b, c, d) {
                (c = jspb.Message.computeOneofCase(a, c)) && c !== b && void 0 !== d && (a.wrappers_ && c in a.wrappers_ && (a.wrappers_[c] = void 0), 
                jspb.Message.setField(a, c, void 0));
                jspb.Message.setField(a, b, d);
            };
            jspb.Message.computeOneofCase = function(a, b) {
                for (var c, d, e = 0; e < b.length; e++) {
                    var f = b[e], g = jspb.Message.getField(a, f);
                    null != g && (c = f, d = g, jspb.Message.setField(a, f, void 0));
                }
                return c ? (jspb.Message.setField(a, c, d), c) : 0;
            };
            jspb.Message.getWrapperField = function(a, b, c, d) {
                a.wrappers_ || (a.wrappers_ = {});
                if (!a.wrappers_[c]) {
                    var e = jspb.Message.getField(a, c);
                    if (d || e) a.wrappers_[c] = new b(e);
                }
                return a.wrappers_[c];
            };
            jspb.Message.getRepeatedWrapperField = function(a, b, c) {
                jspb.Message.wrapRepeatedField_(a, b, c);
                b = a.wrappers_[c];
                b == jspb.Message.EMPTY_LIST_SENTINEL_ && (b = a.wrappers_[c] = []);
                return b;
            };
            jspb.Message.wrapRepeatedField_ = function(a, b, c) {
                a.wrappers_ || (a.wrappers_ = {});
                if (!a.wrappers_[c]) {
                    for (var d = jspb.Message.getRepeatedField(a, c), e = [], f = 0; f < d.length; f++) e[f] = new b(d[f]);
                    a.wrappers_[c] = e;
                }
            };
            jspb.Message.setWrapperField = function(a, b, c) {
                a.wrappers_ || (a.wrappers_ = {});
                var d = c ? c.toArray() : c;
                a.wrappers_[b] = c;
                jspb.Message.setField(a, b, d);
            };
            jspb.Message.setOneofWrapperField = function(a, b, c, d) {
                a.wrappers_ || (a.wrappers_ = {});
                var e = d ? d.toArray() : d;
                a.wrappers_[b] = d;
                jspb.Message.setOneofField(a, b, c, e);
            };
            jspb.Message.setRepeatedWrapperField = function(a, b, c) {
                a.wrappers_ || (a.wrappers_ = {});
                c = c || [];
                for (var d = [], e = 0; e < c.length; e++) d[e] = c[e].toArray();
                a.wrappers_[b] = c;
                jspb.Message.setField(a, b, d);
            };
            jspb.Message.addToRepeatedWrapperField = function(a, b, c, d, e) {
                jspb.Message.wrapRepeatedField_(a, d, b);
                var f = a.wrappers_[b];
                f || (f = a.wrappers_[b] = []);
                c = c ? c : new d();
                a = jspb.Message.getRepeatedField(a, b);
                void 0 != e ? (f.splice(e, 0, c), a.splice(e, 0, c.toArray())) : (f.push(c), a.push(c.toArray()));
                return c;
            };
            jspb.Message.toMap = function(a, b, c, d) {
                for (var e = {}, f = 0; f < a.length; f++) e[b.call(a[f])] = c ? c.call(a[f], d, a[f]) : a[f];
                return e;
            };
            jspb.Message.prototype.syncMapFields_ = function() {
                if (this.wrappers_) for (var a in this.wrappers_) {
                    var b = this.wrappers_[a];
                    if (goog.isArray(b)) for (var c = 0; c < b.length; c++) b[c] && b[c].toArray(); else b && b.toArray();
                }
            };
            jspb.Message.prototype.toArray = function() {
                this.syncMapFields_();
                return this.array;
            };
            jspb.Message.GENERATE_TO_STRING && (jspb.Message.prototype.toString = function() {
                this.syncMapFields_();
                return this.array.toString();
            });
            jspb.Message.prototype.getExtension = function(a) {
                if (this.extensionObject_) {
                    this.wrappers_ || (this.wrappers_ = {});
                    var b = a.fieldIndex;
                    if (a.isRepeated) {
                        if (a.isMessageType()) return this.wrappers_[b] || (this.wrappers_[b] = goog.array.map(this.extensionObject_[b] || [], function(b) {
                            return new a.ctor(b);
                        })), this.wrappers_[b];
                    } else if (a.isMessageType()) return !this.wrappers_[b] && this.extensionObject_[b] && (this.wrappers_[b] = new a.ctor(this.extensionObject_[b])), 
                    this.wrappers_[b];
                    return this.extensionObject_[b];
                }
            };
            jspb.Message.prototype.setExtension = function(a, b) {
                this.wrappers_ || (this.wrappers_ = {});
                jspb.Message.maybeInitEmptyExtensionObject_(this);
                var c = a.fieldIndex;
                a.isRepeated ? (b = b || [], a.isMessageType() ? (this.wrappers_[c] = b, this.extensionObject_[c] = goog.array.map(b, function(a) {
                    return a.toArray();
                })) : this.extensionObject_[c] = b) : a.isMessageType() ? (this.wrappers_[c] = b, 
                this.extensionObject_[c] = b ? b.toArray() : b) : this.extensionObject_[c] = b;
                return this;
            };
            jspb.Message.difference = function(a, b) {
                if (!(a instanceof b.constructor)) throw Error("Messages have different types.");
                var c = a.toArray(), d = b.toArray(), e = [], f = 0, g = c.length > d.length ? c.length : d.length;
                a.getJsPbMessageId() && (e[0] = a.getJsPbMessageId(), f = 1);
                for (;f < g; f++) jspb.Message.compareFields(c[f], d[f]) || (e[f] = d[f]);
                return new a.constructor(e);
            };
            jspb.Message.equals = function(a, b) {
                return a == b || !(!a || !b) && a instanceof b.constructor && jspb.Message.compareFields(a.toArray(), b.toArray());
            };
            jspb.Message.compareExtensions = function(a, b) {
                a = a || {};
                b = b || {};
                var c = {}, d;
                for (d in a) c[d] = 0;
                for (d in b) c[d] = 0;
                for (d in c) if (!jspb.Message.compareFields(a[d], b[d])) return !1;
                return !0;
            };
            jspb.Message.compareFields = function(a, b) {
                if (a == b) return !0;
                if (!goog.isObject(a) || !goog.isObject(b)) return goog.isNumber(a) && isNaN(a) || goog.isNumber(b) && isNaN(b) ? String(a) == String(b) : !1;
                if (a.constructor != b.constructor) return !1;
                if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a.constructor === Uint8Array) {
                    if (a.length != b.length) return !1;
                    for (var c = 0; c < a.length; c++) if (a[c] != b[c]) return !1;
                    return !0;
                }
                if (a.constructor === Array) {
                    for (var d = void 0, e = void 0, f = Math.max(a.length, b.length), c = 0; c < f; c++) {
                        var g = a[c], h = b[c];
                        g && g.constructor == Object && (goog.asserts.assert(void 0 === d), goog.asserts.assert(c === a.length - 1), 
                        d = g, g = void 0);
                        h && h.constructor == Object && (goog.asserts.assert(void 0 === e), goog.asserts.assert(c === b.length - 1), 
                        e = h, h = void 0);
                        if (!jspb.Message.compareFields(g, h)) return !1;
                    }
                    return d || e ? (d = d || {}, e = e || {}, jspb.Message.compareExtensions(d, e)) : !0;
                }
                if (a.constructor === Object) return jspb.Message.compareExtensions(a, b);
                throw Error("Invalid type in JSPB array");
            };
            jspb.Message.prototype.cloneMessage = function() {
                return jspb.Message.cloneMessage(this);
            };
            jspb.Message.prototype.clone = function() {
                return jspb.Message.cloneMessage(this);
            };
            jspb.Message.clone = function(a) {
                return jspb.Message.cloneMessage(a);
            };
            jspb.Message.cloneMessage = function(a) {
                return new a.constructor(jspb.Message.clone_(a.toArray()));
            };
            jspb.Message.copyInto = function(a, b) {
                goog.asserts.assertInstanceof(a, jspb.Message);
                goog.asserts.assertInstanceof(b, jspb.Message);
                goog.asserts.assert(a.constructor == b.constructor, "Copy source and target message should have the same type.");
                for (var c = jspb.Message.clone(a), d = b.toArray(), e = c.toArray(), f = d.length = 0; f < e.length; f++) d[f] = e[f];
                b.wrappers_ = c.wrappers_;
                b.extensionObject_ = c.extensionObject_;
            };
            jspb.Message.clone_ = function(a) {
                var b;
                if (goog.isArray(a)) {
                    for (var c = Array(a.length), d = 0; d < a.length; d++) b = a[d], null != b && (c[d] = "object" == typeof b ? jspb.Message.clone_(goog.asserts.assert(b)) : b);
                    return c;
                }
                if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array) return new Uint8Array(a);
                c = {};
                for (d in a) b = a[d], null != b && (c[d] = "object" == typeof b ? jspb.Message.clone_(goog.asserts.assert(b)) : b);
                return c;
            };
            jspb.Message.registerMessageType = function(a, b) {
                jspb.Message.registry_[a] = b;
                b.messageId = a;
            };
            jspb.Message.registry_ = {};
            jspb.Message.messageSetExtensions = {};
            jspb.Message.messageSetExtensionsBinary = {};
            jspb.arith = {};
            jspb.arith.UInt64 = function(a, b) {
                this.lo = a;
                this.hi = b;
            };
            jspb.arith.UInt64.prototype.cmp = function(a) {
                return this.hi < a.hi || this.hi == a.hi && this.lo < a.lo ? -1 : this.hi == a.hi && this.lo == a.lo ? 0 : 1;
            };
            jspb.arith.UInt64.prototype.rightShift = function() {
                return new jspb.arith.UInt64((this.lo >>> 1 | (this.hi & 1) << 31) >>> 0, this.hi >>> 1 >>> 0);
            };
            jspb.arith.UInt64.prototype.leftShift = function() {
                return new jspb.arith.UInt64(this.lo << 1 >>> 0, (this.hi << 1 | this.lo >>> 31) >>> 0);
            };
            jspb.arith.UInt64.prototype.msb = function() {
                return !!(this.hi & 2147483648);
            };
            jspb.arith.UInt64.prototype.lsb = function() {
                return !!(this.lo & 1);
            };
            jspb.arith.UInt64.prototype.zero = function() {
                return 0 == this.lo && 0 == this.hi;
            };
            jspb.arith.UInt64.prototype.add = function(a) {
                return new jspb.arith.UInt64((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
            };
            jspb.arith.UInt64.prototype.sub = function(a) {
                return new jspb.arith.UInt64((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
            };
            jspb.arith.UInt64.mul32x32 = function(a, b) {
                for (var c = a & 65535, d = a >>> 16, e = b & 65535, f = b >>> 16, g = c * e + 65536 * (c * f & 65535) + 65536 * (d * e & 65535), c = d * f + (c * f >>> 16) + (d * e >>> 16); 4294967296 <= g; ) g -= 4294967296, 
                c += 1;
                return new jspb.arith.UInt64(g >>> 0, c >>> 0);
            };
            jspb.arith.UInt64.prototype.mul = function(a) {
                var b = jspb.arith.UInt64.mul32x32(this.lo, a);
                a = jspb.arith.UInt64.mul32x32(this.hi, a);
                a.hi = a.lo;
                a.lo = 0;
                return b.add(a);
            };
            jspb.arith.UInt64.prototype.div = function(a) {
                if (0 == a) return [];
                var b = new jspb.arith.UInt64(0, 0), c = new jspb.arith.UInt64(this.lo, this.hi);
                a = new jspb.arith.UInt64(a, 0);
                for (var d = new jspb.arith.UInt64(1, 0); !a.msb(); ) a = a.leftShift(), d = d.leftShift();
                for (;!d.zero(); ) 0 >= a.cmp(c) && (b = b.add(d), c = c.sub(a)), a = a.rightShift(), 
                d = d.rightShift();
                return [ b, c ];
            };
            jspb.arith.UInt64.prototype.toString = function() {
                for (var a = "", b = this; !b.zero(); ) var b = b.div(10), c = b[0], a = b[1].lo + a, b = c;
                "" == a && (a = "0");
                return a;
            };
            jspb.arith.UInt64.fromString = function(a) {
                for (var b = new jspb.arith.UInt64(0, 0), c = new jspb.arith.UInt64(0, 0), d = 0; d < a.length; d++) {
                    if ("0" > a[d] || "9" < a[d]) return null;
                    var e = parseInt(a[d], 10);
                    c.lo = e;
                    b = b.mul(10).add(c);
                }
                return b;
            };
            jspb.arith.UInt64.prototype.clone = function() {
                return new jspb.arith.UInt64(this.lo, this.hi);
            };
            jspb.arith.Int64 = function(a, b) {
                this.lo = a;
                this.hi = b;
            };
            jspb.arith.Int64.prototype.add = function(a) {
                return new jspb.arith.Int64((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
            };
            jspb.arith.Int64.prototype.sub = function(a) {
                return new jspb.arith.Int64((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
            };
            jspb.arith.Int64.prototype.clone = function() {
                return new jspb.arith.Int64(this.lo, this.hi);
            };
            jspb.arith.Int64.prototype.toString = function() {
                var a = 0 != (this.hi & 2147483648), b = new jspb.arith.UInt64(this.lo, this.hi);
                a && (b = new jspb.arith.UInt64(0, 0).sub(b));
                return (a ? "-" : "") + b.toString();
            };
            jspb.arith.Int64.fromString = function(a) {
                var b = 0 < a.length && "-" == a[0];
                b && (a = a.substring(1));
                a = jspb.arith.UInt64.fromString(a);
                if (null === a) return null;
                b && (a = new jspb.arith.UInt64(0, 0).sub(a));
                return new jspb.arith.Int64(a.lo, a.hi);
            };
            jspb.BinaryConstants = {};
            jspb.ConstBinaryMessage = function() {};
            jspb.BinaryMessage = function() {};
            jspb.BinaryConstants.FieldType = {
                INVALID: -1,
                DOUBLE: 1,
                FLOAT: 2,
                INT64: 3,
                UINT64: 4,
                INT32: 5,
                FIXED64: 6,
                FIXED32: 7,
                BOOL: 8,
                STRING: 9,
                GROUP: 10,
                MESSAGE: 11,
                BYTES: 12,
                UINT32: 13,
                ENUM: 14,
                SFIXED32: 15,
                SFIXED64: 16,
                SINT32: 17,
                SINT64: 18,
                FHASH64: 30,
                VHASH64: 31
            };
            jspb.BinaryConstants.WireType = {
                INVALID: -1,
                VARINT: 0,
                FIXED64: 1,
                DELIMITED: 2,
                START_GROUP: 3,
                END_GROUP: 4,
                FIXED32: 5
            };
            jspb.BinaryConstants.FieldTypeToWireType = function(a) {
                var b = jspb.BinaryConstants.FieldType, c = jspb.BinaryConstants.WireType;
                switch (a) {
                  case b.INT32:
                  case b.INT64:
                  case b.UINT32:
                  case b.UINT64:
                  case b.SINT32:
                  case b.SINT64:
                  case b.BOOL:
                  case b.ENUM:
                  case b.VHASH64:
                    return c.VARINT;

                  case b.DOUBLE:
                  case b.FIXED64:
                  case b.SFIXED64:
                  case b.FHASH64:
                    return c.FIXED64;

                  case b.STRING:
                  case b.MESSAGE:
                  case b.BYTES:
                    return c.DELIMITED;

                  case b.FLOAT:
                  case b.FIXED32:
                  case b.SFIXED32:
                    return c.FIXED32;

                  default:
                    return c.INVALID;
                }
            };
            jspb.BinaryConstants.INVALID_FIELD_NUMBER = -1;
            jspb.BinaryConstants.FLOAT32_EPS = 1401298464324817e-60;
            jspb.BinaryConstants.FLOAT32_MIN = 11754943508222875e-54;
            jspb.BinaryConstants.FLOAT32_MAX = 34028234663852886e22;
            jspb.BinaryConstants.FLOAT64_EPS = 5e-324;
            jspb.BinaryConstants.FLOAT64_MIN = 22250738585072014e-324;
            jspb.BinaryConstants.FLOAT64_MAX = 17976931348623157e292;
            jspb.BinaryConstants.TWO_TO_20 = 1048576;
            jspb.BinaryConstants.TWO_TO_23 = 8388608;
            jspb.BinaryConstants.TWO_TO_31 = 2147483648;
            jspb.BinaryConstants.TWO_TO_32 = 4294967296;
            jspb.BinaryConstants.TWO_TO_52 = 4503599627370496;
            jspb.BinaryConstants.TWO_TO_63 = 0x8000000000000000;
            jspb.BinaryConstants.TWO_TO_64 = 0x10000000000000000;
            jspb.BinaryConstants.ZERO_HASH = "\0\0\0\0\0\0\0\0";
            jspb.utils = {};
            jspb.utils.split64Low = 0;
            jspb.utils.split64High = 0;
            jspb.utils.splitUint64 = function(a) {
                var b = a >>> 0;
                a = Math.floor((a - b) / jspb.BinaryConstants.TWO_TO_32) >>> 0;
                jspb.utils.split64Low = b;
                jspb.utils.split64High = a;
            };
            jspb.utils.splitInt64 = function(a) {
                var b = 0 > a;
                a = Math.abs(a);
                var c = a >>> 0;
                a = Math.floor((a - c) / jspb.BinaryConstants.TWO_TO_32);
                a >>>= 0;
                b && (a = ~a >>> 0, c = (~c >>> 0) + 1, 4294967295 < c && (c = 0, a++, 4294967295 < a && (a = 0)));
                jspb.utils.split64Low = c;
                jspb.utils.split64High = a;
            };
            jspb.utils.splitZigzag64 = function(a) {
                var b = 0 > a;
                a = 2 * Math.abs(a);
                jspb.utils.splitUint64(a);
                a = jspb.utils.split64Low;
                var c = jspb.utils.split64High;
                b && (0 == a ? 0 == c ? c = a = 4294967295 : (c--, a = 4294967295) : a--);
                jspb.utils.split64Low = a;
                jspb.utils.split64High = c;
            };
            jspb.utils.splitFloat32 = function(a) {
                var b = 0 > a ? 1 : 0;
                a = b ? -a : a;
                var c;
                0 === a ? 0 < 1 / a ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 0) : (jspb.utils.split64High = 0, 
                jspb.utils.split64Low = 2147483648) : isNaN(a) ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483647) : a > jspb.BinaryConstants.FLOAT32_MAX ? (jspb.utils.split64High = 0, 
                jspb.utils.split64Low = (b << 31 | 2139095040) >>> 0) : a < jspb.BinaryConstants.FLOAT32_MIN ? (a = Math.round(a / Math.pow(2, -149)), 
                jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | a) >>> 0) : (c = Math.floor(Math.log(a) / Math.LN2), 
                a *= Math.pow(2, -c), a = Math.round(a * jspb.BinaryConstants.TWO_TO_23) & 8388607, 
                jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | c + 127 << 23 | a) >>> 0);
            };
            jspb.utils.splitFloat64 = function(a) {
                var b = 0 > a ? 1 : 0;
                a = b ? -a : a;
                if (0 === a) jspb.utils.split64High = 0 < 1 / a ? 0 : 2147483648, jspb.utils.split64Low = 0; else if (isNaN(a)) jspb.utils.split64High = 2147483647, 
                jspb.utils.split64Low = 4294967295; else if (a > jspb.BinaryConstants.FLOAT64_MAX) jspb.utils.split64High = (b << 31 | 2146435072) >>> 0, 
                jspb.utils.split64Low = 0; else if (a < jspb.BinaryConstants.FLOAT64_MIN) {
                    var c = a / Math.pow(2, -1074);
                    a = c / jspb.BinaryConstants.TWO_TO_32;
                    jspb.utils.split64High = (b << 31 | a) >>> 0;
                    jspb.utils.split64Low = c >>> 0;
                } else {
                    var d = Math.floor(Math.log(a) / Math.LN2);
                    1024 == d && (d = 1023);
                    c = a * Math.pow(2, -d);
                    a = c * jspb.BinaryConstants.TWO_TO_20 & 1048575;
                    c = c * jspb.BinaryConstants.TWO_TO_52 >>> 0;
                    jspb.utils.split64High = (b << 31 | d + 1023 << 20 | a) >>> 0;
                    jspb.utils.split64Low = c;
                }
            };
            jspb.utils.splitHash64 = function(a) {
                var b = a.charCodeAt(0), c = a.charCodeAt(1), d = a.charCodeAt(2), e = a.charCodeAt(3), f = a.charCodeAt(4), g = a.charCodeAt(5), h = a.charCodeAt(6);
                a = a.charCodeAt(7);
                jspb.utils.split64Low = b + (c << 8) + (d << 16) + (e << 24) >>> 0;
                jspb.utils.split64High = f + (g << 8) + (h << 16) + (a << 24) >>> 0;
            };
            jspb.utils.joinUint64 = function(a, b) {
                return b * jspb.BinaryConstants.TWO_TO_32 + a;
            };
            jspb.utils.joinInt64 = function(a, b) {
                var c = b & 2147483648;
                c && (a = ~a + 1 >>> 0, b = ~b >>> 0, 0 == a && (b = b + 1 >>> 0));
                var d = jspb.utils.joinUint64(a, b);
                return c ? -d : d;
            };
            jspb.utils.joinZigzag64 = function(a, b) {
                var c = a & 1;
                a = (a >>> 1 | b << 31) >>> 0;
                b >>>= 1;
                c && (a = a + 1 >>> 0, 0 == a && (b = b + 1 >>> 0));
                var d = jspb.utils.joinUint64(a, b);
                return c ? -d : d;
            };
            jspb.utils.joinFloat32 = function(a, b) {
                var c = 2 * (a >> 31) + 1, d = a >>> 23 & 255, e = a & 8388607;
                return 255 == d ? e ? NaN : Infinity * c : 0 == d ? c * Math.pow(2, -149) * e : c * Math.pow(2, d - 150) * (e + Math.pow(2, 23));
            };
            jspb.utils.joinFloat64 = function(a, b) {
                var c = 2 * (b >> 31) + 1, d = b >>> 20 & 2047, e = jspb.BinaryConstants.TWO_TO_32 * (b & 1048575) + a;
                return 2047 == d ? e ? NaN : Infinity * c : 0 == d ? c * Math.pow(2, -1074) * e : c * Math.pow(2, d - 1075) * (e + jspb.BinaryConstants.TWO_TO_52);
            };
            jspb.utils.joinHash64 = function(a, b) {
                return String.fromCharCode(a >>> 0 & 255, a >>> 8 & 255, a >>> 16 & 255, a >>> 24 & 255, b >>> 0 & 255, b >>> 8 & 255, b >>> 16 & 255, b >>> 24 & 255);
            };
            jspb.utils.DIGITS = "0123456789abcdef".split("");
            jspb.utils.joinUnsignedDecimalString = function(a, b) {
                function c(a) {
                    for (var b = 1e7, c = 0; 7 > c; c++) {
                        var b = b / 10, d = a / b % 10 >>> 0;
                        if (0 != d || h) h = !0, k += g[d];
                    }
                }
                if (2097151 >= b) return "" + (jspb.BinaryConstants.TWO_TO_32 * b + a);
                var d = (a >>> 24 | b << 8) >>> 0 & 16777215, e = b >> 16 & 65535, f = (a & 16777215) + 6777216 * d + 6710656 * e, d = d + 8147497 * e, e = 2 * e;
                1e7 <= f && (d += Math.floor(f / 1e7), f %= 1e7);
                1e7 <= d && (e += Math.floor(d / 1e7), d %= 1e7);
                var g = jspb.utils.DIGITS, h = !1, k = "";
                (e || h) && c(e);
                (d || h) && c(d);
                (f || h) && c(f);
                return k;
            };
            jspb.utils.joinSignedDecimalString = function(a, b) {
                var c = b & 2147483648;
                c && (a = ~a + 1 >>> 0, b = ~b + (0 == a ? 1 : 0) >>> 0);
                var d = jspb.utils.joinUnsignedDecimalString(a, b);
                return c ? "-" + d : d;
            };
            jspb.utils.hash64ToDecimalString = function(a, b) {
                jspb.utils.splitHash64(a);
                var c = jspb.utils.split64Low, d = jspb.utils.split64High;
                return b ? jspb.utils.joinSignedDecimalString(c, d) : jspb.utils.joinUnsignedDecimalString(c, d);
            };
            jspb.utils.hash64ArrayToDecimalStrings = function(a, b) {
                for (var c = Array(a.length), d = 0; d < a.length; d++) c[d] = jspb.utils.hash64ToDecimalString(a[d], b);
                return c;
            };
            jspb.utils.decimalStringToHash64 = function(a) {
                function b(a, b) {
                    for (var c = 0; 8 > c && (1 !== a || 0 < b); c++) {
                        var d = a * e[c] + b;
                        e[c] = d & 255;
                        b = d >>> 8;
                    }
                }
                function c() {
                    for (var a = 0; 8 > a; a++) e[a] = ~e[a] & 255;
                }
                goog.asserts.assert(0 < a.length);
                var d = !1;
                "-" === a[0] && (d = !0, a = a.slice(1));
                for (var e = [ 0, 0, 0, 0, 0, 0, 0, 0 ], f = 0; f < a.length; f++) b(10, jspb.utils.DIGITS.indexOf(a[f]));
                d && (c(), b(1, 1));
                return goog.crypt.byteArrayToString(e);
            };
            jspb.utils.splitDecimalString = function(a) {
                jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));
            };
            jspb.utils.hash64ToHexString = function(a) {
                var b = Array(18);
                b[0] = "0";
                b[1] = "x";
                for (var c = 0; 8 > c; c++) {
                    var d = a.charCodeAt(7 - c);
                    b[2 * c + 2] = jspb.utils.DIGITS[d >> 4];
                    b[2 * c + 3] = jspb.utils.DIGITS[d & 15];
                }
                return b.join("");
            };
            jspb.utils.hexStringToHash64 = function(a) {
                a = a.toLowerCase();
                goog.asserts.assert(18 == a.length);
                goog.asserts.assert("0" == a[0]);
                goog.asserts.assert("x" == a[1]);
                for (var b = "", c = 0; 8 > c; c++) var d = jspb.utils.DIGITS.indexOf(a[2 * c + 2]), e = jspb.utils.DIGITS.indexOf(a[2 * c + 3]), b = String.fromCharCode(16 * d + e) + b;
                return b;
            };
            jspb.utils.hash64ToNumber = function(a, b) {
                jspb.utils.splitHash64(a);
                var c = jspb.utils.split64Low, d = jspb.utils.split64High;
                return b ? jspb.utils.joinInt64(c, d) : jspb.utils.joinUint64(c, d);
            };
            jspb.utils.numberToHash64 = function(a) {
                jspb.utils.splitInt64(a);
                return jspb.utils.joinHash64(jspb.utils.split64Low, jspb.utils.split64High);
            };
            jspb.utils.countVarints = function(a, b, c) {
                for (var d = 0, e = b; e < c; e++) d += a[e] >> 7;
                return c - b - d;
            };
            jspb.utils.countVarintFields = function(a, b, c, d) {
                var e = 0;
                d = 8 * d + jspb.BinaryConstants.WireType.VARINT;
                if (128 > d) for (;b < c && a[b++] == d; ) for (e++; ;) {
                    var f = a[b++];
                    if (0 == (f & 128)) break;
                } else for (;b < c; ) {
                    for (f = d; 128 < f; ) {
                        if (a[b] != (f & 127 | 128)) return e;
                        b++;
                        f >>= 7;
                    }
                    if (a[b++] != f) break;
                    for (e++; f = a[b++], 0 != (f & 128); ) ;
                }
                return e;
            };
            jspb.utils.countFixedFields_ = function(a, b, c, d, e) {
                var f = 0;
                if (128 > d) for (;b < c && a[b++] == d; ) f++, b += e; else for (;b < c; ) {
                    for (var g = d; 128 < g; ) {
                        if (a[b++] != (g & 127 | 128)) return f;
                        g >>= 7;
                    }
                    if (a[b++] != g) break;
                    f++;
                    b += e;
                }
                return f;
            };
            jspb.utils.countFixed32Fields = function(a, b, c, d) {
                return jspb.utils.countFixedFields_(a, b, c, 8 * d + jspb.BinaryConstants.WireType.FIXED32, 4);
            };
            jspb.utils.countFixed64Fields = function(a, b, c, d) {
                return jspb.utils.countFixedFields_(a, b, c, 8 * d + jspb.BinaryConstants.WireType.FIXED64, 8);
            };
            jspb.utils.countDelimitedFields = function(a, b, c, d) {
                var e = 0;
                for (d = 8 * d + jspb.BinaryConstants.WireType.DELIMITED; b < c; ) {
                    for (var f = d; 128 < f; ) {
                        if (a[b++] != (f & 127 | 128)) return e;
                        f >>= 7;
                    }
                    if (a[b++] != f) break;
                    e++;
                    for (var g = 0, h = 1; f = a[b++], g += (f & 127) * h, h *= 128, 0 != (f & 128); ) ;
                    b += g;
                }
                return e;
            };
            jspb.utils.debugBytesToTextFormat = function(a) {
                var b = '"';
                if (a) {
                    a = jspb.utils.byteSourceToUint8Array(a);
                    for (var c = 0; c < a.length; c++) b += "\\x", 16 > a[c] && (b += "0"), b += a[c].toString(16);
                }
                return b + '"';
            };
            jspb.utils.debugScalarToTextFormat = function(a) {
                return goog.isString(a) ? goog.string.quote(a) : a.toString();
            };
            jspb.utils.stringToByteArray = function(a) {
                for (var b = new Uint8Array(a.length), c = 0; c < a.length; c++) {
                    var d = a.charCodeAt(c);
                    if (255 < d) throw Error("Conversion error: string contains codepoint outside of byte range");
                    b[c] = d;
                }
                return b;
            };
            jspb.utils.byteSourceToUint8Array = function(a) {
                if (a.constructor === Uint8Array) return a;
                if (a.constructor === ArrayBuffer || a.constructor === Buffer || a.constructor === Array) return new Uint8Array(a);
                if (a.constructor === String) return goog.crypt.base64.decodeStringToUint8Array(a);
                goog.asserts.fail("Type not convertible to Uint8Array.");
                return new Uint8Array(0);
            };
            jspb.BinaryEncoder = function() {
                this.buffer_ = [];
            };
            jspb.BinaryEncoder.prototype.length = function() {
                return this.buffer_.length;
            };
            jspb.BinaryEncoder.prototype.end = function() {
                var a = this.buffer_;
                this.buffer_ = [];
                return a;
            };
            jspb.BinaryEncoder.prototype.writeSplitVarint64 = function(a, b) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(b == Math.floor(b));
                goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
                for (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32); 0 < b || 127 < a; ) this.buffer_.push(a & 127 | 128), 
                a = (a >>> 7 | b << 25) >>> 0, b >>>= 7;
                this.buffer_.push(a);
            };
            jspb.BinaryEncoder.prototype.writeSplitFixed64 = function(a, b) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(b == Math.floor(b));
                goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
                goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32);
                this.writeUint32(a);
                this.writeUint32(b);
            };
            jspb.BinaryEncoder.prototype.writeUnsignedVarint32 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                for (goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32); 127 < a; ) this.buffer_.push(a & 127 | 128), 
                a >>>= 7;
                this.buffer_.push(a);
            };
            jspb.BinaryEncoder.prototype.writeSignedVarint32 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
                if (0 <= a) this.writeUnsignedVarint32(a); else {
                    for (var b = 0; 9 > b; b++) this.buffer_.push(a & 127 | 128), a >>= 7;
                    this.buffer_.push(1);
                }
            };
            jspb.BinaryEncoder.prototype.writeUnsignedVarint64 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_64);
                jspb.utils.splitInt64(a);
                this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeSignedVarint64 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
                jspb.utils.splitInt64(a);
                this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeZigzagVarint32 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
                this.writeUnsignedVarint32((a << 1 ^ a >> 31) >>> 0);
            };
            jspb.BinaryEncoder.prototype.writeZigzagVarint64 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
                jspb.utils.splitZigzag64(a);
                this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeZigzagVarint64String = function(a) {
                this.writeZigzagVarint64(parseInt(a, 10));
            };
            jspb.BinaryEncoder.prototype.writeUint8 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(0 <= a && 256 > a);
                this.buffer_.push(a >>> 0 & 255);
            };
            jspb.BinaryEncoder.prototype.writeUint16 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(0 <= a && 65536 > a);
                this.buffer_.push(a >>> 0 & 255);
                this.buffer_.push(a >>> 8 & 255);
            };
            jspb.BinaryEncoder.prototype.writeUint32 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
                this.buffer_.push(a >>> 0 & 255);
                this.buffer_.push(a >>> 8 & 255);
                this.buffer_.push(a >>> 16 & 255);
                this.buffer_.push(a >>> 24 & 255);
            };
            jspb.BinaryEncoder.prototype.writeUint64 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_64);
                jspb.utils.splitUint64(a);
                this.writeUint32(jspb.utils.split64Low);
                this.writeUint32(jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeInt8 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(-128 <= a && 128 > a);
                this.buffer_.push(a >>> 0 & 255);
            };
            jspb.BinaryEncoder.prototype.writeInt16 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(-32768 <= a && 32768 > a);
                this.buffer_.push(a >>> 0 & 255);
                this.buffer_.push(a >>> 8 & 255);
            };
            jspb.BinaryEncoder.prototype.writeInt32 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
                this.buffer_.push(a >>> 0 & 255);
                this.buffer_.push(a >>> 8 & 255);
                this.buffer_.push(a >>> 16 & 255);
                this.buffer_.push(a >>> 24 & 255);
            };
            jspb.BinaryEncoder.prototype.writeInt64 = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
                jspb.utils.splitInt64(a);
                this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeInt64String = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(+a >= -jspb.BinaryConstants.TWO_TO_63 && +a < jspb.BinaryConstants.TWO_TO_63);
                jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));
                this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeFloat = function(a) {
                goog.asserts.assert(a >= -jspb.BinaryConstants.FLOAT32_MAX && a <= jspb.BinaryConstants.FLOAT32_MAX);
                jspb.utils.splitFloat32(a);
                this.writeUint32(jspb.utils.split64Low);
            };
            jspb.BinaryEncoder.prototype.writeDouble = function(a) {
                goog.asserts.assert(a >= -jspb.BinaryConstants.FLOAT64_MAX && a <= jspb.BinaryConstants.FLOAT64_MAX);
                jspb.utils.splitFloat64(a);
                this.writeUint32(jspb.utils.split64Low);
                this.writeUint32(jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeBool = function(a) {
                goog.asserts.assert(goog.isBoolean(a) || goog.isNumber(a));
                this.buffer_.push(a ? 1 : 0);
            };
            jspb.BinaryEncoder.prototype.writeEnum = function(a) {
                goog.asserts.assert(a == Math.floor(a));
                goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
                this.writeSignedVarint32(a);
            };
            jspb.BinaryEncoder.prototype.writeBytes = function(a) {
                this.buffer_.push.apply(this.buffer_, a);
            };
            jspb.BinaryEncoder.prototype.writeVarintHash64 = function(a) {
                jspb.utils.splitHash64(a);
                this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeFixedHash64 = function(a) {
                jspb.utils.splitHash64(a);
                this.writeUint32(jspb.utils.split64Low);
                this.writeUint32(jspb.utils.split64High);
            };
            jspb.BinaryEncoder.prototype.writeString = function(a) {
                for (var b = this.buffer_.length, c = 0; c < a.length; c++) {
                    var d = a.charCodeAt(c);
                    if (128 > d) this.buffer_.push(d); else if (2048 > d) this.buffer_.push(d >> 6 | 192), 
                    this.buffer_.push(d & 63 | 128); else if (65536 > d) if (55296 <= d && 56319 >= d && c + 1 < a.length) {
                        var e = a.charCodeAt(c + 1);
                        56320 <= e && 57343 >= e && (d = 1024 * (d - 55296) + e - 56320 + 65536, this.buffer_.push(d >> 18 | 240), 
                        this.buffer_.push(d >> 12 & 63 | 128), this.buffer_.push(d >> 6 & 63 | 128), this.buffer_.push(d & 63 | 128), 
                        c++);
                    } else this.buffer_.push(d >> 12 | 224), this.buffer_.push(d >> 6 & 63 | 128), this.buffer_.push(d & 63 | 128);
                }
                return this.buffer_.length - b;
            };
            jspb.BinaryWriter = function() {
                this.blocks_ = [];
                this.totalLength_ = 0;
                this.encoder_ = new jspb.BinaryEncoder();
                this.bookmarks_ = [];
            };
            jspb.BinaryWriter.prototype.appendUint8Array_ = function(a) {
                var b = this.encoder_.end();
                this.blocks_.push(b);
                this.blocks_.push(a);
                this.totalLength_ += b.length + a.length;
            };
            jspb.BinaryWriter.prototype.beginDelimited_ = function(a) {
                this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                a = this.encoder_.end();
                this.blocks_.push(a);
                this.totalLength_ += a.length;
                a.push(this.totalLength_);
                return a;
            };
            jspb.BinaryWriter.prototype.endDelimited_ = function(a) {
                var b = a.pop(), b = this.totalLength_ + this.encoder_.length() - b;
                for (goog.asserts.assert(0 <= b); 127 < b; ) a.push(b & 127 | 128), b >>>= 7, this.totalLength_++;
                a.push(b);
                this.totalLength_++;
            };
            jspb.BinaryWriter.prototype.writeSerializedMessage = function(a, b, c) {
                this.appendUint8Array_(a.subarray(b, c));
            };
            jspb.BinaryWriter.prototype.maybeWriteSerializedMessage = function(a, b, c) {
                null != a && null != b && null != c && this.writeSerializedMessage(a, b, c);
            };
            jspb.BinaryWriter.prototype.reset = function() {
                this.blocks_ = [];
                this.encoder_.end();
                this.totalLength_ = 0;
                this.bookmarks_ = [];
            };
            jspb.BinaryWriter.prototype.getResultBuffer = function() {
                goog.asserts.assert(0 == this.bookmarks_.length);
                for (var a = new Uint8Array(this.totalLength_ + this.encoder_.length()), b = this.blocks_, c = b.length, d = 0, e = 0; e < c; e++) {
                    var f = b[e];
                    a.set(f, d);
                    d += f.length;
                }
                b = this.encoder_.end();
                a.set(b, d);
                d += b.length;
                goog.asserts.assert(d == a.length);
                this.blocks_ = [ a ];
                return a;
            };
            jspb.BinaryWriter.prototype.getResultBase64String = function(a) {
                return goog.crypt.base64.encodeByteArray(this.getResultBuffer(), a);
            };
            jspb.BinaryWriter.prototype.beginSubMessage = function(a) {
                this.bookmarks_.push(this.beginDelimited_(a));
            };
            jspb.BinaryWriter.prototype.endSubMessage = function() {
                goog.asserts.assert(0 <= this.bookmarks_.length);
                this.endDelimited_(this.bookmarks_.pop());
            };
            jspb.BinaryWriter.prototype.writeFieldHeader_ = function(a, b) {
                goog.asserts.assert(1 <= a && a == Math.floor(a));
                this.encoder_.writeUnsignedVarint32(8 * a + b);
            };
            jspb.BinaryWriter.prototype.writeAny = function(a, b, c) {
                var d = jspb.BinaryConstants.FieldType;
                switch (a) {
                  case d.DOUBLE:
                    this.writeDouble(b, c);
                    break;

                  case d.FLOAT:
                    this.writeFloat(b, c);
                    break;

                  case d.INT64:
                    this.writeInt64(b, c);
                    break;

                  case d.UINT64:
                    this.writeUint64(b, c);
                    break;

                  case d.INT32:
                    this.writeInt32(b, c);
                    break;

                  case d.FIXED64:
                    this.writeFixed64(b, c);
                    break;

                  case d.FIXED32:
                    this.writeFixed32(b, c);
                    break;

                  case d.BOOL:
                    this.writeBool(b, c);
                    break;

                  case d.STRING:
                    this.writeString(b, c);
                    break;

                  case d.GROUP:
                    goog.asserts.fail("Group field type not supported in writeAny()");
                    break;

                  case d.MESSAGE:
                    goog.asserts.fail("Message field type not supported in writeAny()");
                    break;

                  case d.BYTES:
                    this.writeBytes(b, c);
                    break;

                  case d.UINT32:
                    this.writeUint32(b, c);
                    break;

                  case d.ENUM:
                    this.writeEnum(b, c);
                    break;

                  case d.SFIXED32:
                    this.writeSfixed32(b, c);
                    break;

                  case d.SFIXED64:
                    this.writeSfixed64(b, c);
                    break;

                  case d.SINT32:
                    this.writeSint32(b, c);
                    break;

                  case d.SINT64:
                    this.writeSint64(b, c);
                    break;

                  case d.FHASH64:
                    this.writeFixedHash64(b, c);
                    break;

                  case d.VHASH64:
                    this.writeVarintHash64(b, c);
                    break;

                  default:
                    goog.asserts.fail("Invalid field type in writeAny()");
                }
            };
            jspb.BinaryWriter.prototype.writeUnsignedVarint32_ = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint32(b));
            };
            jspb.BinaryWriter.prototype.writeSignedVarint32_ = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
            };
            jspb.BinaryWriter.prototype.writeUnsignedVarint64_ = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint64(b));
            };
            jspb.BinaryWriter.prototype.writeSignedVarint64_ = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint64(b));
            };
            jspb.BinaryWriter.prototype.writeZigzagVarint32_ = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint32(b));
            };
            jspb.BinaryWriter.prototype.writeZigzagVarint64_ = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64(b));
            };
            jspb.BinaryWriter.prototype.writeZigzagVarint64String_ = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64String(b));
            };
            jspb.BinaryWriter.prototype.writeInt32 = function(a, b) {
                null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), 
                this.writeSignedVarint32_(a, b));
            };
            jspb.BinaryWriter.prototype.writeInt32String = function(a, b) {
                if (null != b) {
                    var c = parseInt(b, 10);
                    goog.asserts.assert(c >= -jspb.BinaryConstants.TWO_TO_31 && c < jspb.BinaryConstants.TWO_TO_31);
                    this.writeSignedVarint32_(a, c);
                }
            };
            jspb.BinaryWriter.prototype.writeInt64 = function(a, b) {
                null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), 
                this.writeSignedVarint64_(a, b));
            };
            jspb.BinaryWriter.prototype.writeInt64String = function(a, b) {
                if (null != b) {
                    var c = jspb.arith.Int64.fromString(b);
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT);
                    this.encoder_.writeSplitVarint64(c.lo, c.hi);
                }
            };
            jspb.BinaryWriter.prototype.writeUint32 = function(a, b) {
                null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), 
                this.writeUnsignedVarint32_(a, b));
            };
            jspb.BinaryWriter.prototype.writeUint32String = function(a, b) {
                if (null != b) {
                    var c = parseInt(b, 10);
                    goog.asserts.assert(0 <= c && c < jspb.BinaryConstants.TWO_TO_32);
                    this.writeUnsignedVarint32_(a, c);
                }
            };
            jspb.BinaryWriter.prototype.writeUint64 = function(a, b) {
                null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), 
                this.writeUnsignedVarint64_(a, b));
            };
            jspb.BinaryWriter.prototype.writeUint64String = function(a, b) {
                if (null != b) {
                    var c = jspb.arith.UInt64.fromString(b);
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT);
                    this.encoder_.writeSplitVarint64(c.lo, c.hi);
                }
            };
            jspb.BinaryWriter.prototype.writeSint32 = function(a, b) {
                null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), 
                this.writeZigzagVarint32_(a, b));
            };
            jspb.BinaryWriter.prototype.writeSint64 = function(a, b) {
                null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), 
                this.writeZigzagVarint64_(a, b));
            };
            jspb.BinaryWriter.prototype.writeSint64String = function(a, b) {
                null != b && (goog.asserts.assert(+b >= -jspb.BinaryConstants.TWO_TO_63 && +b < jspb.BinaryConstants.TWO_TO_63), 
                this.writeZigzagVarint64String_(a, b));
            };
            jspb.BinaryWriter.prototype.writeFixed32 = function(a, b) {
                null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), 
                this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeUint32(b));
            };
            jspb.BinaryWriter.prototype.writeFixed64 = function(a, b) {
                null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), 
                this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeUint64(b));
            };
            jspb.BinaryWriter.prototype.writeFixed64String = function(a, b) {
                if (null != b) {
                    var c = jspb.arith.UInt64.fromString(b);
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64);
                    this.encoder_.writeSplitFixed64(c.lo, c.hi);
                }
            };
            jspb.BinaryWriter.prototype.writeSfixed32 = function(a, b) {
                null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), 
                this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeInt32(b));
            };
            jspb.BinaryWriter.prototype.writeSfixed64 = function(a, b) {
                null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), 
                this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeInt64(b));
            };
            jspb.BinaryWriter.prototype.writeSfixed64String = function(a, b) {
                if (null != b) {
                    var c = jspb.arith.Int64.fromString(b);
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64);
                    this.encoder_.writeSplitFixed64(c.lo, c.hi);
                }
            };
            jspb.BinaryWriter.prototype.writeFloat = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), 
                this.encoder_.writeFloat(b));
            };
            jspb.BinaryWriter.prototype.writeDouble = function(a, b) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), 
                this.encoder_.writeDouble(b));
            };
            jspb.BinaryWriter.prototype.writeBool = function(a, b) {
                null != b && (goog.asserts.assert(goog.isBoolean(b) || goog.isNumber(b)), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), 
                this.encoder_.writeBool(b));
            };
            jspb.BinaryWriter.prototype.writeEnum = function(a, b) {
                null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), 
                this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
            };
            jspb.BinaryWriter.prototype.writeString = function(a, b) {
                if (null != b) {
                    var c = this.beginDelimited_(a);
                    this.encoder_.writeString(b);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writeBytes = function(a, b) {
                if (null != b) {
                    var c = jspb.utils.byteSourceToUint8Array(b);
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(c.length);
                    this.appendUint8Array_(c);
                }
            };
            jspb.BinaryWriter.prototype.writeMessage = function(a, b, c) {
                null != b && (a = this.beginDelimited_(a), c(b, this), this.endDelimited_(a));
            };
            jspb.BinaryWriter.prototype.writeGroup = function(a, b, c) {
                null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.START_GROUP), 
                c(b, this), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.END_GROUP));
            };
            jspb.BinaryWriter.prototype.writeFixedHash64 = function(a, b) {
                null != b && (goog.asserts.assert(8 == b.length), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), 
                this.encoder_.writeFixedHash64(b));
            };
            jspb.BinaryWriter.prototype.writeVarintHash64 = function(a, b) {
                null != b && (goog.asserts.assert(8 == b.length), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), 
                this.encoder_.writeVarintHash64(b));
            };
            jspb.BinaryWriter.prototype.writeRepeatedInt32 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeSignedVarint32_(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedInt32String = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeInt32String(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedInt64 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeSignedVarint64_(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedInt64String = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeInt64String(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedUint32 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeUnsignedVarint32_(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedUint32String = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeUint32String(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedUint64 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeUnsignedVarint64_(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedUint64String = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeUint64String(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedSint32 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeZigzagVarint32_(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedSint64 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeZigzagVarint64_(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedSint64String = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeZigzagVarint64String_(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedFixed32 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeFixed32(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedFixed64 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeFixed64(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedFixed64String = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeFixed64String(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedSfixed32 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeSfixed32(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedSfixed64 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeSfixed64(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedSfixed64String = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeSfixed64String(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedFloat = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeFloat(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedDouble = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeDouble(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedBool = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeBool(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedEnum = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeEnum(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedString = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeString(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedBytes = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeBytes(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedMessage = function(a, b, c) {
                if (null != b) for (var d = 0; d < b.length; d++) {
                    var e = this.beginDelimited_(a);
                    c(b[d], this);
                    this.endDelimited_(e);
                }
            };
            jspb.BinaryWriter.prototype.writeRepeatedGroup = function(a, b, c) {
                if (null != b) for (var d = 0; d < b.length; d++) this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.START_GROUP), 
                c(b[d], this), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.END_GROUP);
            };
            jspb.BinaryWriter.prototype.writeRepeatedFixedHash64 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeFixedHash64(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writeRepeatedVarintHash64 = function(a, b) {
                if (null != b) for (var c = 0; c < b.length; c++) this.writeVarintHash64(a, b[c]);
            };
            jspb.BinaryWriter.prototype.writePackedInt32 = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeSignedVarint32(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedInt32String = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeSignedVarint32(parseInt(b[d], 10));
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedInt64 = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeSignedVarint64(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedInt64String = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) {
                        var e = jspb.arith.Int64.fromString(b[d]);
                        this.encoder_.writeSplitVarint64(e.lo, e.hi);
                    }
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedUint32 = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeUnsignedVarint32(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedUint32String = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeUnsignedVarint32(parseInt(b[d], 10));
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedUint64 = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeUnsignedVarint64(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedUint64String = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) {
                        var e = jspb.arith.UInt64.fromString(b[d]);
                        this.encoder_.writeSplitVarint64(e.lo, e.hi);
                    }
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedSint32 = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeZigzagVarint32(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedSint64 = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeZigzagVarint64(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedSint64String = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeZigzagVarint64(parseInt(b[d], 10));
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedFixed32 = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(4 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeUint32(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedFixed64 = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(8 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeUint64(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedFixed64String = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(8 * b.length);
                    for (var c = 0; c < b.length; c++) {
                        var d = jspb.arith.UInt64.fromString(b[c]);
                        this.encoder_.writeSplitFixed64(d.lo, d.hi);
                    }
                }
            };
            jspb.BinaryWriter.prototype.writePackedSfixed32 = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(4 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeInt32(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedSfixed64 = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(8 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeInt64(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedSfixed64String = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(8 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeInt64String(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedFloat = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(4 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeFloat(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedDouble = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(8 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeDouble(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedBool = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeBool(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedEnum = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeEnum(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryWriter.prototype.writePackedFixedHash64 = function(a, b) {
                if (null != b && b.length) {
                    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
                    this.encoder_.writeUnsignedVarint32(8 * b.length);
                    for (var c = 0; c < b.length; c++) this.encoder_.writeFixedHash64(b[c]);
                }
            };
            jspb.BinaryWriter.prototype.writePackedVarintHash64 = function(a, b) {
                if (null != b && b.length) {
                    for (var c = this.beginDelimited_(a), d = 0; d < b.length; d++) this.encoder_.writeVarintHash64(b[d]);
                    this.endDelimited_(c);
                }
            };
            jspb.BinaryIterator = function(a, b, c) {
                this.elements_ = this.nextMethod_ = this.decoder_ = null;
                this.cursor_ = 0;
                this.nextValue_ = null;
                this.atEnd_ = !0;
                this.init_(a, b, c);
            };
            jspb.BinaryIterator.prototype.init_ = function(a, b, c) {
                a && b && (this.decoder_ = a, this.nextMethod_ = b);
                this.elements_ = c || null;
                this.cursor_ = 0;
                this.nextValue_ = null;
                this.atEnd_ = !this.decoder_ && !this.elements_;
                this.next();
            };
            jspb.BinaryIterator.instanceCache_ = [];
            jspb.BinaryIterator.alloc = function(a, b, c) {
                if (jspb.BinaryIterator.instanceCache_.length) {
                    var d = jspb.BinaryIterator.instanceCache_.pop();
                    d.init_(a, b, c);
                    return d;
                }
                return new jspb.BinaryIterator(a, b, c);
            };
            jspb.BinaryIterator.prototype.free = function() {
                this.clear();
                100 > jspb.BinaryIterator.instanceCache_.length && jspb.BinaryIterator.instanceCache_.push(this);
            };
            jspb.BinaryIterator.prototype.clear = function() {
                this.decoder_ && this.decoder_.free();
                this.elements_ = this.nextMethod_ = this.decoder_ = null;
                this.cursor_ = 0;
                this.nextValue_ = null;
                this.atEnd_ = !0;
            };
            jspb.BinaryIterator.prototype.get = function() {
                return this.nextValue_;
            };
            jspb.BinaryIterator.prototype.atEnd = function() {
                return this.atEnd_;
            };
            jspb.BinaryIterator.prototype.next = function() {
                var a = this.nextValue_;
                this.decoder_ ? this.decoder_.atEnd() ? (this.nextValue_ = null, this.atEnd_ = !0) : this.nextValue_ = this.nextMethod_.call(this.decoder_) : this.elements_ && (this.cursor_ == this.elements_.length ? (this.nextValue_ = null, 
                this.atEnd_ = !0) : this.nextValue_ = this.elements_[this.cursor_++]);
                return a;
            };
            jspb.BinaryDecoder = function(a, b, c) {
                this.bytes_ = null;
                this.tempHigh_ = this.tempLow_ = this.cursor_ = this.end_ = this.start_ = 0;
                this.error_ = !1;
                a && this.setBlock(a, b, c);
            };
            jspb.BinaryDecoder.instanceCache_ = [];
            jspb.BinaryDecoder.alloc = function(a, b, c) {
                if (jspb.BinaryDecoder.instanceCache_.length) {
                    var d = jspb.BinaryDecoder.instanceCache_.pop();
                    a && d.setBlock(a, b, c);
                    return d;
                }
                return new jspb.BinaryDecoder(a, b, c);
            };
            jspb.BinaryDecoder.prototype.free = function() {
                this.clear();
                100 > jspb.BinaryDecoder.instanceCache_.length && jspb.BinaryDecoder.instanceCache_.push(this);
            };
            jspb.BinaryDecoder.prototype.clone = function() {
                return jspb.BinaryDecoder.alloc(this.bytes_, this.start_, this.end_ - this.start_);
            };
            jspb.BinaryDecoder.prototype.clear = function() {
                this.bytes_ = null;
                this.cursor_ = this.end_ = this.start_ = 0;
                this.error_ = !1;
            };
            jspb.BinaryDecoder.prototype.getBuffer = function() {
                return this.bytes_;
            };
            jspb.BinaryDecoder.prototype.setBlock = function(a, b, c) {
                this.bytes_ = jspb.utils.byteSourceToUint8Array(a);
                this.start_ = goog.isDef(b) ? b : 0;
                this.end_ = goog.isDef(c) ? this.start_ + c : this.bytes_.length;
                this.cursor_ = this.start_;
            };
            jspb.BinaryDecoder.prototype.getEnd = function() {
                return this.end_;
            };
            jspb.BinaryDecoder.prototype.setEnd = function(a) {
                this.end_ = a;
            };
            jspb.BinaryDecoder.prototype.reset = function() {
                this.cursor_ = this.start_;
            };
            jspb.BinaryDecoder.prototype.getCursor = function() {
                return this.cursor_;
            };
            jspb.BinaryDecoder.prototype.setCursor = function(a) {
                this.cursor_ = a;
            };
            jspb.BinaryDecoder.prototype.advance = function(a) {
                this.cursor_ += a;
                goog.asserts.assert(this.cursor_ <= this.end_);
            };
            jspb.BinaryDecoder.prototype.atEnd = function() {
                return this.cursor_ == this.end_;
            };
            jspb.BinaryDecoder.prototype.pastEnd = function() {
                return this.cursor_ > this.end_;
            };
            jspb.BinaryDecoder.prototype.getError = function() {
                return this.error_ || 0 > this.cursor_ || this.cursor_ > this.end_;
            };
            jspb.BinaryDecoder.prototype.readSplitVarint64_ = function() {
                for (var a, b = 0, c, d = 0; 4 > d; d++) if (a = this.bytes_[this.cursor_++], b |= (a & 127) << 7 * d, 
                128 > a) {
                    this.tempLow_ = b >>> 0;
                    this.tempHigh_ = 0;
                    return;
                }
                a = this.bytes_[this.cursor_++];
                b |= (a & 127) << 28;
                c = 0 | (a & 127) >> 4;
                if (128 > a) this.tempLow_ = b >>> 0, this.tempHigh_ = c >>> 0; else {
                    for (d = 0; 5 > d; d++) if (a = this.bytes_[this.cursor_++], c |= (a & 127) << 7 * d + 3, 
                    128 > a) {
                        this.tempLow_ = b >>> 0;
                        this.tempHigh_ = c >>> 0;
                        return;
                    }
                    goog.asserts.fail("Failed to read varint, encoding is invalid.");
                    this.error_ = !0;
                }
            };
            jspb.BinaryDecoder.prototype.skipVarint = function() {
                for (;this.bytes_[this.cursor_] & 128; ) this.cursor_++;
                this.cursor_++;
            };
            jspb.BinaryDecoder.prototype.unskipVarint = function(a) {
                for (;128 < a; ) this.cursor_--, a >>>= 7;
                this.cursor_--;
            };
            jspb.BinaryDecoder.prototype.readUnsignedVarint32 = function() {
                var a, b = this.bytes_;
                a = b[this.cursor_ + 0];
                var c = a & 127;
                if (128 > a) return this.cursor_ += 1, goog.asserts.assert(this.cursor_ <= this.end_), 
                c;
                a = b[this.cursor_ + 1];
                c |= (a & 127) << 7;
                if (128 > a) return this.cursor_ += 2, goog.asserts.assert(this.cursor_ <= this.end_), 
                c;
                a = b[this.cursor_ + 2];
                c |= (a & 127) << 14;
                if (128 > a) return this.cursor_ += 3, goog.asserts.assert(this.cursor_ <= this.end_), 
                c;
                a = b[this.cursor_ + 3];
                c |= (a & 127) << 21;
                if (128 > a) return this.cursor_ += 4, goog.asserts.assert(this.cursor_ <= this.end_), 
                c;
                a = b[this.cursor_ + 4];
                c |= (a & 15) << 28;
                if (128 > a) return this.cursor_ += 5, goog.asserts.assert(this.cursor_ <= this.end_), 
                c >>> 0;
                this.cursor_ += 5;
                128 <= b[this.cursor_++] && 128 <= b[this.cursor_++] && 128 <= b[this.cursor_++] && 128 <= b[this.cursor_++] && 128 <= b[this.cursor_++] && goog.asserts.assert(!1);
                goog.asserts.assert(this.cursor_ <= this.end_);
                return c;
            };
            jspb.BinaryDecoder.prototype.readSignedVarint32 = jspb.BinaryDecoder.prototype.readUnsignedVarint32;
            jspb.BinaryDecoder.prototype.readUnsignedVarint32String = function() {
                return this.readUnsignedVarint32().toString();
            };
            jspb.BinaryDecoder.prototype.readSignedVarint32String = function() {
                return this.readSignedVarint32().toString();
            };
            jspb.BinaryDecoder.prototype.readZigzagVarint32 = function() {
                var a = this.readUnsignedVarint32();
                return a >>> 1 ^ -(a & 1);
            };
            jspb.BinaryDecoder.prototype.readUnsignedVarint64 = function() {
                this.readSplitVarint64_();
                return jspb.utils.joinUint64(this.tempLow_, this.tempHigh_);
            };
            jspb.BinaryDecoder.prototype.readUnsignedVarint64String = function() {
                this.readSplitVarint64_();
                return jspb.utils.joinUnsignedDecimalString(this.tempLow_, this.tempHigh_);
            };
            jspb.BinaryDecoder.prototype.readSignedVarint64 = function() {
                this.readSplitVarint64_();
                return jspb.utils.joinInt64(this.tempLow_, this.tempHigh_);
            };
            jspb.BinaryDecoder.prototype.readSignedVarint64String = function() {
                this.readSplitVarint64_();
                return jspb.utils.joinSignedDecimalString(this.tempLow_, this.tempHigh_);
            };
            jspb.BinaryDecoder.prototype.readZigzagVarint64 = function() {
                this.readSplitVarint64_();
                return jspb.utils.joinZigzag64(this.tempLow_, this.tempHigh_);
            };
            jspb.BinaryDecoder.prototype.readZigzagVarint64String = function() {
                return this.readZigzagVarint64().toString();
            };
            jspb.BinaryDecoder.prototype.readUint8 = function() {
                var a = this.bytes_[this.cursor_ + 0];
                this.cursor_ += 1;
                goog.asserts.assert(this.cursor_ <= this.end_);
                return a;
            };
            jspb.BinaryDecoder.prototype.readUint16 = function() {
                var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1];
                this.cursor_ += 2;
                goog.asserts.assert(this.cursor_ <= this.end_);
                return a << 0 | b << 8;
            };
            jspb.BinaryDecoder.prototype.readUint32 = function() {
                var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1], c = this.bytes_[this.cursor_ + 2], d = this.bytes_[this.cursor_ + 3];
                this.cursor_ += 4;
                goog.asserts.assert(this.cursor_ <= this.end_);
                return (a << 0 | b << 8 | c << 16 | d << 24) >>> 0;
            };
            jspb.BinaryDecoder.prototype.readUint64 = function() {
                var a = this.readUint32(), b = this.readUint32();
                return jspb.utils.joinUint64(a, b);
            };
            jspb.BinaryDecoder.prototype.readUint64String = function() {
                var a = this.readUint32(), b = this.readUint32();
                return jspb.utils.joinUnsignedDecimalString(a, b);
            };
            jspb.BinaryDecoder.prototype.readInt8 = function() {
                var a = this.bytes_[this.cursor_ + 0];
                this.cursor_ += 1;
                goog.asserts.assert(this.cursor_ <= this.end_);
                return a << 24 >> 24;
            };
            jspb.BinaryDecoder.prototype.readInt16 = function() {
                var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1];
                this.cursor_ += 2;
                goog.asserts.assert(this.cursor_ <= this.end_);
                return (a << 0 | b << 8) << 16 >> 16;
            };
            jspb.BinaryDecoder.prototype.readInt32 = function() {
                var a = this.bytes_[this.cursor_ + 0], b = this.bytes_[this.cursor_ + 1], c = this.bytes_[this.cursor_ + 2], d = this.bytes_[this.cursor_ + 3];
                this.cursor_ += 4;
                goog.asserts.assert(this.cursor_ <= this.end_);
                return a << 0 | b << 8 | c << 16 | d << 24;
            };
            jspb.BinaryDecoder.prototype.readInt64 = function() {
                var a = this.readUint32(), b = this.readUint32();
                return jspb.utils.joinInt64(a, b);
            };
            jspb.BinaryDecoder.prototype.readInt64String = function() {
                var a = this.readUint32(), b = this.readUint32();
                return jspb.utils.joinSignedDecimalString(a, b);
            };
            jspb.BinaryDecoder.prototype.readFloat = function() {
                var a = this.readUint32();
                return jspb.utils.joinFloat32(a, 0);
            };
            jspb.BinaryDecoder.prototype.readDouble = function() {
                var a = this.readUint32(), b = this.readUint32();
                return jspb.utils.joinFloat64(a, b);
            };
            jspb.BinaryDecoder.prototype.readBool = function() {
                return !!this.bytes_[this.cursor_++];
            };
            jspb.BinaryDecoder.prototype.readEnum = function() {
                return this.readSignedVarint32();
            };
            jspb.BinaryDecoder.prototype.readString = function(a) {
                var b = this.bytes_, c = this.cursor_;
                a = c + a;
                for (var d = [], e = ""; c < a; ) {
                    var f = b[c++];
                    if (128 > f) d.push(f); else if (192 > f) continue; else if (224 > f) {
                        var g = b[c++];
                        d.push((f & 31) << 6 | g & 63);
                    } else if (240 > f) {
                        var g = b[c++], h = b[c++];
                        d.push((f & 15) << 12 | (g & 63) << 6 | h & 63);
                    } else if (248 > f) {
                        var g = b[c++], h = b[c++], k = b[c++], f = (f & 7) << 18 | (g & 63) << 12 | (h & 63) << 6 | k & 63, f = f - 65536;
                        d.push((f >> 10 & 1023) + 55296, (f & 1023) + 56320);
                    }
                    8192 <= d.length && (e += String.fromCharCode.apply(null, d), d.length = 0);
                }
                e += goog.crypt.byteArrayToString(d);
                this.cursor_ = c;
                return e;
            };
            jspb.BinaryDecoder.prototype.readStringWithLength = function() {
                var a = this.readUnsignedVarint32();
                return this.readString(a);
            };
            jspb.BinaryDecoder.prototype.readBytes = function(a) {
                if (0 > a || this.cursor_ + a > this.bytes_.length) return this.error_ = !0, goog.asserts.fail("Invalid byte length!"), 
                new Uint8Array(0);
                var b = this.bytes_.subarray(this.cursor_, this.cursor_ + a);
                this.cursor_ += a;
                goog.asserts.assert(this.cursor_ <= this.end_);
                return b;
            };
            jspb.BinaryDecoder.prototype.readVarintHash64 = function() {
                this.readSplitVarint64_();
                return jspb.utils.joinHash64(this.tempLow_, this.tempHigh_);
            };
            jspb.BinaryDecoder.prototype.readFixedHash64 = function() {
                var a = this.bytes_, b = this.cursor_, c = a[b + 0], d = a[b + 1], e = a[b + 2], f = a[b + 3], g = a[b + 4], h = a[b + 5], k = a[b + 6], a = a[b + 7];
                this.cursor_ += 8;
                return String.fromCharCode(c, d, e, f, g, h, k, a);
            };
            jspb.BinaryReader = function(a, b, c) {
                this.decoder_ = jspb.BinaryDecoder.alloc(a, b, c);
                this.fieldCursor_ = this.decoder_.getCursor();
                this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
                this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
                this.error_ = !1;
                this.readCallbacks_ = null;
            };
            jspb.BinaryReader.instanceCache_ = [];
            jspb.BinaryReader.alloc = function(a, b, c) {
                if (jspb.BinaryReader.instanceCache_.length) {
                    var d = jspb.BinaryReader.instanceCache_.pop();
                    a && d.decoder_.setBlock(a, b, c);
                    return d;
                }
                return new jspb.BinaryReader(a, b, c);
            };
            jspb.BinaryReader.prototype.alloc = jspb.BinaryReader.alloc;
            jspb.BinaryReader.prototype.free = function() {
                this.decoder_.clear();
                this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
                this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
                this.error_ = !1;
                this.readCallbacks_ = null;
                100 > jspb.BinaryReader.instanceCache_.length && jspb.BinaryReader.instanceCache_.push(this);
            };
            jspb.BinaryReader.prototype.getFieldCursor = function() {
                return this.fieldCursor_;
            };
            jspb.BinaryReader.prototype.getCursor = function() {
                return this.decoder_.getCursor();
            };
            jspb.BinaryReader.prototype.getBuffer = function() {
                return this.decoder_.getBuffer();
            };
            jspb.BinaryReader.prototype.getFieldNumber = function() {
                return this.nextField_;
            };
            jspb.BinaryReader.prototype.getWireType = function() {
                return this.nextWireType_;
            };
            jspb.BinaryReader.prototype.isEndGroup = function() {
                return this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP;
            };
            jspb.BinaryReader.prototype.getError = function() {
                return this.error_ || this.decoder_.getError();
            };
            jspb.BinaryReader.prototype.setBlock = function(a, b, c) {
                this.decoder_.setBlock(a, b, c);
                this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
                this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
            };
            jspb.BinaryReader.prototype.reset = function() {
                this.decoder_.reset();
                this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
                this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
            };
            jspb.BinaryReader.prototype.advance = function(a) {
                this.decoder_.advance(a);
            };
            jspb.BinaryReader.prototype.nextField = function() {
                if (this.decoder_.atEnd()) return !1;
                if (this.getError()) return goog.asserts.fail("Decoder hit an error"), !1;
                this.fieldCursor_ = this.decoder_.getCursor();
                var a = this.decoder_.readUnsignedVarint32(), b = a >>> 3, a = a & 7;
                if (a != jspb.BinaryConstants.WireType.VARINT && a != jspb.BinaryConstants.WireType.FIXED32 && a != jspb.BinaryConstants.WireType.FIXED64 && a != jspb.BinaryConstants.WireType.DELIMITED && a != jspb.BinaryConstants.WireType.START_GROUP && a != jspb.BinaryConstants.WireType.END_GROUP) return goog.asserts.fail("Invalid wire type"), 
                this.error_ = !0, !1;
                this.nextField_ = b;
                this.nextWireType_ = a;
                return !0;
            };
            jspb.BinaryReader.prototype.unskipHeader = function() {
                this.decoder_.unskipVarint(this.nextField_ << 3 | this.nextWireType_);
            };
            jspb.BinaryReader.prototype.skipMatchingFields = function() {
                var a = this.nextField_;
                for (this.unskipHeader(); this.nextField() && this.getFieldNumber() == a; ) this.skipField();
                this.decoder_.atEnd() || this.unskipHeader();
            };
            jspb.BinaryReader.prototype.skipVarintField = function() {
                this.nextWireType_ != jspb.BinaryConstants.WireType.VARINT ? (goog.asserts.fail("Invalid wire type for skipVarintField"), 
                this.skipField()) : this.decoder_.skipVarint();
            };
            jspb.BinaryReader.prototype.skipDelimitedField = function() {
                if (this.nextWireType_ != jspb.BinaryConstants.WireType.DELIMITED) goog.asserts.fail("Invalid wire type for skipDelimitedField"), 
                this.skipField(); else {
                    var a = this.decoder_.readUnsignedVarint32();
                    this.decoder_.advance(a);
                }
            };
            jspb.BinaryReader.prototype.skipFixed32Field = function() {
                this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED32 ? (goog.asserts.fail("Invalid wire type for skipFixed32Field"), 
                this.skipField()) : this.decoder_.advance(4);
            };
            jspb.BinaryReader.prototype.skipFixed64Field = function() {
                this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED64 ? (goog.asserts.fail("Invalid wire type for skipFixed64Field"), 
                this.skipField()) : this.decoder_.advance(8);
            };
            jspb.BinaryReader.prototype.skipGroup = function() {
                var a = [ this.nextField_ ];
                do {
                    if (!this.nextField()) {
                        goog.asserts.fail("Unmatched start-group tag: stream EOF");
                        this.error_ = !0;
                        break;
                    }
                    if (this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP) a.push(this.nextField_); else if (this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP && this.nextField_ != a.pop()) {
                        goog.asserts.fail("Unmatched end-group tag");
                        this.error_ = !0;
                        break;
                    }
                } while (0 < a.length);
            };
            jspb.BinaryReader.prototype.skipField = function() {
                switch (this.nextWireType_) {
                  case jspb.BinaryConstants.WireType.VARINT:
                    this.skipVarintField();
                    break;

                  case jspb.BinaryConstants.WireType.FIXED64:
                    this.skipFixed64Field();
                    break;

                  case jspb.BinaryConstants.WireType.DELIMITED:
                    this.skipDelimitedField();
                    break;

                  case jspb.BinaryConstants.WireType.FIXED32:
                    this.skipFixed32Field();
                    break;

                  case jspb.BinaryConstants.WireType.START_GROUP:
                    this.skipGroup();
                    break;

                  default:
                    goog.asserts.fail("Invalid wire encoding for field.");
                }
            };
            jspb.BinaryReader.prototype.registerReadCallback = function(a, b) {
                goog.isNull(this.readCallbacks_) && (this.readCallbacks_ = {});
                goog.asserts.assert(!this.readCallbacks_[a]);
                this.readCallbacks_[a] = b;
            };
            jspb.BinaryReader.prototype.runReadCallback = function(a) {
                goog.asserts.assert(!goog.isNull(this.readCallbacks_));
                a = this.readCallbacks_[a];
                goog.asserts.assert(a);
                return a(this);
            };
            jspb.BinaryReader.prototype.readAny = function(a) {
                this.nextWireType_ = jspb.BinaryConstants.FieldTypeToWireType(a);
                var b = jspb.BinaryConstants.FieldType;
                switch (a) {
                  case b.DOUBLE:
                    return this.readDouble();

                  case b.FLOAT:
                    return this.readFloat();

                  case b.INT64:
                    return this.readInt64();

                  case b.UINT64:
                    return this.readUint64();

                  case b.INT32:
                    return this.readInt32();

                  case b.FIXED64:
                    return this.readFixed64();

                  case b.FIXED32:
                    return this.readFixed32();

                  case b.BOOL:
                    return this.readBool();

                  case b.STRING:
                    return this.readString();

                  case b.GROUP:
                    goog.asserts.fail("Group field type not supported in readAny()");

                  case b.MESSAGE:
                    goog.asserts.fail("Message field type not supported in readAny()");

                  case b.BYTES:
                    return this.readBytes();

                  case b.UINT32:
                    return this.readUint32();

                  case b.ENUM:
                    return this.readEnum();

                  case b.SFIXED32:
                    return this.readSfixed32();

                  case b.SFIXED64:
                    return this.readSfixed64();

                  case b.SINT32:
                    return this.readSint32();

                  case b.SINT64:
                    return this.readSint64();

                  case b.FHASH64:
                    return this.readFixedHash64();

                  case b.VHASH64:
                    return this.readVarintHash64();

                  default:
                    goog.asserts.fail("Invalid field type in readAny()");
                }
                return 0;
            };
            jspb.BinaryReader.prototype.readMessage = function(a, b) {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
                var c = this.decoder_.getEnd(), d = this.decoder_.readUnsignedVarint32(), d = this.decoder_.getCursor() + d;
                this.decoder_.setEnd(d);
                b(a, this);
                this.decoder_.setCursor(d);
                this.decoder_.setEnd(c);
            };
            jspb.BinaryReader.prototype.readGroup = function(a, b, c) {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP);
                goog.asserts.assert(this.nextField_ == a);
                c(b, this);
                this.error_ || this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP || (goog.asserts.fail("Group submessage did not end with an END_GROUP tag"), 
                this.error_ = !0);
            };
            jspb.BinaryReader.prototype.getFieldDecoder = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
                var a = this.decoder_.readUnsignedVarint32(), b = this.decoder_.getCursor(), c = b + a, a = jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(), b, a);
                this.decoder_.setCursor(c);
                return a;
            };
            jspb.BinaryReader.prototype.readInt32 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readSignedVarint32();
            };
            jspb.BinaryReader.prototype.readInt32String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readSignedVarint32String();
            };
            jspb.BinaryReader.prototype.readInt64 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readSignedVarint64();
            };
            jspb.BinaryReader.prototype.readInt64String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readSignedVarint64String();
            };
            jspb.BinaryReader.prototype.readUint32 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readUnsignedVarint32();
            };
            jspb.BinaryReader.prototype.readUint32String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readUnsignedVarint32String();
            };
            jspb.BinaryReader.prototype.readUint64 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readUnsignedVarint64();
            };
            jspb.BinaryReader.prototype.readUint64String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readUnsignedVarint64String();
            };
            jspb.BinaryReader.prototype.readSint32 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readZigzagVarint32();
            };
            jspb.BinaryReader.prototype.readSint64 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readZigzagVarint64();
            };
            jspb.BinaryReader.prototype.readSint64String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readZigzagVarint64String();
            };
            jspb.BinaryReader.prototype.readFixed32 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
                return this.decoder_.readUint32();
            };
            jspb.BinaryReader.prototype.readFixed64 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
                return this.decoder_.readUint64();
            };
            jspb.BinaryReader.prototype.readFixed64String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
                return this.decoder_.readUint64String();
            };
            jspb.BinaryReader.prototype.readSfixed32 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
                return this.decoder_.readInt32();
            };
            jspb.BinaryReader.prototype.readSfixed32String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
                return this.decoder_.readInt32().toString();
            };
            jspb.BinaryReader.prototype.readSfixed64 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
                return this.decoder_.readInt64();
            };
            jspb.BinaryReader.prototype.readSfixed64String = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
                return this.decoder_.readInt64String();
            };
            jspb.BinaryReader.prototype.readFloat = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
                return this.decoder_.readFloat();
            };
            jspb.BinaryReader.prototype.readDouble = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
                return this.decoder_.readDouble();
            };
            jspb.BinaryReader.prototype.readBool = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return !!this.decoder_.readUnsignedVarint32();
            };
            jspb.BinaryReader.prototype.readEnum = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readSignedVarint64();
            };
            jspb.BinaryReader.prototype.readString = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
                var a = this.decoder_.readUnsignedVarint32();
                return this.decoder_.readString(a);
            };
            jspb.BinaryReader.prototype.readBytes = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
                var a = this.decoder_.readUnsignedVarint32();
                return this.decoder_.readBytes(a);
            };
            jspb.BinaryReader.prototype.readVarintHash64 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
                return this.decoder_.readVarintHash64();
            };
            jspb.BinaryReader.prototype.readFixedHash64 = function() {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
                return this.decoder_.readFixedHash64();
            };
            jspb.BinaryReader.prototype.readPackedField_ = function(a) {
                goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
                for (var b = this.decoder_.readUnsignedVarint32(), b = this.decoder_.getCursor() + b, c = []; this.decoder_.getCursor() < b; ) c.push(a.call(this.decoder_));
                return c;
            };
            jspb.BinaryReader.prototype.readPackedInt32 = function() {
                return this.readPackedField_(this.decoder_.readSignedVarint32);
            };
            jspb.BinaryReader.prototype.readPackedInt32String = function() {
                return this.readPackedField_(this.decoder_.readSignedVarint32String);
            };
            jspb.BinaryReader.prototype.readPackedInt64 = function() {
                return this.readPackedField_(this.decoder_.readSignedVarint64);
            };
            jspb.BinaryReader.prototype.readPackedInt64String = function() {
                return this.readPackedField_(this.decoder_.readSignedVarint64String);
            };
            jspb.BinaryReader.prototype.readPackedUint32 = function() {
                return this.readPackedField_(this.decoder_.readUnsignedVarint32);
            };
            jspb.BinaryReader.prototype.readPackedUint32String = function() {
                return this.readPackedField_(this.decoder_.readUnsignedVarint32String);
            };
            jspb.BinaryReader.prototype.readPackedUint64 = function() {
                return this.readPackedField_(this.decoder_.readUnsignedVarint64);
            };
            jspb.BinaryReader.prototype.readPackedUint64String = function() {
                return this.readPackedField_(this.decoder_.readUnsignedVarint64String);
            };
            jspb.BinaryReader.prototype.readPackedSint32 = function() {
                return this.readPackedField_(this.decoder_.readZigzagVarint32);
            };
            jspb.BinaryReader.prototype.readPackedSint64 = function() {
                return this.readPackedField_(this.decoder_.readZigzagVarint64);
            };
            jspb.BinaryReader.prototype.readPackedSint64String = function() {
                return this.readPackedField_(this.decoder_.readZigzagVarint64String);
            };
            jspb.BinaryReader.prototype.readPackedFixed32 = function() {
                return this.readPackedField_(this.decoder_.readUint32);
            };
            jspb.BinaryReader.prototype.readPackedFixed64 = function() {
                return this.readPackedField_(this.decoder_.readUint64);
            };
            jspb.BinaryReader.prototype.readPackedFixed64String = function() {
                return this.readPackedField_(this.decoder_.readUint64String);
            };
            jspb.BinaryReader.prototype.readPackedSfixed32 = function() {
                return this.readPackedField_(this.decoder_.readInt32);
            };
            jspb.BinaryReader.prototype.readPackedSfixed64 = function() {
                return this.readPackedField_(this.decoder_.readInt64);
            };
            jspb.BinaryReader.prototype.readPackedSfixed64String = function() {
                return this.readPackedField_(this.decoder_.readInt64String);
            };
            jspb.BinaryReader.prototype.readPackedFloat = function() {
                return this.readPackedField_(this.decoder_.readFloat);
            };
            jspb.BinaryReader.prototype.readPackedDouble = function() {
                return this.readPackedField_(this.decoder_.readDouble);
            };
            jspb.BinaryReader.prototype.readPackedBool = function() {
                return this.readPackedField_(this.decoder_.readBool);
            };
            jspb.BinaryReader.prototype.readPackedEnum = function() {
                return this.readPackedField_(this.decoder_.readEnum);
            };
            jspb.BinaryReader.prototype.readPackedVarintHash64 = function() {
                return this.readPackedField_(this.decoder_.readVarintHash64);
            };
            jspb.BinaryReader.prototype.readPackedFixedHash64 = function() {
                return this.readPackedField_(this.decoder_.readFixedHash64);
            };
            jspb.Export = {};
            exports.Map = jspb.Map;
            exports.Message = jspb.Message;
            exports.BinaryReader = jspb.BinaryReader;
            exports.BinaryWriter = jspb.BinaryWriter;
            exports.ExtensionFieldInfo = jspb.ExtensionFieldInfo;
            exports.ExtensionFieldBinaryInfo = jspb.ExtensionFieldBinaryInfo;
            exports.exportSymbol = goog.exportSymbol;
            exports.inherits = goog.inherits;
            exports.object = {
                extend: goog.object.extend
            };
            exports.typeOf = goog.typeOf;
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, _require("buffer").Buffer);
    }, {
        buffer: 2
    } ],
    9: [ function(_require, module, exports) {
        var jspb = _require("google-protobuf");
        var goog = jspb;
        var global = window;
        goog.exportSymbol("proto.stream.Broadcast", null, global);
        goog.exportSymbol("proto.stream.BroadcastAck", null, global);
        goog.exportSymbol("proto.stream.CheckIn", null, global);
        goog.exportSymbol("proto.stream.CheckInAck", null, global);
        goog.exportSymbol("proto.stream.CheckInNotify", null, global);
        goog.exportSymbol("proto.stream.FrameBroadcast", null, global);
        goog.exportSymbol("proto.stream.FrameBroadcastAck", null, global);
        goog.exportSymbol("proto.stream.FrameDataNotify", null, global);
        goog.exportSymbol("proto.stream.FrameSyncNotify", null, global);
        goog.exportSymbol("proto.stream.GetCacheData", null, global);
        goog.exportSymbol("proto.stream.GetCacheDataAck", null, global);
        goog.exportSymbol("proto.stream.Heartbeat", null, global);
        goog.exportSymbol("proto.stream.HeartbeatAck", null, global);
        goog.exportSymbol("proto.stream.Notify", null, global);
        goog.exportSymbol("proto.stream.Publish", null, global);
        goog.exportSymbol("proto.stream.PublishAck", null, global);
        goog.exportSymbol("proto.stream.PublishNotify", null, global);
        goog.exportSymbol("proto.stream.SDKHotelCmdID", null, global);
        goog.exportSymbol("proto.stream.SetFrameSyncRate", null, global);
        goog.exportSymbol("proto.stream.SetFrameSyncRateAck", null, global);
        goog.exportSymbol("proto.stream.SetFrameSyncRateNotify", null, global);
        goog.exportSymbol("proto.stream.SetUseTimeStamp", null, global);
        goog.exportSymbol("proto.stream.SetUseTimeStampAck", null, global);
        goog.exportSymbol("proto.stream.Subscribe", null, global);
        goog.exportSymbol("proto.stream.SubscribeAck", null, global);
        proto.stream.CheckIn = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.CheckIn, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.CheckIn.displayName = "proto.stream.CheckIn";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.CheckIn.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.CheckIn.toObject(opt_includeInstance, this);
            };
            proto.stream.CheckIn.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    bookid: jspb.Message.getFieldWithDefault(msg, 4, ""),
                    key: jspb.Message.getFieldWithDefault(msg, 5, "")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.CheckIn.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.CheckIn();
            return proto.stream.CheckIn.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.CheckIn.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readString();
                    msg.setBookid(value);
                    break;

                  case 5:
                    var value = reader.readString();
                    msg.setKey(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.CheckIn.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.CheckIn.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.CheckIn.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getBookid();
            if (f.length > 0) {
                writer.writeString(4, f);
            }
            f = message.getKey();
            if (f.length > 0) {
                writer.writeString(5, f);
            }
        };
        proto.stream.CheckIn.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.CheckIn.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.CheckIn.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.CheckIn.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.CheckIn.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.CheckIn.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.CheckIn.prototype.getBookid = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.CheckIn.prototype.setBookid = function(value) {
            jspb.Message.setProto3StringField(this, 4, value);
        };
        proto.stream.CheckIn.prototype.getKey = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "");
        };
        proto.stream.CheckIn.prototype.setKey = function(value) {
            jspb.Message.setProto3StringField(this, 5, value);
        };
        proto.stream.CheckInAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.CheckInAck.repeatedFields_, null);
        };
        goog.inherits(proto.stream.CheckInAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.CheckInAck.displayName = "proto.stream.CheckInAck";
        }
        proto.stream.CheckInAck.repeatedFields_ = [ 3, 4 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.CheckInAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.CheckInAck.toObject(opt_includeInstance, this);
            };
            proto.stream.CheckInAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    bookid: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    checkinsList: jspb.Message.getRepeatedField(msg, 3),
                    playersList: jspb.Message.getRepeatedField(msg, 4),
                    maxplayers: jspb.Message.getFieldWithDefault(msg, 5, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.CheckInAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.CheckInAck();
            return proto.stream.CheckInAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.CheckInAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setBookid(value);
                    break;

                  case 3:
                    var value = reader.readPackedUint32();
                    msg.setCheckinsList(value);
                    break;

                  case 4:
                    var value = reader.readPackedUint32();
                    msg.setPlayersList(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setMaxplayers(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.CheckInAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.CheckInAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.CheckInAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getBookid();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getCheckinsList();
            if (f.length > 0) {
                writer.writePackedUint32(3, f);
            }
            f = message.getPlayersList();
            if (f.length > 0) {
                writer.writePackedUint32(4, f);
            }
            f = message.getMaxplayers();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
        };
        proto.stream.CheckInAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.CheckInAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.CheckInAck.prototype.getBookid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.CheckInAck.prototype.setBookid = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.CheckInAck.prototype.getCheckinsList = function() {
            return jspb.Message.getRepeatedField(this, 3);
        };
        proto.stream.CheckInAck.prototype.setCheckinsList = function(value) {
            jspb.Message.setField(this, 3, value || []);
        };
        proto.stream.CheckInAck.prototype.addCheckins = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 3, value, opt_index);
        };
        proto.stream.CheckInAck.prototype.clearCheckinsList = function() {
            this.setCheckinsList([]);
        };
        proto.stream.CheckInAck.prototype.getPlayersList = function() {
            return jspb.Message.getRepeatedField(this, 4);
        };
        proto.stream.CheckInAck.prototype.setPlayersList = function(value) {
            jspb.Message.setField(this, 4, value || []);
        };
        proto.stream.CheckInAck.prototype.addPlayers = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 4, value, opt_index);
        };
        proto.stream.CheckInAck.prototype.clearPlayersList = function() {
            this.setPlayersList([]);
        };
        proto.stream.CheckInAck.prototype.getMaxplayers = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.CheckInAck.prototype.setMaxplayers = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.Heartbeat = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.Heartbeat, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.Heartbeat.displayName = "proto.stream.Heartbeat";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.Heartbeat.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.Heartbeat.toObject(opt_includeInstance, this);
            };
            proto.stream.Heartbeat.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.Heartbeat.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.Heartbeat();
            return proto.stream.Heartbeat.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.Heartbeat.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.Heartbeat.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.Heartbeat.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.Heartbeat.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.Heartbeat.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.Heartbeat.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.Heartbeat.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.Heartbeat.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.Heartbeat.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.HeartbeatAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.HeartbeatAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.HeartbeatAck.displayName = "proto.stream.HeartbeatAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.HeartbeatAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.HeartbeatAck.toObject(opt_includeInstance, this);
            };
            proto.stream.HeartbeatAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.HeartbeatAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.HeartbeatAck();
            return proto.stream.HeartbeatAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.HeartbeatAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.HeartbeatAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.HeartbeatAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.HeartbeatAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
        };
        proto.stream.HeartbeatAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.HeartbeatAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.Broadcast = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.Broadcast.repeatedFields_, null);
        };
        goog.inherits(proto.stream.Broadcast, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.Broadcast.displayName = "proto.stream.Broadcast";
        }
        proto.stream.Broadcast.repeatedFields_ = [ 3 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.Broadcast.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.Broadcast.toObject(opt_includeInstance, this);
            };
            proto.stream.Broadcast.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    flag: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    dstuidsList: jspb.Message.getRepeatedField(msg, 3),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.Broadcast.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.Broadcast();
            return proto.stream.Broadcast.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.Broadcast.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setFlag(value);
                    break;

                  case 3:
                    var value = reader.readPackedUint32();
                    msg.setDstuidsList(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.Broadcast.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.Broadcast.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.Broadcast.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getFlag();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getDstuidsList();
            if (f.length > 0) {
                writer.writePackedUint32(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.Broadcast.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.Broadcast.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.Broadcast.prototype.getFlag = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.Broadcast.prototype.setFlag = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.Broadcast.prototype.getDstuidsList = function() {
            return jspb.Message.getRepeatedField(this, 3);
        };
        proto.stream.Broadcast.prototype.setDstuidsList = function(value) {
            jspb.Message.setField(this, 3, value || []);
        };
        proto.stream.Broadcast.prototype.addDstuids = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 3, value, opt_index);
        };
        proto.stream.Broadcast.prototype.clearDstuidsList = function() {
            this.setDstuidsList([]);
        };
        proto.stream.Broadcast.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.Broadcast.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.Broadcast.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.Broadcast.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.BroadcastAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.BroadcastAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.BroadcastAck.displayName = "proto.stream.BroadcastAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.BroadcastAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.BroadcastAck.toObject(opt_includeInstance, this);
            };
            proto.stream.BroadcastAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.BroadcastAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.BroadcastAck();
            return proto.stream.BroadcastAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.BroadcastAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.BroadcastAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.BroadcastAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.BroadcastAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
        };
        proto.stream.BroadcastAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.BroadcastAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.CheckInNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.CheckInNotify.repeatedFields_, null);
        };
        goog.inherits(proto.stream.CheckInNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.CheckInNotify.displayName = "proto.stream.CheckInNotify";
        }
        proto.stream.CheckInNotify.repeatedFields_ = [ 3, 4 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.CheckInNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.CheckInNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.CheckInNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    bookid: jspb.Message.getFieldWithDefault(msg, 2, ""),
                    checkinsList: jspb.Message.getRepeatedField(msg, 3),
                    playersList: jspb.Message.getRepeatedField(msg, 4),
                    maxplayers: jspb.Message.getFieldWithDefault(msg, 5, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.CheckInNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.CheckInNotify();
            return proto.stream.CheckInNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.CheckInNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.setBookid(value);
                    break;

                  case 3:
                    var value = reader.readPackedUint32();
                    msg.setCheckinsList(value);
                    break;

                  case 4:
                    var value = reader.readPackedUint32();
                    msg.setPlayersList(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setMaxplayers(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.CheckInNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.CheckInNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.CheckInNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getBookid();
            if (f.length > 0) {
                writer.writeString(2, f);
            }
            f = message.getCheckinsList();
            if (f.length > 0) {
                writer.writePackedUint32(3, f);
            }
            f = message.getPlayersList();
            if (f.length > 0) {
                writer.writePackedUint32(4, f);
            }
            f = message.getMaxplayers();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
        };
        proto.stream.CheckInNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.CheckInNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.CheckInNotify.prototype.getBookid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.CheckInNotify.prototype.setBookid = function(value) {
            jspb.Message.setProto3StringField(this, 2, value);
        };
        proto.stream.CheckInNotify.prototype.getCheckinsList = function() {
            return jspb.Message.getRepeatedField(this, 3);
        };
        proto.stream.CheckInNotify.prototype.setCheckinsList = function(value) {
            jspb.Message.setField(this, 3, value || []);
        };
        proto.stream.CheckInNotify.prototype.addCheckins = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 3, value, opt_index);
        };
        proto.stream.CheckInNotify.prototype.clearCheckinsList = function() {
            this.setCheckinsList([]);
        };
        proto.stream.CheckInNotify.prototype.getPlayersList = function() {
            return jspb.Message.getRepeatedField(this, 4);
        };
        proto.stream.CheckInNotify.prototype.setPlayersList = function(value) {
            jspb.Message.setField(this, 4, value || []);
        };
        proto.stream.CheckInNotify.prototype.addPlayers = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 4, value, opt_index);
        };
        proto.stream.CheckInNotify.prototype.clearPlayersList = function() {
            this.setPlayersList([]);
        };
        proto.stream.CheckInNotify.prototype.getMaxplayers = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.CheckInNotify.prototype.setMaxplayers = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.Notify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.Notify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.Notify.displayName = "proto.stream.Notify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.Notify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.Notify.toObject(opt_includeInstance, this);
            };
            proto.stream.Notify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    srcuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.Notify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.Notify();
            return proto.stream.Notify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.Notify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSrcuid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.Notify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.Notify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.Notify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSrcuid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
        };
        proto.stream.Notify.prototype.getSrcuid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.Notify.prototype.setSrcuid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.Notify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.Notify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.Notify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.Notify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.Notify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.Notify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.Subscribe = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.Subscribe.repeatedFields_, null);
        };
        goog.inherits(proto.stream.Subscribe, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.Subscribe.displayName = "proto.stream.Subscribe";
        }
        proto.stream.Subscribe.repeatedFields_ = [ 3, 4 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.Subscribe.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.Subscribe.toObject(opt_includeInstance, this);
            };
            proto.stream.Subscribe.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    confirmsList: jspb.Message.getRepeatedField(msg, 3),
                    cancelsList: jspb.Message.getRepeatedField(msg, 4)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.Subscribe.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.Subscribe();
            return proto.stream.Subscribe.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.Subscribe.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readString();
                    msg.addConfirms(value);
                    break;

                  case 4:
                    var value = reader.readString();
                    msg.addCancels(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.Subscribe.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.Subscribe.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.Subscribe.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getConfirmsList();
            if (f.length > 0) {
                writer.writeRepeatedString(3, f);
            }
            f = message.getCancelsList();
            if (f.length > 0) {
                writer.writeRepeatedString(4, f);
            }
        };
        proto.stream.Subscribe.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.Subscribe.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.Subscribe.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.Subscribe.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.Subscribe.prototype.getConfirmsList = function() {
            return jspb.Message.getRepeatedField(this, 3);
        };
        proto.stream.Subscribe.prototype.setConfirmsList = function(value) {
            jspb.Message.setField(this, 3, value || []);
        };
        proto.stream.Subscribe.prototype.addConfirms = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 3, value, opt_index);
        };
        proto.stream.Subscribe.prototype.clearConfirmsList = function() {
            this.setConfirmsList([]);
        };
        proto.stream.Subscribe.prototype.getCancelsList = function() {
            return jspb.Message.getRepeatedField(this, 4);
        };
        proto.stream.Subscribe.prototype.setCancelsList = function(value) {
            jspb.Message.setField(this, 4, value || []);
        };
        proto.stream.Subscribe.prototype.addCancels = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 4, value, opt_index);
        };
        proto.stream.Subscribe.prototype.clearCancelsList = function() {
            this.setCancelsList([]);
        };
        proto.stream.SubscribeAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.SubscribeAck.repeatedFields_, null);
        };
        goog.inherits(proto.stream.SubscribeAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SubscribeAck.displayName = "proto.stream.SubscribeAck";
        }
        proto.stream.SubscribeAck.repeatedFields_ = [ 2 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SubscribeAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SubscribeAck.toObject(opt_includeInstance, this);
            };
            proto.stream.SubscribeAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    groupsList: jspb.Message.getRepeatedField(msg, 2)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SubscribeAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SubscribeAck();
            return proto.stream.SubscribeAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SubscribeAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readString();
                    msg.addGroups(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SubscribeAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SubscribeAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SubscribeAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getGroupsList();
            if (f.length > 0) {
                writer.writeRepeatedString(2, f);
            }
        };
        proto.stream.SubscribeAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SubscribeAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SubscribeAck.prototype.getGroupsList = function() {
            return jspb.Message.getRepeatedField(this, 2);
        };
        proto.stream.SubscribeAck.prototype.setGroupsList = function(value) {
            jspb.Message.setField(this, 2, value || []);
        };
        proto.stream.SubscribeAck.prototype.addGroups = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 2, value, opt_index);
        };
        proto.stream.SubscribeAck.prototype.clearGroupsList = function() {
            this.setGroupsList([]);
        };
        proto.stream.Publish = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.Publish.repeatedFields_, null);
        };
        goog.inherits(proto.stream.Publish, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.Publish.displayName = "proto.stream.Publish";
        }
        proto.stream.Publish.repeatedFields_ = [ 3 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.Publish.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.Publish.toObject(opt_includeInstance, this);
            };
            proto.stream.Publish.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    groupsList: jspb.Message.getRepeatedField(msg, 3),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.Publish.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.Publish();
            return proto.stream.Publish.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.Publish.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 3:
                    var value = reader.readString();
                    msg.addGroups(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.Publish.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.Publish.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.Publish.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getGroupsList();
            if (f.length > 0) {
                writer.writeRepeatedString(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.Publish.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.Publish.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.Publish.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.Publish.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.Publish.prototype.getGroupsList = function() {
            return jspb.Message.getRepeatedField(this, 3);
        };
        proto.stream.Publish.prototype.setGroupsList = function(value) {
            jspb.Message.setField(this, 3, value || []);
        };
        proto.stream.Publish.prototype.addGroups = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 3, value, opt_index);
        };
        proto.stream.Publish.prototype.clearGroupsList = function() {
            this.setGroupsList([]);
        };
        proto.stream.Publish.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.Publish.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.Publish.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.Publish.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.PublishAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.PublishAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.PublishAck.displayName = "proto.stream.PublishAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.PublishAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.PublishAck.toObject(opt_includeInstance, this);
            };
            proto.stream.PublishAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    dstnum: jspb.Message.getFieldWithDefault(msg, 2, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.PublishAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.PublishAck();
            return proto.stream.PublishAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.PublishAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setDstnum(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.PublishAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.PublishAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.PublishAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getDstnum();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
        };
        proto.stream.PublishAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.PublishAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.PublishAck.prototype.getDstnum = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.PublishAck.prototype.setDstnum = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.PublishNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.PublishNotify.repeatedFields_, null);
        };
        goog.inherits(proto.stream.PublishNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.PublishNotify.displayName = "proto.stream.PublishNotify";
        }
        proto.stream.PublishNotify.repeatedFields_ = [ 3 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.PublishNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.PublishNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.PublishNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    srcuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    groupsList: jspb.Message.getRepeatedField(msg, 3),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.PublishNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.PublishNotify();
            return proto.stream.PublishNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.PublishNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSrcuid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 3:
                    var value = reader.readString();
                    msg.addGroups(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.PublishNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.PublishNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.PublishNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSrcuid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getGroupsList();
            if (f.length > 0) {
                writer.writeRepeatedString(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.PublishNotify.prototype.getSrcuid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.PublishNotify.prototype.setSrcuid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.PublishNotify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.PublishNotify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.PublishNotify.prototype.getGroupsList = function() {
            return jspb.Message.getRepeatedField(this, 3);
        };
        proto.stream.PublishNotify.prototype.setGroupsList = function(value) {
            jspb.Message.setField(this, 3, value || []);
        };
        proto.stream.PublishNotify.prototype.addGroups = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 3, value, opt_index);
        };
        proto.stream.PublishNotify.prototype.clearGroupsList = function() {
            this.setGroupsList([]);
        };
        proto.stream.PublishNotify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.PublishNotify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.PublishNotify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.PublishNotify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.SetUseTimeStamp = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetUseTimeStamp, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetUseTimeStamp.displayName = "proto.stream.SetUseTimeStamp";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetUseTimeStamp.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetUseTimeStamp.toObject(opt_includeInstance, this);
            };
            proto.stream.SetUseTimeStamp.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    usetimestamp: jspb.Message.getFieldWithDefault(msg, 4, false)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetUseTimeStamp.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetUseTimeStamp();
            return proto.stream.SetUseTimeStamp.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetUseTimeStamp.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 4:
                    var value = reader.readBool();
                    msg.setUsetimestamp(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetUseTimeStamp.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetUseTimeStamp.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetUseTimeStamp.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getUsetimestamp();
            if (f) {
                writer.writeBool(4, f);
            }
        };
        proto.stream.SetUseTimeStamp.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetUseTimeStamp.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetUseTimeStamp.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.SetUseTimeStamp.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.SetUseTimeStamp.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.SetUseTimeStamp.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.SetUseTimeStamp.prototype.getUsetimestamp = function() {
            return jspb.Message.getFieldWithDefault(this, 4, false);
        };
        proto.stream.SetUseTimeStamp.prototype.setUsetimestamp = function(value) {
            jspb.Message.setProto3BooleanField(this, 4, value);
        };
        proto.stream.SetUseTimeStampAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetUseTimeStampAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetUseTimeStampAck.displayName = "proto.stream.SetUseTimeStampAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetUseTimeStampAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetUseTimeStampAck.toObject(opt_includeInstance, this);
            };
            proto.stream.SetUseTimeStampAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    timestamp: jspb.Message.getFieldWithDefault(msg, 2, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetUseTimeStampAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetUseTimeStampAck();
            return proto.stream.SetUseTimeStampAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetUseTimeStampAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setTimestamp(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetUseTimeStampAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetUseTimeStampAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetUseTimeStampAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getTimestamp();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
        };
        proto.stream.SetUseTimeStampAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetUseTimeStampAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetUseTimeStampAck.prototype.getTimestamp = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.SetUseTimeStampAck.prototype.setTimestamp = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.SetFrameSyncRate = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetFrameSyncRate, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetFrameSyncRate.displayName = "proto.stream.SetFrameSyncRate";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetFrameSyncRate.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetFrameSyncRate.toObject(opt_includeInstance, this);
            };
            proto.stream.SetFrameSyncRate.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    framerate: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    frameidx: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    enablegs: jspb.Message.getFieldWithDefault(msg, 6, 0),
                    cacheframems: jspb.Message.getFieldWithDefault(msg, 7, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetFrameSyncRate.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetFrameSyncRate();
            return proto.stream.SetFrameSyncRate.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetFrameSyncRate.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 4:
                    var value = reader.readUint32();
                    msg.setFramerate(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setFrameidx(value);
                    break;

                  case 6:
                    var value = reader.readUint32();
                    msg.setEnablegs(value);
                    break;

                  case 7:
                    var value = reader.readInt32();
                    msg.setCacheframems(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetFrameSyncRate.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetFrameSyncRate.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetFrameSyncRate.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getFramerate();
            if (f !== 0) {
                writer.writeUint32(4, f);
            }
            f = message.getFrameidx();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
            f = message.getEnablegs();
            if (f !== 0) {
                writer.writeUint32(6, f);
            }
            f = message.getCacheframems();
            if (f !== 0) {
                writer.writeInt32(7, f);
            }
        };
        proto.stream.SetFrameSyncRate.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetFrameSyncRate.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetFrameSyncRate.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.SetFrameSyncRate.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.SetFrameSyncRate.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.SetFrameSyncRate.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.SetFrameSyncRate.prototype.getFramerate = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.SetFrameSyncRate.prototype.setFramerate = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.SetFrameSyncRate.prototype.getFrameidx = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.SetFrameSyncRate.prototype.setFrameidx = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.SetFrameSyncRate.prototype.getEnablegs = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.SetFrameSyncRate.prototype.setEnablegs = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.SetFrameSyncRate.prototype.getCacheframems = function() {
            return jspb.Message.getFieldWithDefault(this, 7, 0);
        };
        proto.stream.SetFrameSyncRate.prototype.setCacheframems = function(value) {
            jspb.Message.setProto3IntField(this, 7, value);
        };
        proto.stream.SetFrameSyncRateAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetFrameSyncRateAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetFrameSyncRateAck.displayName = "proto.stream.SetFrameSyncRateAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetFrameSyncRateAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetFrameSyncRateAck.toObject(opt_includeInstance, this);
            };
            proto.stream.SetFrameSyncRateAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetFrameSyncRateAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetFrameSyncRateAck();
            return proto.stream.SetFrameSyncRateAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetFrameSyncRateAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetFrameSyncRateAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetFrameSyncRateAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetFrameSyncRateAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
        };
        proto.stream.SetFrameSyncRateAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetFrameSyncRateAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetFrameSyncRateNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetFrameSyncRateNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetFrameSyncRateNotify.displayName = "proto.stream.SetFrameSyncRateNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetFrameSyncRateNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetFrameSyncRateNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.SetFrameSyncRateNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    priority: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    framerate: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    frameidx: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    timestamp: jspb.Message.getFieldWithDefault(msg, 4, "0"),
                    enablegs: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    cacheframems: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetFrameSyncRateNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetFrameSyncRateNotify();
            return proto.stream.SetFrameSyncRateNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetFrameSyncRateNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setFramerate(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setFrameidx(value);
                    break;

                  case 4:
                    var value = reader.readUint64String();
                    msg.setTimestamp(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setEnablegs(value);
                    break;

                  case 6:
                    var value = reader.readInt32();
                    msg.setCacheframems(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetFrameSyncRateNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetFrameSyncRateNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetFrameSyncRateNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getFramerate();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getFrameidx();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getTimestamp();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(4, f);
            }
            f = message.getEnablegs();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
            f = message.getCacheframems();
            if (f !== 0) {
                writer.writeInt32(6, f);
            }
        };
        proto.stream.SetFrameSyncRateNotify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.getFramerate = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.setFramerate = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.getFrameidx = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.setFrameidx = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.getTimestamp = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "0");
        };
        proto.stream.SetFrameSyncRateNotify.prototype.setTimestamp = function(value) {
            jspb.Message.setProto3StringIntField(this, 4, value);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.getEnablegs = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.setEnablegs = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.getCacheframems = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.SetFrameSyncRateNotify.prototype.setCacheframems = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.FrameBroadcast = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.FrameBroadcast, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.FrameBroadcast.displayName = "proto.stream.FrameBroadcast";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.FrameBroadcast.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.FrameBroadcast.toObject(opt_includeInstance, this);
            };
            proto.stream.FrameBroadcast.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cpproto: msg.getCpproto_asB64(),
                    operation: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.FrameBroadcast.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.FrameBroadcast();
            return proto.stream.FrameBroadcast.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.FrameBroadcast.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  case 4:
                    var value = reader.readInt32();
                    msg.setOperation(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.FrameBroadcast.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.FrameBroadcast.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.FrameBroadcast.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
            f = message.getOperation();
            if (f !== 0) {
                writer.writeInt32(4, f);
            }
        };
        proto.stream.FrameBroadcast.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.FrameBroadcast.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.FrameBroadcast.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.FrameBroadcast.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.FrameBroadcast.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.FrameBroadcast.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.FrameBroadcast.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.FrameBroadcast.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.FrameBroadcast.prototype.getOperation = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.FrameBroadcast.prototype.setOperation = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.FrameBroadcastAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.FrameBroadcastAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.FrameBroadcastAck.displayName = "proto.stream.FrameBroadcastAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.FrameBroadcastAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.FrameBroadcastAck.toObject(opt_includeInstance, this);
            };
            proto.stream.FrameBroadcastAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.FrameBroadcastAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.FrameBroadcastAck();
            return proto.stream.FrameBroadcastAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.FrameBroadcastAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.FrameBroadcastAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.FrameBroadcastAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.FrameBroadcastAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
        };
        proto.stream.FrameBroadcastAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.FrameBroadcastAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.FrameDataNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.FrameDataNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.FrameDataNotify.displayName = "proto.stream.FrameDataNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.FrameDataNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.FrameDataNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.FrameDataNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    srcuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cpproto: msg.getCpproto_asB64(),
                    timestamp: jspb.Message.getFieldWithDefault(msg, 4, "0"),
                    frameidx: jspb.Message.getFieldWithDefault(msg, 5, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.FrameDataNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.FrameDataNotify();
            return proto.stream.FrameDataNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.FrameDataNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSrcuid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  case 4:
                    var value = reader.readUint64String();
                    msg.setTimestamp(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setFrameidx(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.FrameDataNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.FrameDataNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.FrameDataNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSrcuid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
            f = message.getTimestamp();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(4, f);
            }
            f = message.getFrameidx();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
        };
        proto.stream.FrameDataNotify.prototype.getSrcuid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.FrameDataNotify.prototype.setSrcuid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.FrameDataNotify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.FrameDataNotify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.FrameDataNotify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.FrameDataNotify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.FrameDataNotify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.FrameDataNotify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.FrameDataNotify.prototype.getTimestamp = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "0");
        };
        proto.stream.FrameDataNotify.prototype.setTimestamp = function(value) {
            jspb.Message.setProto3StringIntField(this, 4, value);
        };
        proto.stream.FrameDataNotify.prototype.getFrameidx = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.FrameDataNotify.prototype.setFrameidx = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.FrameSyncNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.FrameSyncNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.FrameSyncNotify.displayName = "proto.stream.FrameSyncNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.FrameSyncNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.FrameSyncNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.FrameSyncNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    priority: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    lastidx: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    nextidx: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    startts: jspb.Message.getFieldWithDefault(msg, 4, "0"),
                    endts: jspb.Message.getFieldWithDefault(msg, 5, "0"),
                    timestamp: jspb.Message.getFieldWithDefault(msg, 6, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.FrameSyncNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.FrameSyncNotify();
            return proto.stream.FrameSyncNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.FrameSyncNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setLastidx(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setNextidx(value);
                    break;

                  case 4:
                    var value = reader.readUint64String();
                    msg.setStartts(value);
                    break;

                  case 5:
                    var value = reader.readUint64String();
                    msg.setEndts(value);
                    break;

                  case 6:
                    var value = reader.readUint64String();
                    msg.setTimestamp(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.FrameSyncNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.FrameSyncNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.FrameSyncNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getLastidx();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getNextidx();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getStartts();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(4, f);
            }
            f = message.getEndts();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(5, f);
            }
            f = message.getTimestamp();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(6, f);
            }
        };
        proto.stream.FrameSyncNotify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.FrameSyncNotify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.FrameSyncNotify.prototype.getLastidx = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.FrameSyncNotify.prototype.setLastidx = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.FrameSyncNotify.prototype.getNextidx = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.FrameSyncNotify.prototype.setNextidx = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.FrameSyncNotify.prototype.getStartts = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "0");
        };
        proto.stream.FrameSyncNotify.prototype.setStartts = function(value) {
            jspb.Message.setProto3StringIntField(this, 4, value);
        };
        proto.stream.FrameSyncNotify.prototype.getEndts = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "0");
        };
        proto.stream.FrameSyncNotify.prototype.setEndts = function(value) {
            jspb.Message.setProto3StringIntField(this, 5, value);
        };
        proto.stream.FrameSyncNotify.prototype.getTimestamp = function() {
            return jspb.Message.getFieldWithDefault(this, 6, "0");
        };
        proto.stream.FrameSyncNotify.prototype.setTimestamp = function(value) {
            jspb.Message.setProto3StringIntField(this, 6, value);
        };
        proto.stream.GetCacheData = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.GetCacheData, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetCacheData.displayName = "proto.stream.GetCacheData";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetCacheData.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetCacheData.toObject(opt_includeInstance, this);
            };
            proto.stream.GetCacheData.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    cacheframems: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetCacheData.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetCacheData();
            return proto.stream.GetCacheData.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetCacheData.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readInt32();
                    msg.setCacheframems(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetCacheData.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetCacheData.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetCacheData.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getCacheframems();
            if (f !== 0) {
                writer.writeInt32(3, f);
            }
        };
        proto.stream.GetCacheData.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetCacheData.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.GetCacheData.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.GetCacheData.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.GetCacheData.prototype.getCacheframems = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.GetCacheData.prototype.setCacheframems = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.GetCacheDataAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.GetCacheDataAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.GetCacheDataAck.displayName = "proto.stream.GetCacheDataAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.GetCacheDataAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.GetCacheDataAck.toObject(opt_includeInstance, this);
            };
            proto.stream.GetCacheDataAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    framecount: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    msgcount: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.GetCacheDataAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.GetCacheDataAck();
            return proto.stream.GetCacheDataAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.GetCacheDataAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setFramecount(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setMsgcount(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.GetCacheDataAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.GetCacheDataAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.GetCacheDataAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getFramecount();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getMsgcount();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.GetCacheDataAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.GetCacheDataAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.GetCacheDataAck.prototype.getFramecount = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.GetCacheDataAck.prototype.setFramecount = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.GetCacheDataAck.prototype.getMsgcount = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.GetCacheDataAck.prototype.setMsgcount = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.SDKHotelCmdID = {
            INVALIDSDKCMD: 0,
            CHECKINCMDID: 1401,
            CHECKINACKCMDID: 1402,
            HEARTBEATCMDID: 1403,
            HEARTBEATACKCMDID: 1404,
            BROADCASTCMDID: 1405,
            BROADCASTACKCMDID: 1406,
            NOTIFYCMDID: 1408,
            CHECKINNOTIFYCMDID: 1410,
            SUBSCRIBECMDID: 1411,
            SUBSCRIBEACKCMDID: 1412,
            PUBLISHCMDID: 1413,
            PUBLISHACKCMDID: 1414,
            PUBLISHNOTIFYCMDID: 1416,
            SETUSETIMESTAMPCMDID: 1417,
            SETUSETIMESTAMPACKCMDID: 1418,
            SETFRAMESYNCRATECMDID: 1419,
            SETFRAMESYNCRATEACKCMDID: 1420,
            SETFRAMESYNCRATENOTIFYCMDID: 1422,
            FRAMEBROADCASTCMDID: 1423,
            FRAMEBROADCASTACKCMDID: 1424,
            FRAMEDATANOTIFYCMDID: 1426,
            FRAMESYNCNOTIFYCMDID: 1428,
            GETCACHEDATACMDID: 1429,
            GETCACHEDATACMDIDACKCMDID: 1430
        };
        goog.object.extend(exports, proto.stream);
    }, {
        "google-protobuf": 8
    } ],
    10: [ function(_require, module, exports) {
        var jspb = _require("google-protobuf");
        var goog = jspb;
        var global = window;
        var common_pb = _require("./common_pb.js");
        goog.exportSymbol("proto.stream.EnterLiveRoom", null, global);
        goog.exportSymbol("proto.stream.EnterLiveRoomAck", null, global);
        goog.exportSymbol("proto.stream.EnterLiveRoomNotify", null, global);
        goog.exportSymbol("proto.stream.ExitLiveRoomNotify", null, global);
        goog.exportSymbol("proto.stream.LiveBroadcast", null, global);
        goog.exportSymbol("proto.stream.LiveBroadcastAck", null, global);
        goog.exportSymbol("proto.stream.LiveBroadcastNotify", null, global);
        goog.exportSymbol("proto.stream.LiveFrameDataNotify", null, global);
        goog.exportSymbol("proto.stream.LiveFrameSyncNotify", null, global);
        goog.exportSymbol("proto.stream.LiveHeartbeat", null, global);
        goog.exportSymbol("proto.stream.LiveHeartbeatAck", null, global);
        goog.exportSymbol("proto.stream.LiveOverNotify", null, global);
        goog.exportSymbol("proto.stream.SDKWatchCmdID", null, global);
        goog.exportSymbol("proto.stream.SetLiveOffset", null, global);
        goog.exportSymbol("proto.stream.SetLiveOffsetAck", null, global);
        proto.stream.EnterLiveRoom = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.EnterLiveRoom, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.EnterLiveRoom.displayName = "proto.stream.EnterLiveRoom";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.EnterLiveRoom.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.EnterLiveRoom.toObject(opt_includeInstance, this);
            };
            proto.stream.EnterLiveRoom.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    userprofile: msg.getUserprofile_asB64(),
                    bookid: jspb.Message.getFieldWithDefault(msg, 5, ""),
                    ticket: jspb.Message.getFieldWithDefault(msg, 6, ""),
                    setid: jspb.Message.getFieldWithDefault(msg, 7, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.EnterLiveRoom.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.EnterLiveRoom();
            return proto.stream.EnterLiveRoom.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.EnterLiveRoom.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setUserprofile(value);
                    break;

                  case 5:
                    var value = reader.readString();
                    msg.setBookid(value);
                    break;

                  case 6:
                    var value = reader.readString();
                    msg.setTicket(value);
                    break;

                  case 7:
                    var value = reader.readUint32();
                    msg.setSetid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.EnterLiveRoom.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.EnterLiveRoom.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.EnterLiveRoom.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getUserprofile_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
            f = message.getBookid();
            if (f.length > 0) {
                writer.writeString(5, f);
            }
            f = message.getTicket();
            if (f.length > 0) {
                writer.writeString(6, f);
            }
            f = message.getSetid();
            if (f !== 0) {
                writer.writeUint32(7, f);
            }
        };
        proto.stream.EnterLiveRoom.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.EnterLiveRoom.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.EnterLiveRoom.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.EnterLiveRoom.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.EnterLiveRoom.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.EnterLiveRoom.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.EnterLiveRoom.prototype.getUserprofile = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.EnterLiveRoom.prototype.getUserprofile_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getUserprofile());
        };
        proto.stream.EnterLiveRoom.prototype.getUserprofile_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getUserprofile());
        };
        proto.stream.EnterLiveRoom.prototype.setUserprofile = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.EnterLiveRoom.prototype.getBookid = function() {
            return jspb.Message.getFieldWithDefault(this, 5, "");
        };
        proto.stream.EnterLiveRoom.prototype.setBookid = function(value) {
            jspb.Message.setProto3StringField(this, 5, value);
        };
        proto.stream.EnterLiveRoom.prototype.getTicket = function() {
            return jspb.Message.getFieldWithDefault(this, 6, "");
        };
        proto.stream.EnterLiveRoom.prototype.setTicket = function(value) {
            jspb.Message.setProto3StringField(this, 6, value);
        };
        proto.stream.EnterLiveRoom.prototype.getSetid = function() {
            return jspb.Message.getFieldWithDefault(this, 7, 0);
        };
        proto.stream.EnterLiveRoom.prototype.setSetid = function(value) {
            jspb.Message.setProto3IntField(this, 7, value);
        };
        proto.stream.EnterLiveRoomAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.EnterLiveRoomAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.EnterLiveRoomAck.displayName = "proto.stream.EnterLiveRoomAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.EnterLiveRoomAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.EnterLiveRoomAck.toObject(opt_includeInstance, this);
            };
            proto.stream.EnterLiveRoomAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomstatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    reserved: jspb.Message.getFieldWithDefault(msg, 3, ""),
                    wathchinfo: (f = msg.getWathchinfo()) && common_pb.LiveWatchInfo.toObject(includeInstance, f)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.EnterLiveRoomAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.EnterLiveRoomAck();
            return proto.stream.EnterLiveRoomAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.EnterLiveRoomAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setRoomstatus(value);
                    break;

                  case 3:
                    var value = reader.readString();
                    msg.setReserved(value);
                    break;

                  case 4:
                    var value = new common_pb.LiveWatchInfo();
                    reader.readMessage(value, common_pb.LiveWatchInfo.deserializeBinaryFromReader);
                    msg.setWathchinfo(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.EnterLiveRoomAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.EnterLiveRoomAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.EnterLiveRoomAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomstatus();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getReserved();
            if (f.length > 0) {
                writer.writeString(3, f);
            }
            f = message.getWathchinfo();
            if (f != null) {
                writer.writeMessage(4, f, common_pb.LiveWatchInfo.serializeBinaryToWriter);
            }
        };
        proto.stream.EnterLiveRoomAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.EnterLiveRoomAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.EnterLiveRoomAck.prototype.getRoomstatus = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.EnterLiveRoomAck.prototype.setRoomstatus = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.EnterLiveRoomAck.prototype.getReserved = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.EnterLiveRoomAck.prototype.setReserved = function(value) {
            jspb.Message.setProto3StringField(this, 3, value);
        };
        proto.stream.EnterLiveRoomAck.prototype.getWathchinfo = function() {
            return jspb.Message.getWrapperField(this, common_pb.LiveWatchInfo, 4);
        };
        proto.stream.EnterLiveRoomAck.prototype.setWathchinfo = function(value) {
            jspb.Message.setWrapperField(this, 4, value);
        };
        proto.stream.EnterLiveRoomAck.prototype.clearWathchinfo = function() {
            this.setWathchinfo(undefined);
        };
        proto.stream.EnterLiveRoomAck.prototype.hasWathchinfo = function() {
            return jspb.Message.getField(this, 4) != null;
        };
        proto.stream.LiveHeartbeat = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LiveHeartbeat, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveHeartbeat.displayName = "proto.stream.LiveHeartbeat";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveHeartbeat.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveHeartbeat.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveHeartbeat.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveHeartbeat.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveHeartbeat();
            return proto.stream.LiveHeartbeat.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveHeartbeat.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveHeartbeat.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveHeartbeat.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveHeartbeat.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
        };
        proto.stream.LiveHeartbeat.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LiveHeartbeat.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LiveHeartbeat.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.LiveHeartbeat.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.LiveHeartbeat.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.LiveHeartbeat.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.LiveHeartbeatAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LiveHeartbeatAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveHeartbeatAck.displayName = "proto.stream.LiveHeartbeatAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveHeartbeatAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveHeartbeatAck.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveHeartbeatAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveHeartbeatAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveHeartbeatAck();
            return proto.stream.LiveHeartbeatAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveHeartbeatAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveHeartbeatAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveHeartbeatAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveHeartbeatAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
        };
        proto.stream.LiveHeartbeatAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LiveHeartbeatAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LiveBroadcast = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, proto.stream.LiveBroadcast.repeatedFields_, null);
        };
        goog.inherits(proto.stream.LiveBroadcast, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveBroadcast.displayName = "proto.stream.LiveBroadcast";
        }
        proto.stream.LiveBroadcast.repeatedFields_ = [ 3 ];
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveBroadcast.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveBroadcast.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveBroadcast.toObject = function(includeInstance, msg) {
                var f, obj = {
                    roomid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
                    flag: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    dstuidsList: jspb.Message.getRepeatedField(msg, 3),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveBroadcast.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveBroadcast();
            return proto.stream.LiveBroadcast.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveBroadcast.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setFlag(value);
                    break;

                  case 3:
                    var value = reader.readPackedUint32();
                    msg.setDstuidsList(value);
                    break;

                  case 4:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveBroadcast.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveBroadcast.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveBroadcast.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(1, f);
            }
            f = message.getFlag();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getDstuidsList();
            if (f.length > 0) {
                writer.writePackedUint32(3, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(4, f);
            }
        };
        proto.stream.LiveBroadcast.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, "0");
        };
        proto.stream.LiveBroadcast.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 1, value);
        };
        proto.stream.LiveBroadcast.prototype.getFlag = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.LiveBroadcast.prototype.setFlag = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.LiveBroadcast.prototype.getDstuidsList = function() {
            return jspb.Message.getRepeatedField(this, 3);
        };
        proto.stream.LiveBroadcast.prototype.setDstuidsList = function(value) {
            jspb.Message.setField(this, 3, value || []);
        };
        proto.stream.LiveBroadcast.prototype.addDstuids = function(value, opt_index) {
            jspb.Message.addToRepeatedField(this, 3, value, opt_index);
        };
        proto.stream.LiveBroadcast.prototype.clearDstuidsList = function() {
            this.setDstuidsList([]);
        };
        proto.stream.LiveBroadcast.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 4, "");
        };
        proto.stream.LiveBroadcast.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.LiveBroadcast.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.LiveBroadcast.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 4, value);
        };
        proto.stream.LiveBroadcastAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LiveBroadcastAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveBroadcastAck.displayName = "proto.stream.LiveBroadcastAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveBroadcastAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveBroadcastAck.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveBroadcastAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveBroadcastAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveBroadcastAck();
            return proto.stream.LiveBroadcastAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveBroadcastAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveBroadcastAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveBroadcastAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveBroadcastAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
        };
        proto.stream.LiveBroadcastAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LiveBroadcastAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetLiveOffset = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetLiveOffset, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetLiveOffset.displayName = "proto.stream.SetLiveOffset";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetLiveOffset.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetLiveOffset.toObject(opt_includeInstance, this);
            };
            proto.stream.SetLiveOffset.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
                    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    offsetms: jspb.Message.getFieldWithDefault(msg, 4, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetLiveOffset.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetLiveOffset();
            return proto.stream.SetLiveOffset.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetLiveOffset.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 4:
                    var value = reader.readInt32();
                    msg.setOffsetms(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetLiveOffset.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetLiveOffset.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetLiveOffset.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getOffsetms();
            if (f !== 0) {
                writer.writeInt32(4, f);
            }
        };
        proto.stream.SetLiveOffset.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetLiveOffset.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.SetLiveOffset.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.SetLiveOffset.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.SetLiveOffset.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.SetLiveOffset.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.SetLiveOffset.prototype.getOffsetms = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.SetLiveOffset.prototype.setOffsetms = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.SetLiveOffsetAck = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.SetLiveOffsetAck, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.SetLiveOffsetAck.displayName = "proto.stream.SetLiveOffsetAck";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.SetLiveOffsetAck.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.SetLiveOffsetAck.toObject(opt_includeInstance, this);
            };
            proto.stream.SetLiveOffsetAck.toObject = function(includeInstance, msg) {
                var f, obj = {
                    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.SetLiveOffsetAck.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.SetLiveOffsetAck();
            return proto.stream.SetLiveOffsetAck.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.SetLiveOffsetAck.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setStatus(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.SetLiveOffsetAck.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.SetLiveOffsetAck.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.SetLiveOffsetAck.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getStatus();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
        };
        proto.stream.SetLiveOffsetAck.prototype.getStatus = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.SetLiveOffsetAck.prototype.setStatus = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.EnterLiveRoomNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.EnterLiveRoomNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.EnterLiveRoomNotify.displayName = "proto.stream.EnterLiveRoomNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.EnterLiveRoomNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.EnterLiveRoomNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.EnterLiveRoomNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    userprofile: msg.getUserprofile_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.EnterLiveRoomNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.EnterLiveRoomNotify();
            return proto.stream.EnterLiveRoomNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.EnterLiveRoomNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readBytes();
                    msg.setUserprofile(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.EnterLiveRoomNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.EnterLiveRoomNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.EnterLiveRoomNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getUserprofile_asU8();
            if (f.length > 0) {
                writer.writeBytes(2, f);
            }
        };
        proto.stream.EnterLiveRoomNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.EnterLiveRoomNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.EnterLiveRoomNotify.prototype.getUserprofile = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.EnterLiveRoomNotify.prototype.getUserprofile_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getUserprofile());
        };
        proto.stream.EnterLiveRoomNotify.prototype.getUserprofile_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getUserprofile());
        };
        proto.stream.EnterLiveRoomNotify.prototype.setUserprofile = function(value) {
            jspb.Message.setProto3BytesField(this, 2, value);
        };
        proto.stream.ExitLiveRoomNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.ExitLiveRoomNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.ExitLiveRoomNotify.displayName = "proto.stream.ExitLiveRoomNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.ExitLiveRoomNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.ExitLiveRoomNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.ExitLiveRoomNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    userprofile: msg.getUserprofile_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.ExitLiveRoomNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.ExitLiveRoomNotify();
            return proto.stream.ExitLiveRoomNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.ExitLiveRoomNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setUserid(value);
                    break;

                  case 2:
                    var value = reader.readBytes();
                    msg.setUserprofile(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.ExitLiveRoomNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.ExitLiveRoomNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.ExitLiveRoomNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getUserid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getUserprofile_asU8();
            if (f.length > 0) {
                writer.writeBytes(2, f);
            }
        };
        proto.stream.ExitLiveRoomNotify.prototype.getUserid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.ExitLiveRoomNotify.prototype.setUserid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.ExitLiveRoomNotify.prototype.getUserprofile = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "");
        };
        proto.stream.ExitLiveRoomNotify.prototype.getUserprofile_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getUserprofile());
        };
        proto.stream.ExitLiveRoomNotify.prototype.getUserprofile_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getUserprofile());
        };
        proto.stream.ExitLiveRoomNotify.prototype.setUserprofile = function(value) {
            jspb.Message.setProto3BytesField(this, 2, value);
        };
        proto.stream.LiveBroadcastNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LiveBroadcastNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveBroadcastNotify.displayName = "proto.stream.LiveBroadcastNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveBroadcastNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveBroadcastNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveBroadcastNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    srcuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cpproto: msg.getCpproto_asB64()
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveBroadcastNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveBroadcastNotify();
            return proto.stream.LiveBroadcastNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveBroadcastNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSrcuid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveBroadcastNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveBroadcastNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveBroadcastNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSrcuid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
        };
        proto.stream.LiveBroadcastNotify.prototype.getSrcuid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LiveBroadcastNotify.prototype.setSrcuid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LiveBroadcastNotify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.LiveBroadcastNotify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.LiveBroadcastNotify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.LiveBroadcastNotify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.LiveBroadcastNotify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.LiveBroadcastNotify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.LiveOverNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LiveOverNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveOverNotify.displayName = "proto.stream.LiveOverNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveOverNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveOverNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveOverNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    roomid: jspb.Message.getFieldWithDefault(msg, 2, "0")
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveOverNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveOverNotify();
            return proto.stream.LiveOverNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveOverNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setGameid(value);
                    break;

                  case 2:
                    var value = reader.readUint64String();
                    msg.setRoomid(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveOverNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveOverNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveOverNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getGameid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getRoomid();
            if (parseInt(f, 10) !== 0) {
                writer.writeUint64String(2, f);
            }
        };
        proto.stream.LiveOverNotify.prototype.getGameid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LiveOverNotify.prototype.setGameid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LiveOverNotify.prototype.getRoomid = function() {
            return jspb.Message.getFieldWithDefault(this, 2, "0");
        };
        proto.stream.LiveOverNotify.prototype.setRoomid = function(value) {
            jspb.Message.setProto3StringIntField(this, 2, value);
        };
        proto.stream.LiveFrameDataNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LiveFrameDataNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveFrameDataNotify.displayName = "proto.stream.LiveFrameDataNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveFrameDataNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveFrameDataNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveFrameDataNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    srcuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    cpproto: msg.getCpproto_asB64(),
                    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    frameidx: jspb.Message.getFieldWithDefault(msg, 5, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveFrameDataNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveFrameDataNotify();
            return proto.stream.LiveFrameDataNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveFrameDataNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setSrcuid(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 3:
                    var value = reader.readBytes();
                    msg.setCpproto(value);
                    break;

                  case 4:
                    var value = reader.readUint64();
                    msg.setTimestamp(value);
                    break;

                  case 5:
                    var value = reader.readUint32();
                    msg.setFrameidx(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveFrameDataNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveFrameDataNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveFrameDataNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getSrcuid();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getCpproto_asU8();
            if (f.length > 0) {
                writer.writeBytes(3, f);
            }
            f = message.getTimestamp();
            if (f !== 0) {
                writer.writeUint64(4, f);
            }
            f = message.getFrameidx();
            if (f !== 0) {
                writer.writeUint32(5, f);
            }
        };
        proto.stream.LiveFrameDataNotify.prototype.getSrcuid = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LiveFrameDataNotify.prototype.setSrcuid = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LiveFrameDataNotify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.LiveFrameDataNotify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.LiveFrameDataNotify.prototype.getCpproto = function() {
            return jspb.Message.getFieldWithDefault(this, 3, "");
        };
        proto.stream.LiveFrameDataNotify.prototype.getCpproto_asB64 = function() {
            return jspb.Message.bytesAsB64(this.getCpproto());
        };
        proto.stream.LiveFrameDataNotify.prototype.getCpproto_asU8 = function() {
            return jspb.Message.bytesAsU8(this.getCpproto());
        };
        proto.stream.LiveFrameDataNotify.prototype.setCpproto = function(value) {
            jspb.Message.setProto3BytesField(this, 3, value);
        };
        proto.stream.LiveFrameDataNotify.prototype.getTimestamp = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.LiveFrameDataNotify.prototype.setTimestamp = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.LiveFrameDataNotify.prototype.getFrameidx = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.LiveFrameDataNotify.prototype.setFrameidx = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.LiveFrameSyncNotify = function(opt_data) {
            jspb.Message.initialize(this, opt_data, 0, -1, null, null);
        };
        goog.inherits(proto.stream.LiveFrameSyncNotify, jspb.Message);
        if (goog.DEBUG && !COMPILED) {
            proto.stream.LiveFrameSyncNotify.displayName = "proto.stream.LiveFrameSyncNotify";
        }
        if (jspb.Message.GENERATE_TO_OBJECT) {
            proto.stream.LiveFrameSyncNotify.prototype.toObject = function(opt_includeInstance) {
                return proto.stream.LiveFrameSyncNotify.toObject(opt_includeInstance, this);
            };
            proto.stream.LiveFrameSyncNotify.toObject = function(includeInstance, msg) {
                var f, obj = {
                    priority: jspb.Message.getFieldWithDefault(msg, 1, 0),
                    lastidx: jspb.Message.getFieldWithDefault(msg, 2, 0),
                    nextidx: jspb.Message.getFieldWithDefault(msg, 3, 0),
                    startts: jspb.Message.getFieldWithDefault(msg, 4, 0),
                    endts: jspb.Message.getFieldWithDefault(msg, 5, 0),
                    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0)
                };
                if (includeInstance) {
                    obj.$jspbMessageInstance = msg;
                }
                return obj;
            };
        }
        proto.stream.LiveFrameSyncNotify.deserializeBinary = function(bytes) {
            var reader = new jspb.BinaryReader(bytes);
            var msg = new proto.stream.LiveFrameSyncNotify();
            return proto.stream.LiveFrameSyncNotify.deserializeBinaryFromReader(msg, reader);
        };
        proto.stream.LiveFrameSyncNotify.deserializeBinaryFromReader = function(msg, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup()) {
                    break;
                }
                var field = reader.getFieldNumber();
                switch (field) {
                  case 1:
                    var value = reader.readUint32();
                    msg.setPriority(value);
                    break;

                  case 2:
                    var value = reader.readUint32();
                    msg.setLastidx(value);
                    break;

                  case 3:
                    var value = reader.readUint32();
                    msg.setNextidx(value);
                    break;

                  case 4:
                    var value = reader.readUint64();
                    msg.setStartts(value);
                    break;

                  case 5:
                    var value = reader.readUint64();
                    msg.setEndts(value);
                    break;

                  case 6:
                    var value = reader.readUint64();
                    msg.setTimestamp(value);
                    break;

                  default:
                    reader.skipField();
                    break;
                }
            }
            return msg;
        };
        proto.stream.LiveFrameSyncNotify.prototype.serializeBinary = function() {
            var writer = new jspb.BinaryWriter();
            proto.stream.LiveFrameSyncNotify.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        };
        proto.stream.LiveFrameSyncNotify.serializeBinaryToWriter = function(message, writer) {
            var f = undefined;
            f = message.getPriority();
            if (f !== 0) {
                writer.writeUint32(1, f);
            }
            f = message.getLastidx();
            if (f !== 0) {
                writer.writeUint32(2, f);
            }
            f = message.getNextidx();
            if (f !== 0) {
                writer.writeUint32(3, f);
            }
            f = message.getStartts();
            if (f !== 0) {
                writer.writeUint64(4, f);
            }
            f = message.getEndts();
            if (f !== 0) {
                writer.writeUint64(5, f);
            }
            f = message.getTimestamp();
            if (f !== 0) {
                writer.writeUint64(6, f);
            }
        };
        proto.stream.LiveFrameSyncNotify.prototype.getPriority = function() {
            return jspb.Message.getFieldWithDefault(this, 1, 0);
        };
        proto.stream.LiveFrameSyncNotify.prototype.setPriority = function(value) {
            jspb.Message.setProto3IntField(this, 1, value);
        };
        proto.stream.LiveFrameSyncNotify.prototype.getLastidx = function() {
            return jspb.Message.getFieldWithDefault(this, 2, 0);
        };
        proto.stream.LiveFrameSyncNotify.prototype.setLastidx = function(value) {
            jspb.Message.setProto3IntField(this, 2, value);
        };
        proto.stream.LiveFrameSyncNotify.prototype.getNextidx = function() {
            return jspb.Message.getFieldWithDefault(this, 3, 0);
        };
        proto.stream.LiveFrameSyncNotify.prototype.setNextidx = function(value) {
            jspb.Message.setProto3IntField(this, 3, value);
        };
        proto.stream.LiveFrameSyncNotify.prototype.getStartts = function() {
            return jspb.Message.getFieldWithDefault(this, 4, 0);
        };
        proto.stream.LiveFrameSyncNotify.prototype.setStartts = function(value) {
            jspb.Message.setProto3IntField(this, 4, value);
        };
        proto.stream.LiveFrameSyncNotify.prototype.getEndts = function() {
            return jspb.Message.getFieldWithDefault(this, 5, 0);
        };
        proto.stream.LiveFrameSyncNotify.prototype.setEndts = function(value) {
            jspb.Message.setProto3IntField(this, 5, value);
        };
        proto.stream.LiveFrameSyncNotify.prototype.getTimestamp = function() {
            return jspb.Message.getFieldWithDefault(this, 6, 0);
        };
        proto.stream.LiveFrameSyncNotify.prototype.setTimestamp = function(value) {
            jspb.Message.setProto3IntField(this, 6, value);
        };
        proto.stream.SDKWatchCmdID = {
            INVALIDWATCHCMD: 0,
            ENTERLIVEROOMCMDID: 3401,
            ENTERLIVEROOMACKCMDID: 3402,
            LIVEHEARTBEATCMDID: 3403,
            LIVEHEARTBEATACKCMDID: 3404,
            LIVEBROADCASTCMDID: 3405,
            LIVEBROADCASTACKCMDID: 3406,
            SETLIVEOFFSETCMDID: 3407,
            SETLIVEOFFSETACKCMDID: 3408,
            ENTERLIVEROOMNOTIFYCMDID: 3420,
            EXITLIVEROOMNOTIFYCMDID: 3422,
            LIVEBROADCASTNOTIFYCMDID: 3424,
            LIVEOVERNOTIFYCMDID: 3426,
            LIVEFRAMEDATANOTIFYCMDID: 3428,
            LIVEFRAMESYNCNOTIFYCMDID: 3430
        };
        goog.object.extend(exports, proto.stream);
    }, {
        "./common_pb.js": 4,
        "google-protobuf": 8
    } ]
}, {}, [ 6 ]);

(function(_obj) {
    _obj.FrameOpt = {
        ONLY_CLIENT: 0,
        ONLY_GS: 1,
        CLIENT_GS: 2
    };
    _obj.MsSetFrameSyncNotify = function(frameRate, startIndex, timestamp, enableGS, cacheFrameMS) {
        this.frameRate = frameRate;
        this.startIndex = startIndex;
        this.timestamp = timestamp;
        this.enableGS = enableGS;
        this.cacheFrameMS = cacheFrameMS;
    };
    _obj.MsWatchSet = function(cacheMS, maxWatch, delayMS, persistent) {
        this.cacheMS = cacheMS;
        this.maxWatch = maxWatch;
        this.delayMS = delayMS;
        this.persistent = persistent;
    };
    _obj.MsLiveFrameDataNotify = function(srcUserID, cpProto, timeStamp, frameIdx) {
        this.srcUserID = srcUserID;
        this.cpProto = cpProto;
        this.timeStamp = timeStamp;
        this.frameIdx = frameIdx;
    };
    _obj.MsLiveAudience = function(userID, profile, enterTime) {
        this.userID = userID;
        this.profile = profile;
        this.enterTime = enterTime;
    };
    _obj.MsLiveWatchInfo = function(roomID, startTS, delayMS, cacheMS, maxAudiences, curAudiences, peakAudiences, lastAudiences) {
        this.roomID = roomID;
        this.startTS = startTS;
        this.delayMS = delayMS;
        this.cacheMS = cacheMS;
        this.maxAudiences = maxAudiences;
        this.curAudiences = curAudiences;
        this.peakAudiences = peakAudiences;
        this.lastAudiences = lastAudiences;
    };
    _obj.MsJoinWatchRoomRsp = function(status, roomStatus, reserved, wathchInfo) {
        this.status = status;
        this.roomStatus = roomStatus;
        this.reserved = reserved;
        this.wathchInfo = wathchInfo;
    };
    _obj.MsExitLiveRoomNotify = function(userID, userProfile) {
        this.userID = userID;
        this.userProfile = userProfile;
    };
    _obj.MsLiveOverNotify = function(gameID, roomID) {
        this.gameID = gameID;
        this.roomID = roomID;
    };
    _obj.MsChangeRoleRsp = function(status, rType) {
        this.status = status;
        this.targetRoomType = rType;
    };
    _obj.MsCreateTeamInfo = function(password, capacity, mode, visibility, userProfile) {
        this.password = password;
        this.capacity = capacity;
        this.mode = mode;
        this.visibility = visibility;
        this.userProfile = userProfile;
    };
    _obj.MsTeamMatchCond = function(teamNum, teamMemberNum, timeout, weight, weightRange, weightRule, full) {
        this.teamNum = teamNum;
        this.teamMemberNum = teamMemberNum;
        this.timeout = timeout;
        this.weight = weight;
        this.weightRange = weightRange;
        this.weightRule = weightRule;
        this.full = full;
    };
    _obj.MsTeamMatchInfo = function(roomName, maxPlayer, canWatch, mode, visibility, roomProperty, cond, watchSet) {
        this.roomName = roomName;
        this.maxPlayer = maxPlayer;
        this.canWatch = canWatch;
        this.mode = mode;
        this.visibility = visibility;
        this.roomProperty = roomProperty;
        this.watchSet = watchSet;
        this.cond = cond;
    };
    return _obj;
})(MVS || {});

var MvsCode = {
    NoLogin: -2,
    CODE_201: 201,
    CODE_1000: 1e3,
    NetworkErr: 1001,
    CODE_1005: 1005,
    DataParseErr: 1606
};

var MvsErrMsg = new function() {
    this["1001"] = "network error, please reference [http://www.matchvs.com/service?page=egretGuide]";
    this["1000"] = "netwrk closed normal ";
    this["1005"] = "netwrk closed no status ";
    this["1606"] = "you data parse error ";
    this["400"] = "bad request ";
    this["401"] = "invaild appkey ";
    this["402"] = "invaild sign [http://www.matchvs.com/service?page=js]";
    this["403"] = "forbidden";
    this["404"] = "not found anything, please reference [ http://www.matchvs.com/service?page=js ]";
    this["405"] = "room have full, please reference [ http://www.matchvs.com/service?page=js ]";
    this["406"] = "room had joinOver, please reference [ http://www.matchvs.com/service?page=js ]";
    this["500"] = "server error, please reference [ http://www.matchvs.com/service?page=egretGuide ]";
    this["502"] = "service stoped,the license expires or the account is in arrears. please reference [ http://www.matchvs.com/price ]";
    this["503"] = "the ccu exceed the limit. please reference [ http://www.matchvs.com/price ]";
    this["504"] = "your traffic is running out today,please recharge [ http://www.matchvs.com/price ]";
    this["507"] = "room does not exist";
    this["509"] = "not in the room ";
    this["521"] = "gameServer not exist, please check your gameserver is ok http://www.matchvs.com/service?page=gameServer";
    this["522"] = "frame sync is close, please call the api 'setFrameSync' [http://www.matchvs.com/service?page=js]";
    this["523"] = "gameServer internal error, need check you game server";
    this["527"] = "sending message too often ,  can't exceed 500 times per second";
    this["201"] = "reconnect not in room http://www.matchvs.com/service?page=js";
    this["422"] = "team match timeout";
    this["423"] = "parameters is incorrect";
}();

function MsCreateRoomInfo(roomName, maxPlayer, mode, canWatch, visibility, roomProperty) {
    this.roomName = roomName;
    this.maxPlayer = maxPlayer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.visibility = visibility;
    this.roomProperty = roomProperty;
    this.toString = function() {
        return "roomName:" + this.roomName + " maxPlayer:" + this.maxPlayer + " mode:" + this.mode + " canWatch:" + this.canWatch + " visibility:" + this.visibility + " roomProperty:" + this.roomProperty;
    };
    MatchvsLog.logI(this + " MsCreateRoomInfo:" + JSON.stringify(this));
}

function MsEnum() {}

MsEnum.JoinRoomType = {
    NoJoin: 0,
    joinSpecialRoom: 1,
    joinRoomWithProperty: 2,
    joinRandomRoom: 3,
    reconnect: 4
};

function MsRoomJoin(joinType, userID, roomID, gameID, maxPlayer, mode, canWatch, userProfile, tags, visibility, roomProperty) {
    this.joinType = joinType;
    this.userID = userID;
    this.roomID = roomID;
    this.gameID = gameID;
    this.maxPlayer = maxPlayer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.tags = tags;
    this.userProfile = userProfile;
    this.visibility = visibility;
    this.roomProperty = roomProperty;
    MatchvsLog.logI(this + " MsRoomJoin:" + JSON.stringify(this));
}

function MsJoinOverRsp(status, cpProto) {
    this.status = status;
    this.cpProto = cpProto;
    MatchvsLog.logI(this + " MsJoinOverRsp:" + JSON.stringify(this));
}

function MsJoinOverNotifyInfo(roomID, srcUserID, cpProto) {
    this.roomID = roomID;
    this.srcUserID = srcUserID;
    this.cpProto = cpProto;
    MatchvsLog.logI(this + " MsJoinOverNotifyInfo:" + JSON.stringify(this));
}

function MsCreateRoomRsp(status, roomID, owner) {
    this.status = status;
    this.roomID = roomID;
    this.owner = owner;
    MatchvsLog.logI(this + " MsCreateRoomRsp:" + JSON.stringify(this));
}

function MsCheckIn(gameID, roomID, userID, bookID, book_key, hotelInfo) {
    this.gameID = gameID;
    this.roomID = roomID;
    this.userID = userID;
    this.bookID = bookID;
    this.bookKey = book_key;
    this.hotelInfo = hotelInfo;
}

function MsMatchInfo(maxplayer, mode, canWatch, tags, visibility, roomProperty) {
    this.maxPlayer = maxplayer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.tags = {};
    this.tags = tags;
    this.visibility = visibility;
    this.roomProperty = roomProperty;
    MatchvsLog.logI(this + " MsMatchInfo:" + JSON.stringify(this));
}

function MsRoomInfo(roomID, roomProperty, ownerID, state, roomName) {
    this.roomID = roomID;
    this.roomName = roomName;
    this.roomProperty = roomProperty;
    this.ownerId = ownerID;
    this.owner = ownerID;
    this.state = state;
    MatchvsLog.logI(this + " MsRoomInfo:" + JSON.stringify(this));
}

function MsRoomUserInfo(userID, userProfile) {
    this.userId = userID;
    this.userID = userID;
    this.userProfile = userProfile;
    MatchvsLog.logI(this + " MsRoomUserInfo:" + JSON.stringify(this));
}

function MsLeaveRoomRsp(status, roomID, userID, cpProto) {
    this.status = status;
    this.roomID = roomID;
    this.userId = userID;
    this.userID = userID;
    this.cpProto = cpProto;
    MatchvsLog.logI(this + " MsLeaveRoomRsp:" + JSON.stringify(this));
}

function MsLeaveRoomNotify(roomID, userID, owner, cpProto) {
    this.userId = userID;
    this.userID = userID;
    this.roomID = roomID;
    this.owner = owner;
    this.cpProto = cpProto;
    MatchvsLog.logI(this + " MsLeaveRoomNotify:" + JSON.stringify(this));
}

function MsSubscribeEventGroupRsp(status, groups) {
    this.status = status;
    this.groups = groups;
}

function MsSendEventGroupNotify(srcUserID, groups, cpProto) {
    this.srcUid = srcUserID;
    this.srcUserID = srcUserID;
    this.groups = groups;
    this.cpProto = cpProto;
}

function MsRegistRsp(status, userID, token, name, avatar) {
    this.status = status;
    this.id = userID;
    this.userID = userID;
    this.token = token;
    this.name = name;
    this.avatar = avatar;
    MatchvsLog.logI("MsRegistRsp" + ":" + JSON.stringify(this));
}

function MsLoginRsp(status, roomID) {
    this.status = status;
    this.roomID = roomID;
    MatchvsLog.logI("MsLoginRsp:" + ":" + JSON.stringify(this));
}

function MsCheckInNotify(userID, checkins, players, maxPlayer) {
    this.userID = userID;
    this.checkins = checkins;
    this.players = players;
    this.maxPlayers = maxPlayer;
    this.maxPlayer = maxPlayer;
    MatchvsLog.logI(this + ":" + JSON.stringify(this));
}

function MsSendEventNotify(srcUserID, cpProto) {
    this.srcUserId = srcUserID;
    this.srcUserID = srcUserID;
    this.cpProto = cpProto;
}

function MsGameServerNotifyInfo(srcUserID, cpProto) {
    this.srcUserId = srcUserID;
    this.srcUserID = srcUserID;
    this.cpProto = cpProto;
}

function MsSendEventRsp(status, sequence) {
    this.status = status;
    this.sequence = sequence;
}

function MsRoomInfoEx(roomID, roomName, maxplayer, mode, canWatch, roomProperty) {
    this.roomID = roomID;
    this.roomName = roomName;
    this.maxPlayer = maxplayer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.roomProperty = roomProperty;
    MatchvsLog.logI(" MsRoomInfoEx" + ":" + JSON.stringify(this));
}

function MsRoomListRsp(status, roomInfos) {
    this.status = status;
    this.roomInfos = roomInfos;
    MatchvsLog.logI(this + " MsRoomListRsp:" + JSON.stringify(this));
}

function MsKickPlayerNotify(userID, srcUserID, data, owner) {
    this.userId = userID;
    this.userID = userID;
    this.srcUserId = srcUserID;
    this.srcUserID = srcUserID;
    this.cpProto = data;
    this.owner = owner;
    MatchvsLog.logI(this + " MsKickPlayerNotify:" + JSON.stringify(this));
}

function MsKickPlayerRsp(status, owner, userID) {
    this.status = status;
    this.owner = owner;
    this.userID = userID;
    MatchvsLog.logI(this + " MsKickPlayerRsp:" + JSON.stringify(this));
}

function MsSetChannelFrameSyncRsp(status) {
    this.status = status;
}

function MsSendFrameEventRsp(status) {
    this.status = status;
}

function MsRoomFilter(maxPlayer, mode, canWatch, roomProperty) {
    this.maxPlayer = maxPlayer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.roomProperty = roomProperty;
    MatchvsLog.logI(this + " MsRoomFilter:" + JSON.stringify(this));
}

function MsRoomFilterEx(maxPlayer, mode, canWatch, roomProperty, full, state, sort, order, pageNo, pageSize) {
    this.maxPlayer = maxPlayer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.roomProperty = roomProperty;
    this.full = full;
    this.state = state;
    this.sort = sort;
    this.order = order;
    this.pageNo = pageNo;
    this.pageSize = pageSize ? pageSize : 10;
    MatchvsLog.logI(this + " MsRoomFilterEx:" + JSON.stringify(this));
}

function MsGetRoomDetailRsp(status, state, maxPlayer, mode, canWatch, roomProperty, owner, createFlag, userInfos, watchinfo, brigades) {
    this.status = status;
    this.state = state;
    this.maxPlayer = maxPlayer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.roomProperty = roomProperty;
    this.owner = owner;
    this.createFlag = createFlag;
    this.userInfos = [];
    this.userInfos = userInfos;
    this.watchinfo = watchinfo;
    this.brigades = brigades;
    MatchvsLog.logI(this + " MsGetRoomDetailRsp:" + JSON.stringify(this));
}

function MsRoomAttribute(roomID, roomName, maxPlayer, gamePlayer, watchPlaer, mode, canWatch, roomProperty, owner, state, createTime, watchSet) {
    this.roomID = roomID;
    this.roomName = roomName;
    this.maxPlayer = maxPlayer;
    this.gamePlayer = gamePlayer;
    this.watchPlayer = watchPlaer;
    this.mode = mode;
    this.canWatch = canWatch;
    this.roomProperty = roomProperty;
    this.owner = owner;
    this.state = state;
    this.createTime = createTime;
    this.watchSet = watchSet;
    MatchvsLog.logI(this + " MsRoomAttribute:" + JSON.stringify(this));
}

function MsGetRoomListExRsp(status, total, roomAttrs) {
    this.status = status;
    this.total = total;
    this.roomAttrs = roomAttrs;
    MatchvsLog.logI(this + " MsGetRoomListExRsp:" + JSON.stringify(this));
}

function MsFrameItem(srcUserID, cpProto, timestamp) {
    this.srcUserID = srcUserID;
    this.cpProto = cpProto;
    this.timestamp = timestamp;
}

function MsFrameData(frameIndex, frameItems, frameWaitCount) {
    this.frameIndex = frameIndex;
    this.frameItems = frameItems;
    this.frameWaitCount = frameWaitCount;
}

function MsNetworkStateNotify(roomID, userID, state, owner) {
    this.roomID = roomID;
    this.userID = userID;
    this.state = state;
    this.owner = owner;
}

function MsSetRoomPropertyRspInfo(status, roomID, userID, roomProperty) {
    this.status = status;
    this.roomID = roomID;
    this.userID = userID;
    this.roomProperty = roomProperty;
    MatchvsLog.logI(this + " MsSetRoomPropertyRspInfo:" + JSON.stringify(this));
}

function MsRoomPropertyNotifyInfo(roomID, userID, roomProperty) {
    this.roomID = roomID;
    this.userID = userID;
    this.roomProperty = roomProperty;
    MatchvsLog.logI(this + " MsRoomPropertyNotifyInfo:" + JSON.stringify(this));
}

function MsHeartBeatResponse(gameID, gsExist) {
    this.gameID = gameID;
    this.gsExist = gsExist;
}

function MsGatewaySpeedResponse(Status, Seq) {
    this.status = Status;
    this.seq = Seq;
}

function MsReopenRoomResponse(Status, cpProto) {
    this.status = Status;
    this.cpProto = cpProto;
    MatchvsLog.logI(this + " MsReopenRoomResponse:" + JSON.stringify(this));
}

function MsReopenRoomNotify(roomID, userID, cpProto) {
    this.roomID = roomID;
    this.userID = userID;
    this.cpProto = cpProto;
    MatchvsLog.logI(this + " MsReopenRoomNotify:" + JSON.stringify(this));
}

(function(_obj) {
    function MatchvsNetWorkCallBack() {
        this.onMsg = function(buf) {};
        this.onErr = function(errCode, errMsg) {};
    }
    function DefaultWebSocket(host, callback) {
        this.socket = null;
        this.mCallBack = callback;
        this.mHost = host;
        var toClose = false;
        var bufQueue = [];
        this.send = function(message) {
            if (!window.WebSocket) {
                return;
            }
            if (isIE()) {
                var uint8A = new Uint8Array(message.buffer.byteLength);
                for (var i = 0; i < uint8A.length; i++) {
                    uint8A[i] = message.getUint8(i);
                }
                message = uint8A;
            }
            if (this.socket.readyState === WebSocket.OPEN) {
                this.socket.send(message.buffer);
            } else {
                bufQueue.unshift(message);
            }
        };
        this.close = function() {
            if (this.socket) {
                if (typeof cc !== "undefined" && typeof cc.Component !== "undefined") {
                    toClose = true;
                    this.socket.close();
                } else {
                    this.socket.close(1e3, "");
                }
            }
        };
        if (!window.WebSocket) {
            window.WebSocket = window.MozWebSocket;
        }
        if (window.WebSocket) {
            this.socket = new WebSocket(host);
            this.socket.binaryType = "arraybuffer";
            this.socket.hashcode = new Date().getMilliseconds();
            MatchvsLog.logI("try to create a socket:" + this.mHost + " socket is " + this.socket.hashcode);
            this.socket.onmessage = function(event) {
                if (typeof FileReader !== "undefined" && event.data instanceof Blob) {
                    console.log("websocket onmessage FileReader:", Date.now());
                    var reader = new FileReader();
                    reader.readAsArrayBuffer(event.data);
                    reader.onload = function(evt) {
                        if (evt.target.readyState === FileReader.DONE) {
                            console.log("websocket onmessage readyState:", Date.now());
                            var dataView = new DataView(reader.result);
                            this.mCallBack.onMsg(dataView);
                        } else {
                            this.mCallBack.onErr(MvsCode.DataParseErr, "[err]parse fail");
                        }
                    }.bind(this);
                } else if (event.data instanceof ArrayBuffer) {
                    var dataView = new DataView(event.data);
                    this.mCallBack.onMsg && this.mCallBack.onMsg(dataView);
                } else {
                    console.log("[error] unknown event :" + event + " => " + JSON.stringify(event));
                    this.mCallBack.onErr && this.mCallBack.onErr(MvsCode.DataParseErr, "[err]parse fail");
                }
            }.bind(this);
            this.socket.onopen = function(event) {
                toClose = false;
                MatchvsLog.logI("Create the socket is success :" + this.mHost + " socket is " + this.socket.hashcode);
                while (bufQueue.length > 0) {
                    this.send(bufQueue.pop());
                }
                this.mCallBack.onConnect && this.mCallBack.onConnect(this.mHost);
            }.bind(this);
            this.socket.onclose = function(e) {
                if (typeof cc !== "undefined" && typeof cc.Component !== "undefined") {
                    if (toClose) {
                        e = {
                            code: 1e3,
                            reason: "jsb friend close "
                        };
                    } else {
                        e = {
                            code: 1006,
                            reason: "error close "
                        };
                    }
                }
                MatchvsLog.logI("socket on closed ,code:" + (e && e.code) + "(1000:NORMAL,1005:CLOSE_NO_STATUS,1006:RESET,1009:CLOSE_TOO_LARGE) err:" + JSON.stringify(e));
                this.mCallBack.onDisConnect && this.mCallBack.onDisConnect(this.mHost, e);
            }.bind(this);
            this.socket.onerror = function(event) {
                MatchvsLog.logI("socket on error ,event:" + JSON.stringify(event));
                this.mCallBack.onDisConnect && this.mCallBack.onDisConnect(this.mHost, event);
            }.bind(this);
        } else {
            alert("Not Support the WebSocket！");
        }
    }
    function EgretWebSocket(host, callback) {
        var socket = null;
        var socketOpen = false;
        var socketMsgQueue = [];
        var mCallBack = callback;
        var mHost = host;
        var validClose = false;
        var that = this;
        this.close = function() {
            if (socket) {
                validClose = true;
                socket.close();
            }
        };
        this.send = function(msg) {
            if (socketOpen) {
                var byte = new egret.ByteArray();
                byte.position = 0;
                var len = msg.buffer.byteLength;
                for (var i = 0; i < len; i++) {
                    byte.writeByte(msg.getUint8(i));
                }
                socket.writeBytes(byte, 0, byte.bytesAvailable);
            } else {
                if (socketMsgQueue.length < 100) {
                    socketMsgQueue.unshift(msg);
                }
            }
        };
        var onOpen = function(res) {
            validClose = false;
            MatchvsLog.logI("[egret.WebSocket][connect]:" + res);
            socketOpen = true;
            while (socketMsgQueue.length > 0) {
                that.send(socketMsgQueue.pop());
            }
            mCallBack.onConnect && mCallBack.onConnect(mHost);
        };
        var onClose = function(e) {
            if (validClose) {
                e = {
                    code: 1e3
                };
            } else {
                e = {
                    code: 1001
                };
            }
            socketOpen = false;
            mCallBack.onDisConnect && mCallBack.onDisConnect(mHost, e);
            MatchvsLog.logI("[egret.WebSocket] [onClose] case:" + JSON.stringify(e));
        };
        var onMessage = function() {
            var byte = new egret.ByteArray();
            socket.readBytes(byte);
            var buffer = new ArrayBuffer(byte.readAvailable);
            var dataView = new DataView(buffer);
            for (var i = 0; i < buffer.byteLength; i++) {
                dataView.setUint8(i, byte.readUnsignedByte());
            }
            mCallBack.onMsg(dataView);
        };
        var onError = function(event) {
            mCallBack.onDisConnect && mCallBack.onDisConnect(mHost, event = {
                code: "1006"
            });
            MatchvsLog.logI("[egret.WebSocket] [onError] case:" + JSON.stringify(event));
        };
        function connect() {
            socket = new egret.WebSocket();
            socket.type = egret.WebSocket.TYPE_BINARY;
            socket.addEventListener(egret.ProgressEvent.SOCKET_DATA, onMessage, this);
            socket.addEventListener(egret.Event.CONNECT, onOpen, this);
            socket.addEventListener(egret.Event.CLOSE, onClose, this);
            socket.addEventListener(egret.IOErrorEvent.IO_ERROR, onError, this);
            socket.connectByUrl(host);
        }
        connect();
    }
    function WeChatWebSocket(host, callback) {
        this.socket = wx.connectSocket({
            url: host,
            header: {
                engine: "WeiXinGame"
            }
        });
        this.socketOpen = false;
        var socketMsgQueue = [];
        var mCallBack = callback;
        var mHost = host;
        var that = this;
        this.close = function() {
            if (this.socket) {
                this.socket.close({
                    code: 1e3,
                    reason: "normal"
                });
            }
        };
        this.send = function(msg) {
            if (this.socketOpen) {
                this.socket.send({
                    data: msg.buffer
                });
            } else {
                if (socketMsgQueue.length < 100) {
                    socketMsgQueue.unshift(msg);
                }
            }
        };
        this.socket.onOpen(function(res) {
            MatchvsLog.logI("[wx.WebSocket][connect]:" + res);
            that.socketOpen = true;
            while (socketMsgQueue.length > 0) {
                that.send(socketMsgQueue.pop());
            }
            mCallBack.onConnect && mCallBack.onConnect(mHost);
        });
        this.socket.onClose(function(e) {
            that.socketOpen = false;
            if (e.reason && e.reason === "interrupted") {
                e.code = 1001;
            }
            mCallBack.onDisConnect && mCallBack.onDisConnect(mHost, e);
            MatchvsLog.logI("[wx.WebSocket] [onClose] case:" + JSON.stringify(e));
        });
        this.socket.onMessage(function(res) {
            var dataView = new DataView(res.data);
            mCallBack.onMsg(dataView);
        });
        this.socket.onError(function(event) {
            mCallBack.onDisConnect && mCallBack.onDisConnect(mHost, event);
            MatchvsLog.logI("[wx.WebSocket] [onError] case:" + JSON.stringify(event));
        });
    }
    function QQBKWebSocket(host, callback) {
        var mCallBack = callback;
        var mHost = host;
        var socketMsgQueue = [];
        var socketOpen = false;
        var socket = new BK.WebSocket(host);
        var that = this;
        this.send = function(msg) {
            if (socketOpen) {
                socket.send(msg.buffer);
            } else {
                if (socketMsgQueue.length < 100) {
                    socketMsgQueue.unshift(msg);
                }
            }
        };
        this.close = function() {
            console.log("[matchvs sdk]websocket close");
            if (socket) {
                socket.close();
            }
        };
        socket.onOpen = function(res) {
            socketOpen = true;
            console.log("[BK.WebSocket][connect][Matchvs]:", res);
            while (socketMsgQueue.length > 0) {
                that.send(socketMsgQueue.pop());
            }
            mCallBack.onConnect && mCallBack.onConnect(mHost);
        };
        socket.onClose = function(res) {
            socketOpen = false;
            console.log("[BK.WebSocket][onClose][Matchvs] case:", JSON.stringify(res));
            var e = {
                code: 1e3,
                message: " close normal"
            };
            mCallBack.onDisConnect && mCallBack.onDisConnect(mHost, e);
        };
        socket.onError = function(err) {
            if (socket && socketOpen) {
                socketOpen = false;
                socket.close();
            }
            var e = {
                code: err.getErrorCode(),
                message: err.getErrorString()
            };
            if (e.code === 65535) {
                e.code = 1e3;
            }
            mCallBack.onDisConnect && mCallBack.onDisConnect(mHost, e);
            MatchvsLog.logI("[BK.WebSocket] [onError][Matchvs] case:" + JSON.stringify(err));
        };
        socket.onMessage = function(res, data) {
            var buf = data.data;
            buf.rewind();
            var ab = new ArrayBuffer(buf.length);
            var dataView = new DataView(ab);
            while (!buf.eof) {
                dataView.setUint8(buf.pointer, buf.readUint8Buffer());
            }
            mCallBack.onMsg && mCallBack.onMsg(dataView);
        };
        if (socket) {
            socket.connect();
        }
    }
    function DefaultHttp(callback) {
        this.mCallback = callback;
        var send = function(url, callback, isPost, params) {
            var http = new XMLHttpRequest();
            http.open(isPost ? "POST" : "GET", url, true);
            http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            http.onreadystatechange = function() {
                if (http.readyState === 4) {
                    if (http.status === 200) {
                        callback.onMsg(http.responseText);
                        MatchvsLog.logI("[HTTP:](" + url + ")+" + http.responseText);
                    } else {
                        callback.onErr(http.status, http.statusText);
                    }
                }
            };
            if (isPost) {
                http.send(params);
            } else {
                http.send(null);
            }
        };
        this.get = function(url) {
            send(url, this.mCallback, false, null);
        };
        this.post = function(url, params) {
            send(url, this.mCallback, true, params);
        };
    }
    function WeChatHttp(callback) {
        this.mCallback = callback;
        var send = function(url, callback, isPost, params) {
            var contentType = isPost ? "application/json" : "application/x-www-form-urlencoded";
            wx.request({
                url: url,
                data: params,
                header: {
                    "content-type": contentType
                },
                success: function(res) {
                    var rsp = JSON.stringify(res.data);
                    MatchvsLog.logI("http success:" + rsp);
                    callback.onMsg(rsp);
                },
                fail: function(res) {
                    MatchvsLog.logI("http fail:" + res.errMsg);
                    callback.onErr(0, res.errMsg);
                }
            });
        };
        this.get = function(url) {
            send(url, this.mCallback, false, null);
        };
        this.post = function(url, params) {
            send(url, this.mCallback, true, params);
        };
    }
    function QQBKHttp(callback) {
        this.mCallback = callback;
        function send(url, call, isPost, params) {
            var http = new BK.HttpUtil(url);
            http.setHttpMethod(isPost ? "post" : "get");
            http.setHttpHeader("Content-type", "application/x-www-form-urlencoded");
            http.requestAsync(function(res, code) {
                if (code === 200) {
                    var dt = res.readAsString(true);
                    call.onMsg(dt);
                    MatchvsLog.logI("[HTTP:](" + url + ")+" + dt);
                } else {
                    call.onErr(code, res.readAsString(true));
                }
            });
            if (isPost) {
                http.setHttpPostData(params);
            } else {
                http.setHttpUrl(url);
            }
        }
        this.get = function(url) {
            send(url, this.mCallback, false, null);
        };
        this.post = function(url, params) {
            send(url, this.mCallback, true, params);
        };
    }
    try {
        _obj.MatchvsNetWork = DefaultWebSocket;
        _obj.MatchvsHttp = DefaultHttp;
        if (typeof egret !== "undefined") {
            console.log("network api -> egret");
            _obj.MatchvsNetWork = EgretWebSocket;
            _obj.MatchvsHttp = DefaultHttp;
        }
        if (typeof wx !== "undefined") {
            console.log("network api->wx");
            _obj.MatchvsNetWork = WeChatWebSocket;
            _obj.MatchvsHttp = WeChatHttp;
        } else if (typeof BK !== "undefined") {
            console.log("network api->BK");
            _obj.MatchvsNetWork = QQBKWebSocket;
            _obj.MatchvsHttp = QQBKHttp;
        }
    } catch (e) {
        console.warn("network adapter warning:" + e.message);
    }
    _obj.MatchvsNetWorkCallBack = MatchvsNetWorkCallBack;
})(MVS || {});

var MATCHVS_USER_GATEWAY_SPEED_REQ = 1001;

var MATCHVS_USER_GATEWAY_SPEED_RSP = 1002;

var MATCHVS_USER_LOGIN_REQ = 1101;

var MATCHVS_USER_LOGIN_RSP = 1102;

var MATCHVS_USER_HEARTBEAT_REQ = 1103;

var MATCHVS_USER_HEARTBEAT_RSP = 1103;

var MATCHVS_NOTICE_USER_RELOGIN = 1104;

var MATCHVS_USER_LOGOUT_REQ = 1105;

var MATCHVS_USER_LOGOUT_RSP = 1106;

var MATCHVS_NETWORK_STATE_NOTIFY = 1122;

var MATCHVS_ROOM_CREATE_REQ = 1203;

var MATCHVS_ROOM_CREATE_RSP = 1204;

var MATCHVS_ROOM_JOIN_REQ = 1201;

var MATCHVS_ROOM_JOIN_RSP = 1202;

var MATCHVS_ROOM_JOIN_OVER_REQ = 1213;

var MATCHVS_ROOM_JOIN_OVER_RSP = 1214;

var MATCHVS_ROOM_JOIN_OVER_NOTIFY = 1306;

var MATCHVS_ROOM_LEAVE_REQ = 1205;

var MATCHVS_ROOM_LEAVE_RSP = 1206;

var MATCHVS_ROOM_NOTICE_USER_JOIN = 1301;

var MATCHVS_ROOM_NOTICE_USER_LEAVE = 1302;

var MATCHVS_ROOM_CHECK_IN_REQ = 1401;

var MATCHVS_ROOM_CHECK_IN_RSP = 1402;

var MATCHVS_HEARTBEAT_HOTEL_REQ = 1403;

var MATCHVS_HEARTBEAT_HOTEL_RSP = 1404;

var MATCHVS_BROADCAST_HOTEL_REQ = 1405;

var MATCHVS_BROADCAST_HOTEL_RSP = 1406;

var MATCHVS_HOTEL_NOTIFY = 1408;

var MATCHVS_ROOM_CHECKIN_NOTIFY = 1410;

var CMD_GET_ROOM_LIST_REQ = 1207;

var CMD_GET_ROOM_LIST_RSP = 1208;

var CMD_GET_ROOM_DETAIL_REQ = 1209;

var CMD_GET_ROOM_DETAIL_RSP = 1210;

var CMD_GET_ROOM_LIST_EX_REQ = 1215;

var CMD_GET_ROOM_LIST_EX_RSP = 1216;

var CMD_SET_ROOM_PROPERTY_REQ = 1219;

var CMD_SET_ROOM_PROPERTY_RSP = 1220;

var CMD_SET_ROOM_PROPERTY_NOTIFY = 1307;

var CMD_DISCONNECT_REQ = 1107;

var CMD_DISCONNECT_RSP = 1108;

var CMD_KICK_PLAYER_REQ = 1303;

var CMD_KICK_PLAYER_RSP = 1304;

var CMD_KICK_PLAYER_NOTIFY = 1305;

var CMD_SUBSCRIBE_CMDID = 1411;

var CMD_SUBSCRIBE_ACK_CMDID = 1412;

var CMD_PUBLISH_CMDID = 1413;

var CMD_PUBLISH_ACKCMDID = 1414;

var CMD_PUBLISH_NOTIFYCMDID = 1416;

var CMD_SET_USE_TIMESTAMP_CMDID = 1417;

var CMD_SET_USE_TIMESTAMPACK_CMDID = 1418;

var CMD_SET_FRAME_SYNCRATE_CMDID = 1419;

var CMD_SET_FRAME_SYNCRATEACK_CMDID = 1420;

var CMD_SET_FRAME_SYNCRATENOTIFY_CMDID = 1422;

var CMD_FRAME_BROADCAST_CMDID = 1423;

var CMD_FRAME_BROADCASTACK_CMDID = 1424;

var CMD_FRAME_DATANOTIFY_CMDID = 1426;

var CMD_FRAME_SYNCNOTIFY_CMDID = 1428;

var CMD_ROOM_JOIN_OPEN_REQ = 1221;

var CMD_ROOM_JOIN_OPEN_RSP = 1222;

var CMD_ROOM_JOIN_OPEN_NOT = 1308;

var FIXED_HEAD_SIZE = 16;

var VERSION = 2;

function Packet() {
    var header;
    var payload;
    var buf;
}

function MatchvsHeader() {
    this.size = 0;
    this.seq = 0;
    this.cmd = 0;
    this.version = 0;
    this.userID = 0;
    this.toString = function() {
        return " this.size   " + this.size + " this.seq    " + this.seq + " this.cmd    " + this.cmd + " this.version" + this.version + " this.userID " + this.userID;
    };
}

(function(_obj) {
    var pt_stream = proto.stream;
    var ProtoCmd = {
        LOGIN_REQ: 1101,
        LOGIN_RSP: 1102,
        CREATE_ROOM_REQ: 1203,
        CREATE_ROOM_RSP: 1204,
        JOIN_ROOM_REQ: 1201,
        JOIN_ROOM_RSP: 1202,
        JOIN_ROOM_NOTIFY: 1301,
        CHECK_IN_REQ: 1401,
        CHECK_IN_RSP: 1402,
        CHECK_IN_NOTIFY: 1410,
        SET_RECONNECT_TIMEOUT_REQ: 1109,
        SET_RECONNECT_TIMEOUT_RSP: 1110,
        JOIN_WATCHROOM_REQ: 1225,
        JOIN_WATCHROOM_RSP: 1226,
        LEAVE_WATCHROOM_REQ: 1227,
        LEAVE_WATCHROOM_RSP: 1228,
        GET_WATCHROOM_REQ: 1229,
        GET_WATCHROOM_RSP: 1230,
        CHANGE_ROLE_REQ: 1231,
        CHANGE_ROLE_RSP: 1232,
        ENTER_LIVEROOM_REQ: 3401,
        ENTER_LIVEROOM_RSP: 3402,
        ENTER_LIVEROOM_NOTIFY: 3420,
        LIVE_HEARTBEAT_REQ: 3403,
        LIVE_HEARTBEAT_RSP: 3404,
        LIVE_BROADCAST_REQ: 3405,
        LIVE_BROADCAST_RSP: 3406,
        LIVE_BROADCAST_NOTIFY: 3424,
        SET_LIVEOFFSET_REQ: 3407,
        SET_LIVEOFFSET_RSP: 3408,
        EXIT_LIVEROOM_NOTIFY: 3422,
        LIVE_OVER_NOTIFY: 3426,
        LIVE_FRAMEDATA_NOTIFY: 3428,
        LIVE_FRAMESYNC_NOTIFY: 3430,
        CREATE_TEAM_REQ: 1233,
        CREATE_TEAM_RSP: 1234,
        JOIN_TEAM_REQ: 1235,
        JOIN_TEAM_RSP: 1236,
        JOIN_TEAM_NOTIFY: 1309,
        LEAVE_TEAM_REQ: 1237,
        LEAVE_TEAM_RSP: 1238,
        LEAVE_TEAM_NOTIFY: 1310,
        TEAM_MATCH_REQ: 1239,
        TEAM_MATCH_RSP: 1240,
        TEAM_MATCH_RESULT_NOTIFY: 1311,
        TEAM_MATCH_START_NOTIFY: 1312,
        GET_CACHEDATA_REQ: 1429,
        GET_CACHEdATA_RSP: 1430
    };
    _obj.ProtoCmd = ProtoCmd;
    function ProtoMap() {
        return ProtoMap.prototype;
    }
    var ptDesc = new ProtoMap();
    ptDesc[ProtoCmd.LOGIN_RSP] = pt_stream.LoginRsp;
    ptDesc[ProtoCmd.JOIN_ROOM_RSP] = pt_stream.JoinRoomRsp;
    ptDesc[ProtoCmd.CHECK_IN_RSP] = pt_stream.CheckInAck;
    ptDesc[ProtoCmd.CREATE_ROOM_RSP] = pt_stream.CreateRoomRsp;
    ptDesc[ProtoCmd.CHECK_IN_NOTIFY] = pt_stream.CheckInNotify;
    ptDesc[MATCHVS_ROOM_JOIN_OVER_RSP] = pt_stream.JoinOverRsp;
    ptDesc[MATCHVS_ROOM_LEAVE_RSP] = pt_stream.LeaveRoomRsp;
    ptDesc[MATCHVS_ROOM_NOTICE_USER_JOIN] = pt_stream.NoticeJoin;
    ptDesc[MATCHVS_HEARTBEAT_HOTEL_RSP] = pt_stream.HeartbeatAck;
    ptDesc[MATCHVS_ROOM_NOTICE_USER_LEAVE] = pt_stream.NoticeLeave;
    ptDesc[MATCHVS_BROADCAST_HOTEL_RSP] = pt_stream.BroadcastAck;
    ptDesc[CMD_SUBSCRIBE_ACK_CMDID] = pt_stream.SubscribeAck;
    ptDesc[MATCHVS_HOTEL_NOTIFY] = pt_stream.Notify;
    ptDesc[CMD_PUBLISH_ACKCMDID] = pt_stream.PublishAck;
    ptDesc[CMD_PUBLISH_NOTIFYCMDID] = pt_stream.PublishNotify;
    ptDesc[MATCHVS_USER_HEARTBEAT_RSP] = pt_stream.HeartbeatRsp;
    ptDesc[CMD_GET_ROOM_LIST_RSP] = pt_stream.GetRoomListRsp;
    ptDesc[MATCHVS_USER_LOGOUT_RSP] = pt_stream.LogoutRsp;
    ptDesc[CMD_DISCONNECT_RSP] = pt_stream.DisconnectRsp;
    ptDesc[CMD_KICK_PLAYER_NOTIFY] = pt_stream.KickPlayerNotify;
    ptDesc[CMD_KICK_PLAYER_RSP] = pt_stream.KickPlayerRsp;
    ptDesc[CMD_SET_FRAME_SYNCRATEACK_CMDID] = pt_stream.SetFrameSyncRateAck;
    ptDesc[CMD_FRAME_BROADCASTACK_CMDID] = pt_stream.FrameBroadcastAck;
    ptDesc[CMD_SET_FRAME_SYNCRATENOTIFY_CMDID] = pt_stream.SetFrameSyncRateNotify;
    ptDesc[CMD_FRAME_DATANOTIFY_CMDID] = pt_stream.FrameDataNotify;
    ptDesc[MATCHVS_NETWORK_STATE_NOTIFY] = pt_stream.NetworkStateNotify;
    ptDesc[CMD_FRAME_SYNCNOTIFY_CMDID] = pt_stream.FrameSyncNotify;
    ptDesc[CMD_GET_ROOM_LIST_EX_RSP] = pt_stream.GetRoomListExRsp;
    ptDesc[MATCHVS_ROOM_JOIN_OVER_NOTIFY] = pt_stream.JoinOverNotify;
    ptDesc[CMD_GET_ROOM_DETAIL_RSP] = pt_stream.GetRoomDetailRsp;
    ptDesc[CMD_SET_ROOM_PROPERTY_RSP] = pt_stream.SetRoomPropertyRsp;
    ptDesc[CMD_ROOM_JOIN_OPEN_RSP] = pt_stream.JoinOpenRsp;
    ptDesc[CMD_SET_ROOM_PROPERTY_NOTIFY] = pt_stream.NoticeRoomProperty;
    ptDesc[CMD_ROOM_JOIN_OPEN_NOT] = pt_stream.JoinOpenNotify;
    ptDesc[ProtoCmd.JOIN_WATCHROOM_RSP] = pt_stream.JoinWatchRoomRsp;
    ptDesc[ProtoCmd.ENTER_LIVEROOM_RSP] = pt_stream.EnterLiveRoomAck;
    ptDesc[ProtoCmd.ENTER_LIVEROOM_NOTIFY] = pt_stream.EnterLiveRoomNotify;
    ptDesc[ProtoCmd.LIVE_HEARTBEAT_RSP] = pt_stream.LiveHeartbeatAck;
    ptDesc[ProtoCmd.LIVE_BROADCAST_RSP] = pt_stream.LiveBroadcastAck;
    ptDesc[ProtoCmd.LIVE_BROADCAST_NOTIFY] = pt_stream.LiveBroadcastNotify;
    ptDesc[ProtoCmd.SET_LIVEOFFSET_RSP] = pt_stream.SetLiveOffsetAck;
    ptDesc[ProtoCmd.EXIT_LIVEROOM_NOTIFY] = pt_stream.ExitLiveRoomNotify;
    ptDesc[ProtoCmd.LIVE_OVER_NOTIFY] = pt_stream.LiveOverNotify;
    ptDesc[ProtoCmd.LIVE_FRAMEDATA_NOTIFY] = pt_stream.LiveFrameDataNotify;
    ptDesc[ProtoCmd.LIVE_FRAMESYNC_NOTIFY] = pt_stream.LiveFrameSyncNotify;
    ptDesc[ProtoCmd.LEAVE_WATCHROOM_RSP] = pt_stream.LeaveWatchRoomRsp;
    ptDesc[ProtoCmd.GET_WATCHROOM_RSP] = pt_stream.GetWatchRoomsRsp;
    ptDesc[ProtoCmd.CHANGE_ROLE_RSP] = pt_stream.ChangeRoleRsp;
    ptDesc[ProtoCmd.SET_RECONNECT_TIMEOUT_RSP] = pt_stream.SetReconnectTimeoutRsp;
    ptDesc[ProtoCmd.CREATE_TEAM_RSP] = pt_stream.CreateTeamRsp;
    ptDesc[ProtoCmd.JOIN_TEAM_RSP] = pt_stream.JoinTeamRsp;
    ptDesc[ProtoCmd.JOIN_TEAM_NOTIFY] = pt_stream.JoinTeamNotify;
    ptDesc[ProtoCmd.LEAVE_TEAM_RSP] = pt_stream.LeaveTeamRsp;
    ptDesc[ProtoCmd.LEAVE_TEAM_NOTIFY] = pt_stream.LeaveTeamNotify;
    ptDesc[ProtoCmd.TEAM_MATCH_RSP] = pt_stream.TeamMatchRsp;
    ptDesc[ProtoCmd.TEAM_MATCH_RESULT_NOTIFY] = pt_stream.TeamMatchResultNotify;
    ptDesc[ProtoCmd.TEAM_MATCH_START_NOTIFY] = pt_stream.TeamMatchStartNotify;
    ptDesc[ProtoCmd.GET_CACHEdATA_RSP] = pt_stream.GetCacheDataAck;
    function MatchvsProtocol() {
        this.seq = 1;
        var mUserID = 0;
        var isLogin = false;
        this.fillHeader = function(dataArray, cmd) {
            MVS.mtaReport && MVS.mtaReport.Report(cmd);
            var buffer = new ArrayBuffer(FIXED_HEAD_SIZE + dataArray.length);
            var dataView = new DataView(buffer);
            dataView.setInt32(0, buffer.byteLength, true);
            dataView.setInt32(4, this.seq++, true);
            dataView.setInt16(8, cmd, true);
            if (isLogin) {
                isLogin = false;
                dataView.setInt16(10, 3, true);
            } else {
                dataView.setInt16(10, VERSION, true);
            }
            dataView.setInt32(12, Number(mUserID), true);
            var length = dataArray.length;
            for (var i = 0; i < length; i++) {
                dataView.setUint8(i + FIXED_HEAD_SIZE, dataArray[i]);
            }
            return dataView;
        };
        this.parseHeader = function(msg) {
            var dataView = msg;
            var head = new MatchvsHeader();
            head.size = dataView.getInt32(0, true);
            head.seq = dataView.getInt32(4, true);
            head.cmd = dataView.getInt16(8, true);
            head.version = dataView.getInt16(10, true);
            head.userID = dataView.getInt32(12, true);
            return head;
        };
        this.handleMsg = function(msg) {
            var dataView = msg;
            var header = this.parseHeader(msg);
            var ext = new Uint8Array(header.size - FIXED_HEAD_SIZE);
            for (var i = 0; i < ext.length; i++) {
                ext[i] = msg.getUint8(FIXED_HEAD_SIZE + i);
            }
            var protoMap = ptDesc[header.cmd];
            var packet = new Packet();
            packet.header = header;
            packet.buf = dataView;
            if (protoMap) {
                packet.payload = protoMap.deserializeBinary && protoMap.deserializeBinary(msg.buffer.slice(FIXED_HEAD_SIZE, msg.buffer.byteLength));
            } else {
                MatchvsLog.logI("[WARN]unknown msg,Head:" + header);
            }
            return packet;
        };
        this.init = function() {};
        this.login = function(userID, token, gameID, appkey, deviceID) {
            var md5Token = hex_md5(token);
            var toMd5 = format("%s&UserID=%s&GameID=%s&VersionSdk=%d&%s", appkey, userID, gameID, 3, md5Token);
            mUserID = userID;
            var md5 = hex_md5(toMd5);
            MatchvsLog.logI("[Sign]" + toMd5 + "->" + md5);
            var message = new pt_stream.LoginReq();
            message.setGameid(Number(gameID));
            message.setAppkey(appkey);
            message.setToken(md5Token);
            message.setSdkver("3");
            message.setDeviceid(deviceID);
            message.setSign(md5);
            var dataArray = message.serializeBinary();
            MatchvsLog.logI("[REQ]login...userID:" + userID);
            isLogin = true;
            return this.fillHeader(dataArray, MATCHVS_USER_LOGIN_REQ);
        };
        this.roomCreate = function(gameID, pRoomInfo, pPlayInfo, watchSet) {
            var message = new pt_stream.CreateRoomReq();
            message.setGameid(Number(gameID));
            var pi = new pt_stream.PlayerInfo();
            pi.setUserid(pPlayInfo.userID);
            pi.setUserprofile(stringToUtf8ByteArray(pPlayInfo.userProfile));
            message.setPlayerinfo(pi);
            var roomInfo = new pt_stream.RoomInfo();
            roomInfo.setMaxplayer(Number(pRoomInfo.maxPlayer));
            roomInfo.setCanwatch(pRoomInfo.canWatch);
            roomInfo.setMode(pRoomInfo.mode);
            roomInfo.setVisibility(pRoomInfo.visibility);
            roomInfo.setRoomname(pRoomInfo.roomName);
            roomInfo.setRoomproperty(stringToUtf8ByteArray(pRoomInfo.roomProperty));
            message.setRoominfo(roomInfo);
            if (watchSet) {
                var wtch = new pt_stream.WatchSetting();
                wtch.setCachetime(watchSet.cacheMS);
                wtch.setMaxwatch(watchSet.maxWatch);
                wtch.setWatchdelayms(watchSet.delayMS);
                wtch.setWatchpersistent(watchSet.persistent);
                message.setWatchsetting(wtch);
            }
            var bytes = message.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_ROOM_CREATE_REQ);
        };
        this.joinRandomRoom = function(roomJoin) {
            var message = new pt_stream.JoinRoomReq();
            message.setGameid(Number(roomJoin.gameID));
            message.setJointype(pt_stream.JoinRoomType.JOINRANDOMROOM);
            message.setCpproto(stringToUtf8ByteArray(roomJoin.userProfile));
            var playInfo = new pt_stream.PlayerInfo();
            playInfo.setUserid(roomJoin.userID);
            playInfo.setUserprofile(stringToUtf8ByteArray(roomJoin.userProfile));
            message.setPlayerinfo(playInfo);
            var roomInfo = new pt_stream.RoomInfo();
            roomInfo.setMaxplayer(roomJoin.maxPlayer);
            roomInfo.setCanwatch(roomJoin.canWatch);
            roomInfo.setMode(roomJoin.mode);
            roomInfo.setVisibility(0);
            message.setRoominfo(roomInfo);
            var bytes = message.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_ROOM_JOIN_REQ);
        };
        this.joinRoomSpecial = function(roomJoin) {
            var message = new pt_stream.JoinRoomReq();
            message.setGameid(Number(roomJoin.gameID));
            message.setJointype(roomJoin.joinType);
            message.setCpproto(stringToUtf8ByteArray(roomJoin.userProfile));
            var playInfo = new pt_stream.PlayerInfo();
            playInfo.setUserid(roomJoin.userID);
            playInfo.setUserprofile(stringToUtf8ByteArray(roomJoin.userProfile));
            message.setPlayerinfo(playInfo);
            var roomInfo = new pt_stream.RoomInfo();
            roomInfo.setMaxplayer(roomJoin.maxPlayer);
            roomInfo.setCanwatch(roomJoin.canWatch);
            roomInfo.setMode(roomJoin.mode);
            roomInfo.setVisibility(0);
            roomInfo.setRoomid(roomJoin.roomID);
            message.setRoominfo(roomInfo);
            var bytes = message.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_ROOM_JOIN_REQ);
        };
        this.joinRoomWithProperties = function(roomJoin, watchSet) {
            var message = new pt_stream.JoinRoomReq();
            var kvtags = [];
            var temp = roomJoin.tags;
            var num = 0;
            for (var k in temp) {
                var tag = new pt_stream.keyValue();
                tag.setKey(k);
                tag.setValue(temp[k]);
                kvtags[num++] = tag;
            }
            message.setTagsList(kvtags);
            message.setGameid(roomJoin.gameID);
            message.setJointype(pt_stream.JoinRoomType.JOINROOMWITHPROPERTY);
            message.setCpproto(stringToUtf8ByteArray(roomJoin.userProfile));
            var playInfo = new pt_stream.PlayerInfo();
            playInfo.setUserid(roomJoin.userID);
            playInfo.setUserprofile(stringToUtf8ByteArray(roomJoin.userProfile));
            message.setPlayerinfo(playInfo);
            var roomInfo = new pt_stream.RoomInfo();
            roomInfo.setMaxplayer(roomJoin.maxPlayer);
            roomInfo.setCanwatch(roomJoin.canWatch);
            roomInfo.setMode(roomJoin.mode);
            roomInfo.setVisibility(roomJoin.visibility);
            roomInfo.setRoomproperty(stringToUtf8ByteArray(roomJoin.roomProperty));
            roomInfo.setRoomid(roomJoin.roomID);
            message.setRoominfo(roomInfo);
            if (watchSet) {
                var wtch = new pt_stream.WatchSetting();
                wtch.setCachetime(watchSet.cacheMS);
                wtch.setMaxwatch(watchSet.maxWatch);
                wtch.setWatchdelayms(watchSet.delayMS);
                wtch.setWatchpersistent(watchSet.persistent);
                message.setWatchsetting(wtch);
            }
            var bytes = message.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_ROOM_JOIN_REQ);
        };
        this.roomCheckIn = function(bookInfo, roomInfo, userID, gameID) {
            var pkg = new pt_stream.CheckIn();
            pkg.setGameid(Number(gameID));
            pkg.setRoomid(roomInfo.getRoomid());
            pkg.setUserid(Number(userID));
            pkg.setBookid(bookInfo.getBookid());
            pkg.setKey(bookInfo.getBookkey());
            var bytes = pkg.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_ROOM_CHECK_IN_REQ);
        };
        this.getRoomList = function(gameID, filter) {
            var pkg = new pt_stream.GetRoomListReq();
            var roomFilter = new pt_stream.RoomFilter();
            roomFilter.setCanwatch(filter.canWatch);
            roomFilter.setMaxplayer(filter.maxPlayer);
            roomFilter.setMode(Number(filter.mode));
            roomFilter.setRoomproperty(stringToUtf8ByteArray(filter.roomProperty));
            pkg.setGameid(gameID);
            pkg.setRoomfilter(roomFilter);
            var bytes = pkg.serializeBinary();
            return this.fillHeader(bytes, CMD_GET_ROOM_LIST_REQ);
        };
        this.getRoomListEx = function(gameID, filter) {
            var pkg = new pt_stream.GetRoomListExReq();
            var roomFilter = new pt_stream.RoomFilter();
            roomFilter.setMaxplayer(filter.maxPlayer);
            roomFilter.setMode(Number(filter.mode));
            roomFilter.setFull(filter.full);
            roomFilter.setCanwatch(filter.canWatch);
            roomFilter.setRoomproperty(stringToUtf8ByteArray(filter.roomProperty));
            roomFilter.setState(filter.state);
            pkg.setGameid(gameID);
            pkg.setRoomfilter(roomFilter);
            pkg.setSort(filter.sort);
            pkg.setOrder(filter.order);
            pkg.setPageno(filter.pageNo);
            pkg.setPagesize(filter.pageSize);
            var bytes = pkg.serializeBinary();
            return this.fillHeader(bytes, CMD_GET_ROOM_LIST_EX_REQ);
        };
        this.getRoomDetail = function(gameID, roomID) {
            var pkg = new pt_stream.GetRoomDetailReq();
            pkg.setGameid(gameID);
            pkg.setRoomid(roomID);
            var bytes = pkg.serializeBinary();
            return this.fillHeader(bytes, CMD_GET_ROOM_DETAIL_REQ);
        };
        this.joinOver = function(gameID, roomID, cpproto, userID) {
            var pkg = new pt_stream.JoinOverReq();
            pkg.setGameid(gameID);
            pkg.setRoomid(roomID);
            pkg.setCpproto(cpproto);
            pkg.setUserid(userID);
            var bytes = pkg.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_ROOM_JOIN_OVER_REQ);
        };
        this.leaveRoom = function(gameID, userID, roomID, cpproto) {
            var pkg = new pt_stream.LeaveRoomReq();
            pkg.setGameid(gameID);
            pkg.setUserid(userID);
            pkg.setRoomid(roomID);
            pkg.setCpproto(stringToUtf8ByteArray(cpproto));
            var bytes = pkg.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_ROOM_LEAVE_REQ);
        };
        this.heartBeat = function(gameID, roomID) {
            var pkg = new pt_stream.HeartbeatReq();
            pkg.setGameid(gameID);
            pkg.setRoomid(roomID);
            var dataArray = pkg.serializeBinary();
            return this.fillHeader(dataArray, MATCHVS_USER_HEARTBEAT_REQ);
        };
        this.logout = function(cpProto) {
            var buf = stringToUtf8ByteArray(cpProto);
            return this.fillHeader(buf, MATCHVS_USER_LOGOUT_REQ);
        };
        this.broadCast = function(roomID, destUids, destType, msgType, data) {
            var broadcast = new pt_stream.Broadcast();
            broadcast.setRoomid(roomID);
            broadcast.setDstuidsList(destUids);
            broadcast.setCpproto(data);
            var priority = 2;
            var flag = ((priority & 15) << 4) + ((destType & 3) << 2) + (msgType & 3);
            broadcast.setFlag(flag);
            var bytes = broadcast.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_BROADCAST_HOTEL_REQ);
        };
        this.subscribeEventGroup = function(gameID, roomID, confirms, cancels) {
            var subscribe = new pt_stream.Subscribe();
            subscribe.setRoomid(roomID);
            subscribe.setGameid(gameID);
            subscribe.setCancelsList(cancels);
            subscribe.setConfirmsList(confirms);
            var bytes = subscribe.serializeBinary();
            return this.fillHeader(bytes, CMD_SUBSCRIBE_CMDID);
        };
        this.sendEventGroup = function(userID, roomID, priority, groups, cpproto) {
            var sendevnt = new pt_stream.Publish();
            sendevnt.setRoomid(roomID);
            sendevnt.setPriority(priority);
            sendevnt.setCpproto(stringToUtf8ByteArray(cpproto));
            sendevnt.setGroupsList(groups);
            var bytes = sendevnt.serializeBinary();
            return this.fillHeader(bytes, CMD_PUBLISH_CMDID);
        };
        this.hotelHeartBeat = function(gameID, roomID, userID) {
            var heartbeat = new pt_stream.Heartbeat();
            heartbeat.setGameid(gameID);
            heartbeat.setRoomid(roomID);
            heartbeat.setUserid(userID);
            var bytes = heartbeat.serializeBinary();
            return this.fillHeader(bytes, MATCHVS_HEARTBEAT_HOTEL_REQ);
        };
        this.disConnect = function(userID, gameID, roomId) {
            var paker = new pt_stream.DisconnectReq();
            paker.setGameid(gameID);
            paker.setRoomid(roomId);
            paker.setUserid(userID);
            var bytes = paker.serializeBinary();
            return this.fillHeader(bytes, CMD_DISCONNECT_REQ);
        };
        this.kickPlayer = function(userid, srcUserId, roomid, data) {
            var kick = new pt_stream.KickPlayerReq();
            kick.setRoomid(roomid);
            kick.setSrcuserid(srcUserId);
            kick.setUserid(userid);
            kick.setCpproto(stringToUtf8ByteArray(data));
            var bytes = kick.serializeBinary();
            return this.fillHeader(bytes, CMD_KICK_PLAYER_REQ);
        };
        this.setFrameSync = function(info) {
            var reqEx = new pt_stream.SetFrameSyncRate();
            MVS.DEBUG && console.log("SetFrameSyncRate :" + JSON.stringify(info));
            reqEx.setGameid(info.gameID);
            reqEx.setRoomid(info.roomID);
            reqEx.setPriority(info.priority);
            reqEx.setFramerate(info.frameRate);
            reqEx.setFrameidx(info.frameidx);
            reqEx.setEnablegs(info.enableGS);
            reqEx.setCacheframems(info.cacheMs);
            var bytes = reqEx.serializeBinary();
            return this.fillHeader(bytes, CMD_SET_FRAME_SYNCRATE_CMDID);
        };
        this.sendFrameEvent = function(roomID, priority, cpProto, op) {
            var reqEx = new pt_stream.FrameBroadcast();
            reqEx.setRoomid(roomID);
            reqEx.setPriority(priority);
            reqEx.setOperation(Number(op));
            reqEx.setCpproto(stringToUtf8ByteArray(cpProto));
            var bytes = reqEx.serializeBinary();
            return this.fillHeader(bytes, CMD_FRAME_BROADCAST_CMDID);
        };
        this.setRoomProperty = function(gameID, userID, roomID, roomProperty) {
            var reqEx = new pt_stream.SetRoomPropertyReq();
            reqEx.setGameid(gameID);
            reqEx.setRoomid(roomID);
            reqEx.setUserid(userID);
            reqEx.setRoomproperty(stringToUtf8ByteArray(roomProperty));
            var bytes = reqEx.serializeBinary();
            return this.fillHeader(bytes, CMD_SET_ROOM_PROPERTY_REQ);
        };
        this.joinOpen = function(gameID, userID, roomID, cpProto) {
            var reqEx = new pt_stream.JoinOpenReq();
            reqEx.setRoomid(roomID);
            reqEx.setGameid(gameID);
            reqEx.setUserid(userID);
            reqEx.setCpproto(stringToUtf8ByteArray(cpProto));
            var bytes = reqEx.serializeBinary();
            return this.fillHeader(bytes, CMD_ROOM_JOIN_OPEN_REQ);
        };
        this.joinWatchRoom = function(gameID, userID, roomID, userProfile) {
            var req = new pt_stream.JoinWatchRoomReq();
            req.setGameid(gameID);
            req.setRoomid(roomID);
            req.setUserid(userID);
            req.setUserprofile(stringToUtf8ByteArray(userProfile));
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, pt_stream.CmdId.JOINWATCHROOMREQ);
        };
        this.enterLiveRoom = function(bookInfo, gameID, userID, roomID, nodeID) {
            var req = new pt_stream.EnterLiveRoom();
            req.setBookid(bookInfo.getBookid());
            req.setTicket(bookInfo.getBookkey());
            req.setGameid(gameID);
            req.setUserid(userID);
            req.setSetid(nodeID);
            req.setUserprofile("");
            req.setRoomid(roomID);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, pt_stream.SDKWatchCmdID.ENTERLIVEROOMCMDID);
        };
        this.leaveWatchRoom = function(gameID, userID, roomID, cpProto) {
            var req = new pt_stream.LeaveWatchRoomReq();
            req.setCpproto(stringToUtf8ByteArray(cpProto));
            req.setGameid(gameID);
            req.setUserid(userID);
            req.setRoomid(roomID);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, pt_stream.CmdId.LEAVEWATCHROOMREQ);
        };
        this.getWatchRooms = function(gameID, filter) {
            var pkg = new pt_stream.GetWatchRoomsReq();
            var roomFilter = new pt_stream.RoomFilter();
            roomFilter.setMaxplayer(filter.maxPlayer);
            roomFilter.setMode(Number(filter.mode));
            roomFilter.setFull(filter.full);
            roomFilter.setCanwatch(filter.canWatch);
            roomFilter.setRoomproperty(stringToUtf8ByteArray(filter.roomProperty));
            roomFilter.setState(filter.state);
            pkg.setGameid(gameID);
            pkg.setRoomfilter(roomFilter);
            pkg.setSort(filter.sort);
            pkg.setOrder(filter.order);
            pkg.setPageno(filter.pageNo);
            pkg.setPagesize(filter.pageSize);
            var bytes = pkg.serializeBinary();
            return this.fillHeader(bytes, pt_stream.CmdId.GETWATCHROOMSREQ);
        };
        this.liveHeartBeat = function(gameID, roomID, userID) {
            var req = new pt_stream.LiveHeartbeat();
            req.setGameid(Number(gameID));
            req.setRoomid(roomID);
            req.setUserid(Number(userID));
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, pt_stream.SDKWatchCmdID.LIVEHEARTBEATCMDID);
        };
        this.broadCastWatch = function(roomID, dstUid, destType, msgType, cpProto) {
            var req = new pt_stream.LiveBroadcast();
            req.setRoomid(roomID);
            req.setDstuidsList(dstUid);
            req.setCpproto(stringToUtf8ByteArray(cpProto));
            var priority = 2;
            var flag = ((priority & 15) << 4) + ((destType & 3) << 2) + (msgType & 3);
            req.setFlag(flag);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, pt_stream.SDKWatchCmdID.LIVEBROADCASTCMDID);
        };
        this.setLiveOffset = function(gameID, roomID, userID, offsetMS) {
            var req = new pt_stream.SetLiveOffset();
            req.setGameid(gameID);
            req.setRoomid(roomID);
            req.setUserid(userID);
            req.setOffsetms(offsetMS);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, MVS.ProtoCmd.SET_LIVEOFFSET_REQ);
        };
        this.changeRoleProto = function(userID, gameID, roomID, type, userProfile) {
            var req = new pt_stream.ChangeRole();
            req.setGameid(gameID);
            req.setRoomid(roomID);
            req.setUserid(userID);
            req.setUserprofile(stringToUtf8ByteArray(userProfile));
            var roomtype = type === 0 ? pt_stream.RoomType.GAMEROOM : pt_stream.RoomType.WATCHROOMTYPE;
            req.setTargetroomtype(roomtype);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, MVS.ProtoCmd.CHANGE_ROLE_REQ);
        };
        this.setReconnectTimeout = function(userID, timeout) {
            var req = new pt_stream.SetReconnectTimeoutReq();
            req.setTimeout(Number(timeout));
            req.setUserid(Number(userID));
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, MVS.ProtoCmd.SET_RECONNECT_TIMEOUT_REQ);
        };
        this.CreateTeam = function(gameID, team, player) {
            MVS.DEBUG && console.log("CreateTeam gameID:", gameID, " teamInfo:", team);
            var teamInfo = new pt_stream.TeamInfo();
            teamInfo.setCapacity(team.capacity);
            teamInfo.setTeamid(team.teamID);
            teamInfo.setPassword(team.password);
            teamInfo.setMode(team.mode);
            teamInfo.setOwner(team.owner);
            teamInfo.setVisibility(team.visibility);
            var playerInfo = new pt_stream.PlayerInfo();
            playerInfo.setUserid(player.userID);
            playerInfo.setUserprofile(stringToUtf8ByteArray(player.userProfile));
            var req = new pt_stream.CreateTeamReq();
            req.setGameid(Number(gameID));
            req.setPlayerinfo(playerInfo);
            req.setTeaminfo(teamInfo);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, MVS.ProtoCmd.CREATE_TEAM_REQ);
        };
        this.JoinTeam = function(info) {
            var player = new pt_stream.PlayerInfo();
            player.setUserid(info.player.userID);
            player.setUserprofile(stringToUtf8ByteArray(info.player.userProfile));
            var req = new pt_stream.JoinTeamReq();
            req.setGameid(info.gameID);
            req.setTeamid(info.teamID);
            req.setPlayerinfo(player);
            req.setPassword(info.password);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, MVS.ProtoCmd.JOIN_TEAM_REQ);
        };
        this.LeaveTeam = function(args) {
            MVS.DEBUG && console.log("LeaveTeam args:", args);
            var req = new pt_stream.LeaveTeamReq();
            req.setGameid(Number(args.gameID));
            req.setTeamid(args.teamID);
            req.setUserid(Number(args.userID));
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, MVS.ProtoCmd.LEAVE_TEAM_REQ);
        };
        this.TeamMatch = function(args) {
            MVS.DEBUG && console.log("TeamMatch args:", args);
            var cond = new pt_stream.TeamMatchCond();
            cond.setFull(args.cond.full);
            cond.setTeammembernum(args.cond.teamMemberNum);
            cond.setTeamnum(args.cond.teamNum);
            cond.setTimeout(args.cond.timeout);
            cond.setWeight(args.cond.weight);
            cond.setWeightrange(args.cond.weightRange);
            cond.setWeightrule(args.cond.weightRule);
            var watchset = new pt_stream.WatchSetting();
            watchset.setWatchpersistent(args.watchSet.persistent);
            watchset.setWatchdelayms(args.watchSet.delayMS);
            watchset.setMaxwatch(args.watchSet.maxWatch);
            watchset.setCachetime(args.watchSet.cacheMS);
            var roomInfo = new pt_stream.RoomInfo();
            roomInfo.setRoomproperty(stringToUtf8ByteArray(args.roomInfo.roomProperty));
            roomInfo.setCanwatch(args.roomInfo.canWatch);
            roomInfo.setMaxplayer(args.roomInfo.maxPlayer);
            roomInfo.setMode(args.roomInfo.mode);
            roomInfo.setOwner(0);
            roomInfo.setRoomid("");
            roomInfo.setRoomname(args.roomInfo.roomName);
            roomInfo.setVisibility(args.roomInfo.visibility);
            var req = new pt_stream.TeamMatchReq();
            req.setGameid(args.gameID);
            req.setTeamid(args.teamID);
            req.setUserid(args.userID);
            req.setCond(cond);
            req.setRoominfo(roomInfo);
            req.setWatchsetting(watchset);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, ProtoCmd.TEAM_MATCH_REQ);
        };
        this.GetOffLineData = function(info) {
            var req = new pt_stream.GetCacheData();
            req.setCacheframems(info.cacheFrameMS);
            req.setRoomid(info.roomID);
            req.setGameid(info.gameID);
            var bytes = req.serializeBinary();
            return this.fillHeader(bytes, ProtoCmd.GET_CACHEDATA_REQ);
        };
    }
    _obj.MatchvsProtocol = MatchvsProtocol;
})(MVS || {});

var NetWorkCallBackImp = function(engine) {
    MSExtend(this, MVS.MatchvsNetWork);
    this.engineWorkMap = new MVS.EngineNetworkMap();
    this.gtwTimer = 0;
    this.watchTimer = 0;
    this.mHotelTimer = 0;
    this.frameCache = [];
    this.hbTimers = [];
    this.clearAllBeatTimer = function() {
        while (this.hbTimers.length > 0) {
            MVS.ticker.clearInterval(this.hbTimers.pop());
        }
    };
    this.onMsg = function(dataView) {
        var packet = engine.mProtocol.handleMsg(dataView);
        var roomInfo = new proto.stream.RoomInfo();
        var event = {
            hotelTimer: this.mHotelTimer,
            watchTimer: this.watchTimer,
            payload: packet.payload,
            seq: packet.header.seq,
            roomInfo: roomInfo,
            frameCache: this.frameCache,
            teamNotifyInfo: this.teamNotifyInfo
        };
        var dohandle = this.engineWorkMap[packet.header.cmd];
        MVS.mtaReport && MVS.mtaReport.Report(packet.header.cmd);
        console.log("[数据通信协议命令][" + packet.header.cmd + "]:" + Date.now());
        if (dohandle) {
            dohandle.doSubHandle(event, engine);
        } else {
            MatchvsLog.logE("no the cmd: ", packet.header.cmd);
        }
    };
    this.onErr = function(errCode, errMsg) {
        MVS.ErrorRspWork(engine.mRsp.errorResponse, errCode, errMsg);
    };
    this.onConnect = function(host) {
        if (MVS.Host.HOST_HOTEL_ADDR !== "" && host.indexOf(MVS.Host.HOST_HOTEL_ADDR) >= 0) {
            this.mHotelTimer = MVS.ticker.setInterval(engine.hotelHeartBeat, MVS.Config.HEART_BEAT_INTERVAL);
            this.hbTimers.push(this.mHotelTimer);
        } else if (MVS.Host.HOST_WATCH_ADDR !== "" && host.indexOf(MVS.Host.HOST_WATCH_ADDR) >= 0) {
            this.watchTimer = MVS.ticker.setInterval(engine.liveHeartBeat, MVS.Config.HEART_BEAT_INTERVAL);
            this.hbTimers.push(this.watchTimer);
        } else if (MVS.Host.HOST_GATWAY_ADDR !== "" && host.indexOf(MVS.Host.HOST_GATWAY_ADDR) >= 0) {
            this.gtwTimer = MVS.ticker.setInterval(engine.heartBeat, MVS.Config.HEART_BEAT_INTERVAL);
            this.hbTimers.push(this.gtwTimer);
        }
        engine.mRsp.onConnect && engine.mRsp.onConnect(host);
    };
    this.onDisConnect = function(host, event) {
        engine.mCntRoomType = MVS.TgRoomType.NRoom;
        engine.mRsp.onDisConnect && engine.mRsp.onDisConnect(host);
        if (host.endsWith(MVS.Host.HOST_GATWAY_ADDR)) {
            engine.mState.SetInit();
            MatchvsLog.logI("gateway disconnect");
            if (event && event.code && (event.code === MvsCode.CODE_1000 || event.code === MvsCode.CODE_1005)) {
                MatchvsLog.logI("gateway close is friend");
            } else {
                this.clearAllBeatTimer();
                engine.mHotelNetWork && engine.mHotelNetWork.close();
                MVS.ErrorRspWork(engine.mRsp.errorResponse, MvsCode.NetworkErr, "(" + event.code + ") " + "gateway network error");
            }
            MVS.ticker.clearInterval(this.gtwTimer);
        } else if (MVS.Host.HOST_WATCH_ADDR !== "" && host.endsWith(MVS.Host.HOST_WATCH_ADDR)) {
            MatchvsLog.logI("live disconnect");
            if (event && event.code && (event.code === MvsCode.CODE_1000 || event.code === MvsCode.CODE_1005)) {
                MatchvsLog.logI("live close is friend");
            } else {
                engine.mState.SetInit();
                this.clearAllBeatTimer();
                engine.mWatchNetwrok && engine.mWatchNetwrok.close();
                MVS.ErrorRspWork(engine.mRsp.errorResponse, MvsCode.NetworkErr, "(" + event.code + ") " + "watch network error");
            }
            MVS.ticker.clearInterval(this.watchTimer);
            engine.mState.DelInRoom();
        } else if (MVS.Host.HOST_HOTEL_ADDR !== "" && host.endsWith(MVS.Host.HOST_HOTEL_ADDR)) {
            MatchvsLog.logI("hotel disconnect");
            if (event && event.code && (event.code === MvsCode.CODE_1000 || event.code === MvsCode.CODE_1005)) {
                MatchvsLog.logI("hotel close is friend");
            } else {
                engine.mState.SetInit();
                this.clearAllBeatTimer();
                engine.mGTWNetwork && engine.mGTWNetwork.close();
                MVS.ErrorRspWork(engine.mRsp.errorResponse, MvsCode.NetworkErr, "(" + event.code + ") " + "hotel network error");
            }
            MVS.ticker.clearInterval(this.mHotelTimer);
            engine.mState.DelInRoom();
        }
    };
};

(function(_obj) {
    function EngineNetworkMap() {
        this[MVS.ProtoCmd.LOGIN_RSP] = new LoginRspWork();
        this[MVS.ProtoCmd.JOIN_ROOM_RSP] = new JoinRoomRspWork();
        this[MVS.ProtoCmd.JOIN_ROOM_NOTIFY] = new JoinRoomNotifyWork();
        this[MVS.ProtoCmd.CHECK_IN_RSP] = new CheckInRoomRspWork();
        this[MVS.ProtoCmd.CREATE_ROOM_RSP] = new CreateRoomRspWork();
        this[MVS.ProtoCmd.CHECK_IN_NOTIFY] = new CheckInRoomNtfyWork();
        this[MATCHVS_ROOM_JOIN_OVER_RSP] = new JoinOverRspWork();
        this[MATCHVS_ROOM_JOIN_OVER_NOTIFY] = new JoinOverNotifyWork();
        this[MATCHVS_ROOM_LEAVE_RSP] = new LeaveRoomRspWork();
        this[MATCHVS_ROOM_NOTICE_USER_LEAVE] = new LeaveRoomNotifyWork();
        this[MATCHVS_USER_HEARTBEAT_RSP] = new HeartBeatGatewayRspWork();
        this[MATCHVS_HEARTBEAT_HOTEL_RSP] = new HeartBeatHotelRspWork();
        this[MATCHVS_BROADCAST_HOTEL_RSP] = new SendEventRspWork();
        this[MATCHVS_HOTEL_NOTIFY] = new SendEventNotifyWork();
        this[CMD_SUBSCRIBE_ACK_CMDID] = new SubscribeEventGroupRspWork();
        this[CMD_PUBLISH_ACKCMDID] = new SendEventGroupRspWork();
        this[CMD_PUBLISH_NOTIFYCMDID] = new SendEventGroupNotifyWork();
        this[MATCHVS_USER_GATEWAY_SPEED_RSP] = new GatewaySpeedRspWork();
        this[CMD_GET_ROOM_LIST_RSP] = new GetRoomListRspWork();
        this[MATCHVS_USER_LOGOUT_RSP] = new LoginOutRspWork();
        this[CMD_DISCONNECT_RSP] = new DisConnectRspWork();
        this[CMD_KICK_PLAYER_NOTIFY] = new KickPlayerNotifyWork();
        this[CMD_KICK_PLAYER_RSP] = new KickPlayerRspWork();
        this[CMD_SET_FRAME_SYNCRATEACK_CMDID] = new SetFrameSyncRspWork();
        this[CMD_FRAME_BROADCASTACK_CMDID] = new SendFrameEventRspWork();
        this[CMD_SET_FRAME_SYNCRATENOTIFY_CMDID] = new SetFrameSyncNotifyWork();
        this[CMD_FRAME_DATANOTIFY_CMDID] = new FrameDataNotifyWork();
        this[CMD_FRAME_SYNCNOTIFY_CMDID] = new FrameSyncNotifyWork();
        this[MATCHVS_NETWORK_STATE_NOTIFY] = new NetworkStateNotifyWork();
        this[CMD_GET_ROOM_LIST_EX_RSP] = new GetRoomListRspWork_Ex();
        this[CMD_GET_ROOM_DETAIL_RSP] = new GetRoomDetailRspWork();
        this[CMD_SET_ROOM_PROPERTY_RSP] = new SetRoomPropertyRspWokr();
        this[CMD_SET_ROOM_PROPERTY_NOTIFY] = new SetRoomPropertyNotifyWork();
        this[CMD_ROOM_JOIN_OPEN_RSP] = new JoinOpenRspWork();
        this[CMD_ROOM_JOIN_OPEN_NOT] = new JoinOpenNotifyWork();
        this[MVS.ProtoCmd.JOIN_WATCHROOM_RSP] = new JoinWatchRoomRspWork();
        this[MVS.ProtoCmd.LEAVE_WATCHROOM_RSP] = new LeaveWatchRoomRspWork();
        this[MVS.ProtoCmd.GET_WATCHROOM_RSP] = new GeWatchRoomListRspWork();
        this[MVS.ProtoCmd.CHANGE_ROLE_RSP] = new ChangeRoleRspWork();
        this[MVS.ProtoCmd.ENTER_LIVEROOM_RSP] = new EnterLiveRoomRspWork();
        this[MVS.ProtoCmd.ENTER_LIVEROOM_NOTIFY] = new EnterLiveRoomNotifyWork();
        this[MVS.ProtoCmd.LIVE_HEARTBEAT_RSP] = new WatchHeartBeatRspWork();
        this[MVS.ProtoCmd.LIVE_BROADCAST_RSP] = new LiveBroadcastRspWork();
        this[MVS.ProtoCmd.LIVE_BROADCAST_NOTIFY] = new LiveBroadcastNotifyWork();
        this[MVS.ProtoCmd.SET_LIVEOFFSET_RSP] = new SetLiveOffsetRspWork();
        this[MVS.ProtoCmd.EXIT_LIVEROOM_NOTIFY] = new ExitLiveRoomNotifyWork();
        this[MVS.ProtoCmd.LIVE_OVER_NOTIFY] = new LiveOverNotifyWork();
        this[MVS.ProtoCmd.LIVE_FRAMEDATA_NOTIFY] = new LiveFrameDataNotifyWork();
        this[MVS.ProtoCmd.LIVE_FRAMESYNC_NOTIFY] = new LiveFrameSyncNotifyWork();
        this[MVS.ProtoCmd.SET_RECONNECT_TIMEOUT_RSP] = new SetReconnectTimeoutRspWork();
        this[MVS.ProtoCmd.CREATE_TEAM_RSP] = new CreateTeamRspWork();
        this[MVS.ProtoCmd.JOIN_TEAM_RSP] = new JoinTeamRspWork();
        this[MVS.ProtoCmd.JOIN_TEAM_NOTIFY] = new JoinTeamNotifyWrok();
        this[MVS.ProtoCmd.LEAVE_TEAM_RSP] = new LeaveTeamRspWork();
        this[MVS.ProtoCmd.LEAVE_TEAM_NOTIFY] = new LeaveTeamNotifyWork();
        this[MVS.ProtoCmd.TEAM_MATCH_RSP] = new TeamMatchRspWork();
        this[MVS.ProtoCmd.TEAM_MATCH_RESULT_NOTIFY] = new TeamMatchResultNotifyWork();
        this[MVS.ProtoCmd.TEAM_MATCH_START_NOTIFY] = new TeamMatchStartNotifyWork();
        this[MVS.ProtoCmd.GET_CACHEdATA_RSP] = new GetOffLineDataRspWork();
    }
    _obj.EngineNetworkMap = EngineNetworkMap;
    var ErrorRspWork = function(ErrCall, code, message) {
        var tempmsg = "";
        if (MvsErrMsg[code] !== undefined) {
            tempmsg = message + ". " + MvsErrMsg[code];
        } else {
            tempmsg = message;
        }
        MatchvsLog.logI("[error code:" + code + "] " + tempmsg);
        ErrCall && ErrCall(code, tempmsg);
    };
    _obj.ErrorRspWork = ErrorRspWork;
    function LoginRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            MVS.ccReport && MVS.ccReport.loginRsp(status);
            if (status === 200) {
                engine.mState.SetLogin();
                engine.mRecntRoomID = event.payload.getRoomid();
                if (engine.mState.IsReconnecting() !== 0) {
                    if (engine.mRecntRoomID !== "0") {
                        var roomJoin = new MsRoomJoin(MsEnum.JoinRoomType.reconnect, engine.mUserID, engine.mRecntRoomID, MVS.Game.id, 0, 0, 0, "reconnect", [ {
                            name: "MatchVS"
                        } ]);
                        var reconbuf = engine.mProtocol && engine.mProtocol.joinRoomSpecial(roomJoin);
                        engine.mGTWNetwork && engine.mGTWNetwork.send(reconbuf);
                    } else {
                        engine.mState.DelReconnecting();
                        engine.mRsp.reconnectResponse && engine.mRsp.reconnectResponse(MvsCode.CODE_201, [], {});
                    }
                } else {
                    engine.mRsp.loginResponse(new MsLoginRsp(status, engine.mRecntRoomID));
                }
            } else {
                engine.mState.SetInit();
                ErrorRspWork(engine.mRsp.errorResponse, status, "login or reconnect is fail");
            }
        };
    }
    function JoinRoomRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status === 200) {
                var mBookInfo = event.payload.getBookinfo();
                engine.mRoomInfo = event.payload.getRoominfo();
                var userList = event.payload.getUsersList();
                userList.forEach(function(user) {
                    var uid = user.getUserid();
                    engine.joinRoomNotifyInfo[uid] = new MsRoomUserInfo(uid, utf8ByteArrayToString(user.getUserprofile()));
                });
                MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(mBookInfo);
                engine.roomCheckIn(event.payload.getBookinfo(), event.payload.getRoominfo());
            } else {
                engine.mState.DelJoinRooming();
                ErrorRspWork(engine.mRsp.errorResponse, status, "join room failed ");
                engine.mRsp.joinRoomResponse && engine.mRsp.joinRoomResponse(status, null, null);
            }
        };
    }
    function JoinRoomNotifyWork() {
        this.doSubHandle = function(event, engine) {
            console.log("收到joinRoomNotify,还未推送", Date.now());
            var uid = event.payload.getUser().getUserid();
            engine.joinRoomNotifyInfo[uid] = new MsRoomUserInfo(uid, utf8ByteArrayToString(event.payload.getUser().getUserprofile()));
        };
    }
    function CreateRoomRspWork() {
        this.doSubHandle = function(event, engine) {
            if (event.payload.getStatus() === 200) {
                var mBookInfo = event.payload.getBookinfo();
                event.roomInfo.setRoomid(event.payload.getRoomid());
                event.roomInfo.setOwner(event.payload.getOwner());
                engine.mRoomInfo = event.roomInfo;
                MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(mBookInfo);
                engine.roomCheckIn(event.payload.getBookinfo(), event.roomInfo);
            } else {
                engine.mState.DelCreateRoom();
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "");
                engine.mRsp.createRoomResponse && engine.mRsp.createRoomResponse(new MsCreateRoomRsp(event.payload.getStatus(), "", 0));
            }
        };
    }
    function CheckInRoomRspWork() {
        this.doSubHandle = function(event, engine) {
            var checkins = event.payload.getCheckinsList();
            var playersIn = event.payload.getPlayersList();
            console.log("已经CheckIn：", checkins);
            console.log("当前房间用户：", playersIn);
            var status = event.payload.getStatus();
            if (status !== 200) {
                engine.mState.SetLogin();
                ErrorRspWork(engine.mRsp.errorResponse, status, "check in error");
                engine.mHotelNetWork && engine.mHotelNetWork.close();
            } else {
                engine.mCntRoomType = MVS.TgRoomType.PRoom;
                engine.mRecntRoomID = engine.mRoomInfo.getRoomid();
                engine.mAllPlayers = event.payload.getCheckinsList();
                var roomUserList = [];
                engine.mUserListForJoinRoomRsp.forEach(function(user) {
                    var roomuser = new MsRoomUserInfo(user.getUserid(), utf8ByteArrayToString(user.getUserprofile()));
                });
                checkins.forEach(function(uid) {
                    if (uid in engine.joinRoomNotifyInfo) {
                        roomUserList.push(engine.joinRoomNotifyInfo[uid]);
                        delete engine.joinRoomNotifyInfo[uid];
                    }
                });
                var roominfo = new MsRoomInfo(engine.mRoomInfo.getRoomid(), utf8ByteArrayToString(engine.mRoomInfo.getRoomproperty()), engine.mRoomInfo.getOwner(), engine.mRoomInfo.getState());
                engine.mState.SetInRoom();
                if (engine.mState.IsCreateRoom()) {
                    engine.mState.DelCreateRoom();
                    engine.mRsp.createRoomResponse && engine.mRsp.createRoomResponse(new MsCreateRoomRsp(status, engine.mRoomInfo.getRoomid(), engine.mRoomInfo.getOwner()));
                } else if (engine.mState.IsJoinRooming()) {
                    engine.mState.DelJoinRooming();
                    engine.mRsp.joinRoomResponse && engine.mRsp.joinRoomResponse(status, roomUserList, roominfo);
                } else if (engine.mState.IsReconnecting() !== 0) {
                    engine.mState.DelReconnecting();
                    engine.mRsp.reconnectResponse && engine.mRsp.reconnectResponse(status, roomUserList, roominfo);
                } else if (engine.mState.IsTeamMatching()) {
                    engine.mState.DelTeamMatching();
                    engine.teamNotifyInfo.roomInfo = roominfo;
                    engine.mRsp.teamMatchResultNotify(engine.teamNotifyInfo);
                }
            }
        };
    }
    function CheckInRoomNtfyWork() {
        this.doSubHandle = function(event, engine) {
            console.log("收到 CheckInRoomNtfyWork,准备推送 joinRoomNotify");
            engine.mAllPlayers = event.payload.getCheckinsList();
            var uid = event.payload.getUserid();
            if (uid in engine.joinRoomNotifyInfo) {
                console.log("推送 joinRoomNotify ");
                engine.mRsp.joinRoomNotify && engine.mRsp.joinRoomNotify(engine.joinRoomNotifyInfo[uid]);
                delete engine.joinRoomNotifyInfo[uid];
            }
        };
    }
    function LeaveRoomRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mState.DelInRoom();
            if (event.payload.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "leave room fail");
            }
            event.roomInfo.setRoomid("0");
            engine.mRoomInfo = event.roomInfo;
            var leaveRoomRsp = new MsLeaveRoomRsp(event.payload.getStatus(), event.payload.getRoomid(), event.payload.getUserid(), event.payload.getCpproto());
            engine.mRsp.leaveRoomResponse && engine.mRsp.leaveRoomResponse(leaveRoomRsp);
        };
    }
    function JoinOverRspWork() {
        this.doSubHandle = function(event, engine) {
            if (event.payload.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "join over fail");
            }
            engine.mRsp.joinOverResponse && engine.mRsp.joinOverResponse(new MsJoinOverRsp(event.payload.getStatus(), utf8ByteArrayToString(event.payload.getCpproto())));
        };
    }
    function JoinOverNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var joinoverNotifyInfo = new MsJoinOverNotifyInfo(event.payload.getRoomid(), event.payload.getSrcuserid(), utf8ByteArrayToString(event.payload.getCpproto()));
            engine.mRsp.joinOverNotify && engine.mRsp.joinOverNotify(joinoverNotifyInfo);
        };
    }
    function LeaveRoomNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var leaveRoomInfo = new MsLeaveRoomNotify(event.payload.getRoomid(), event.payload.getUserid(), event.payload.getOwner(), utf8ByteArrayToString(event.payload.getCpproto()));
            engine.mRsp.leaveRoomNotify && engine.mRsp.leaveRoomNotify(leaveRoomInfo);
        };
    }
    function HeartBeatHotelRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.hotelHeartBeatRsp && engine.mRsp.hotelHeartBeatRsp(event.payload.getStatus());
            MatchvsLog.logI("hotelHeartBeatRsp");
        };
    }
    function SendEventRspWork() {
        this.doSubHandle = function(event, engine) {
            if (event.payload.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "send event fail");
            }
            engine.mRsp.sendEventResponse && engine.mRsp.sendEventResponse(new MsSendEventRsp(event.payload.getStatus(), event.seq));
        };
    }
    function SendEventNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var srcUserID = event.payload.getSrcuid();
            if (srcUserID === 0) {
                engine.mRsp.gameServerNotify && engine.mRsp.gameServerNotify(new MsGameServerNotifyInfo(event.payload.getSrcuid(), utf8ByteArrayToString(event.payload.getCpproto())));
            } else {
                engine.mRsp.sendEventNotify && engine.mRsp.sendEventNotify(new MsSendEventNotify(event.payload.getSrcuid(), utf8ByteArrayToString(event.payload.getCpproto())));
            }
        };
    }
    function SubscribeEventGroupRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.subscribeEventGroupResponse && engine.mRsp.subscribeEventGroupResponse(event.payload.getStatus(), event.payload.getGroupsList());
        };
    }
    function SendEventGroupRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.sendEventGroupResponse && engine.mRsp.sendEventGroupResponse(event.payload.getStatus(), event.payload.getDstnum());
        };
    }
    function SendEventGroupNotifyWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.sendEventGroupNotify && engine.mRsp.sendEventGroupNotify(event.payload.getSrcuid(), event.payload.getGroupsList(), utf8ByteArrayToString(event.payload.getCpproto()));
        };
    }
    function GatewaySpeedRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            var seq = event.payload.getSeq();
            engine.mRsp.gatewaySpeedResponse && engine.mRsp.gatewaySpeedResponse(new MsGatewaySpeedResponse(status, seq));
        };
    }
    function HeartBeatGatewayRspWork() {
        this.doSubHandle = function(event, engine) {
            var gameid = event.payload.getGameid();
            var gsExist = event.payload.getGsexist();
            engine.mRsp.heartBeatResponse && engine.mRsp.heartBeatResponse(new MsHeartBeatResponse(gameid, gsExist));
            MatchvsLog.logI("gatewayHeartBeatResponse");
        };
    }
    function LoginOutRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mGTWNetwork.close();
            engine.mRsp.logoutResponse && engine.mRsp.logoutResponse(event.payload.getStatus());
        };
    }
    function GetRoomListRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status !== 200) {
                engine.mRsp.getRoomListResponse && engine.mRsp.getRoomListResponse(event.payload.getStatus(), null);
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "get room list error ");
            }
            var roominfolist = event.payload.getRoominfoList();
            var roomList = [];
            for (var i = 0; i < roominfolist.length; i++) {
                roomList[i] = new MsRoomInfoEx(roominfolist[i].getRoomid(), roominfolist[i].getRoomname(), roominfolist[i].getMaxplayer(), roominfolist[i].getMode(), roominfolist[i].getCanwatch(), utf8ByteArrayToString(roominfolist[i].getRoomproperty()));
            }
            engine.mRsp.getRoomListResponse && engine.mRsp.getRoomListResponse(status, roomList);
        };
    }
    function DisConnectRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.disConnectResponse && engine.mRsp.disConnectResponse(event.payload.getStatus());
        };
    }
    function KickPlayerRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status != 200) {
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "kick player error ");
            }
            engine.mRsp.kickPlayerResponse && engine.mRsp.kickPlayerResponse(new MsKickPlayerRsp(event.payload.getStatus(), event.payload.getOwner(), event.payload.getUserid()));
        };
    }
    function KickPlayerNotifyWork() {
        this.doSubHandle = function(event, engine) {
            if (event.payload.getUserid().toString() === "" + engine.mUserID && event.hotelTimer != null) {
                MVS.ticker.clearInterval(event.hotelTimer);
                engine.mState.SetLogin();
                engine.mHotelNetWork.close();
            }
            engine.mRsp.kickPlayerNotify && engine.mRsp.kickPlayerNotify(new MsKickPlayerNotify(event.payload.getUserid(), event.payload.getSrcuserid(), utf8ByteArrayToString(event.payload.getCpproto()), event.payload.getOwner()));
        };
    }
    function SetFrameSyncRspWork() {
        this.doSubHandle = function(event, engine) {
            MatchvsLog.logI("SetFrameSyncRateAck:" + event.payload);
            engine.mRsp.setFrameSyncResponse && engine.mRsp.setFrameSyncResponse(new MsSetChannelFrameSyncRsp(event.payload.getStatus()));
        };
    }
    function SetFrameSyncNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var notify = new MVS.MsSetFrameSyncNotify(event.payload.getFramerate(), event.payload.getFrameidx(), event.payload.getTimestamp(), event.payload.getEnablegs(), event.payload.getCacheframems());
            engine.mRsp.setFrameSyncNotify && engine.mRsp.setFrameSyncNotify(notify);
        };
    }
    function SendFrameEventRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.sendFrameEventResponse && engine.mRsp.sendFrameEventResponse(new MsSendFrameEventRsp(event.payload.getStatus()));
        };
    }
    function FrameDataNotifyWork() {
        var counter = 0;
        this.doSubHandle = function(event, engine) {
            event.frameCache.unshift(new MsFrameItem(event.payload.getSrcuid(), utf8ByteArrayToString(event.payload.getCpproto()), event.payload.getTimestamp()));
        };
    }
    function FrameSyncNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var frameData = [];
            while (event.frameCache.length > 0) {
                frameData.push(event.frameCache.pop());
            }
            var msFrameData = new MsFrameData(event.payload.getLastidx(), frameData, frameData.length);
            engine.mRsp.frameUpdate && engine.mRsp.frameUpdate(msFrameData);
        };
    }
    function NetworkStateNotifyWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.networkStateNotify && engine.mRsp.networkStateNotify(new MsNetworkStateNotify(event.payload.getRoomid(), event.payload.getUserid(), event.payload.getState(), event.payload.getOwner()));
        };
    }
    function GetRoomListRspWork_Ex() {
        this.doSubHandle = function(event, engine) {
            var roomInfoList = event.payload.getRoominfoexList();
            var roomAttrs = [];
            roomInfoList.forEach(function(roominfo) {
                var watch = roominfo.getWatchinfo().getWatchsetting();
                var watchSet = new MVS.MsWatchSet(watch.getCachetime(), watch.getMaxwatch(), watch.getWatchdelayms(), watch.getWatchpersistent());
                var roomAttr = new MsRoomAttribute(roominfo.getRoomid(), roominfo.getRoomname(), roominfo.getMaxplayer(), roominfo.getGameplayer(), roominfo.getWatchplayer(), roominfo.getMode(), roominfo.getCanwatch(), utf8ByteArrayToString(roominfo.getRoomproperty()), roominfo.getOwner(), roominfo.getState(), roominfo.getCreatetime().toString(), watchSet);
                roomAttrs.push(roomAttr);
            });
            var roomListExInfo = new MsGetRoomListExRsp(event.payload.getStatus(), event.payload.getTotal(), roomAttrs);
            engine.mRsp.getRoomListExResponse && engine.mRsp.getRoomListExResponse(roomListExInfo);
        };
    }
    function GetRoomDetailRspWork() {
        this.doSubHandle = function(event, engine) {
            if (event.payload.getStatus() !== 200) {
                engine.mRsp.getRoomDetailResponse && engine.mRsp.getRoomDetailResponse(new MsGetRoomDetailRsp(event.payload.getStatus()));
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "");
            }
            var roomDetail = event.payload.getRoomdetail();
            var userInfos = [];
            var playerlist = roomDetail.getPlayerinfosList();
            playerlist.forEach(function(player) {
                var userinfo = new MsRoomUserInfo(player.getUserid(), utf8ByteArrayToString(player.getUserprofile()));
                userInfos.push(userinfo);
            });
            var watchroom = roomDetail.getWatchroom();
            var watchset = watchroom.getWatchinfo().getWatchsetting();
            var watchinfo = {
                state: watchroom.getWatchinfo().getState(),
                curWatch: watchroom.getWatchinfo().getCurwatch(),
                persistent: watchset.getWatchpersistent(),
                maxWatch: watchset.getMaxwatch(),
                delayMS: watchset.getWatchdelayms(),
                cacheTime: watchset.getCachetime()
            };
            var brigadeArr = roomDetail.getBrigadesList();
            var brigadelist = [];
            brigadeArr.forEach(function(brigV) {
                var teams = [];
                var teamsTemp = brigV.getTeamsList();
                teamsTemp.forEach(function(team) {
                    var teaminfo = team.getTeaminfo();
                    var users = team.getPlayerList();
                    var playsers = [];
                    for (var i = 0; i < users.length; i++) {
                        playsers[i] = {
                            userID: users[i].getUserid(),
                            userProfile: utf8ByteArrayToString(users[i].getUserprofile())
                        };
                    }
                    var teamItem = {
                        teamID: teaminfo.getTeamid(),
                        capacity: teaminfo.getCapacity(),
                        mode: teaminfo.getMode(),
                        owner: teaminfo.getOwner(),
                        playerList: playsers
                    };
                    teams.push(teamItem);
                });
                var brigadeitem = {
                    brigadeID: brigV.getBrigadeid(),
                    teamList: teams
                };
                brigadelist.push(brigadeitem);
            });
            var roomDetailRsp = new MsGetRoomDetailRsp(event.payload.getStatus(), roomDetail.getState(), roomDetail.getMaxplayer(), roomDetail.getMode(), roomDetail.getCanwatch(), utf8ByteArrayToString(roomDetail.getRoomproperty()), roomDetail.getOwner(), roomDetail.getCreateflag(), userInfos, watchinfo, brigadelist);
            engine.mRsp.getRoomDetailResponse && engine.mRsp.getRoomDetailResponse(roomDetailRsp);
        };
    }
    function SetRoomPropertyRspWokr() {
        this.doSubHandle = function(event, engine) {
            if (event.payload.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, event.payload.getStatus(), "set room property fail");
            }
            engine.mRsp.setRoomPropertyResponse && engine.mRsp.setRoomPropertyResponse(new MsSetRoomPropertyRspInfo(event.payload.getStatus(), event.payload.getRoomid(), event.payload.getUserid(), utf8ByteArrayToString(event.payload.getRoomproperty())));
        };
    }
    function SetRoomPropertyNotifyWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.setRoomPropertyNotify && engine.mRsp.setRoomPropertyNotify(new MsRoomPropertyNotifyInfo(event.payload.getRoomid(), event.payload.getUserid(), utf8ByteArrayToString(event.payload.getRoomproperty())));
        };
    }
    function JoinOpenRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.joinOpenResponse && engine.mRsp.joinOpenResponse(new MsReopenRoomResponse(event.payload.getStatus(), utf8ByteArrayToString(event.payload.getCpproto())));
        };
    }
    function JoinOpenNotifyWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.joinOpenNotify && engine.mRsp.joinOpenNotify(new MsReopenRoomNotify(event.payload.getRoomid(), event.payload.getUserid(), utf8ByteArrayToString(event.payload.getCpproto())));
        };
    }
    function JoinWatchRoomRspWork() {
        this.doSubHandle = function(event, engine) {
            var res = event.payload;
            var status = res.getStatus();
            if (status !== 200) {
                engine.mState.DelJoinWatching();
                ErrorRspWork(engine.mRsp.errorResponse, status, "join watch room error ");
                engine.mRsp.joinWatchRoom && engine.mRsp.joinWatchRoom(status);
                return;
            }
            var mBookInfo = res.getBookinfo();
            MVS.DEBUG && console.log("JoinWatchRoomRspWork bookInfo", mBookInfo);
            MVS.Host.HOST_WATCH_ADDR = MVS.MsUtil.getLiveUrl(mBookInfo, MVS.Game.id, res.getRoomid(), res.getSetid());
            engine.enterLiveRoom(res.getBookinfo(), res.getRoomid());
        };
    }
    function LeaveWatchRoomRspWork() {
        this.doSubHandle = function(event, engine) {
            if (engine.mWatchNetwrok) {
                engine.mWatchNetwrok.close();
            }
            var rsp = event.payload;
            MVS.DEBUG && console.log(MVS.LgFormat("LeaveWatchRoomRspWork"), rsp);
            if (rsp.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse(rsp.getStatus(), " leave watch room error "));
            }
            engine.mWatchRoomID = "0";
            engine.mRsp.leaveWatchRoomResponse && engine.mRsp.leaveWatchRoomResponse(rsp.getStatus());
        };
    }
    function GeWatchRoomListRspWork() {
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            if (rsp.getStatus() !== 200) {
                engine.mRsp.getRoomListExResponse && engine.mRsp.getRoomListExResponse(new MsGetRoomListExRsp(rsp.getStatus(), 0, []));
                ErrorRspWork(engine.mRsp.errorResponse, rsp.getStatus(), "get watch room list error ");
                return;
            }
            var roomInfoList = rsp.getRoominfoexList();
            var roomAttrs = [];
            roomInfoList.forEach(function(roominfo) {
                var watch = roominfo.getWatchinfo().getWatchsetting();
                var watchSet = new MVS.MsWatchSet(watch.getCachetime(), watch.getMaxwatch(), watch.getWatchdelayms(), watch.getWatchpersistent());
                var roomAttr = new MsRoomAttribute(roominfo.getRoomid(), roominfo.getRoomname(), roominfo.getMaxplayer(), roominfo.getGameplayer(), roominfo.getWatchplayer(), roominfo.getMode(), roominfo.getCanwatch(), utf8ByteArrayToString(roominfo.getRoomproperty()), roominfo.getOwner(), roominfo.getState(), roominfo.getCreatetime().toString(), watchSet);
                roomAttrs.push(roomAttr);
            });
            var roomListExInfo = new MsGetRoomListExRsp(rsp.getStatus(), rsp.getTotal(), roomAttrs);
            engine.mRsp.getWatchRoomsResponse && engine.mRsp.getWatchRoomsResponse(roomListExInfo);
        };
    }
    function EnterLiveRoomRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mState.DelJoinWatching();
            var res = event.payload;
            var liveRsp = {};
            if (res.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, res.getStatus(), "enter live room error");
                liveRsp = new MVS.MsJoinWatchRoomRsp(res.getStatus(), 0, "", {});
            } else {
                engine.mState.SetInWatch();
                var winfo = res.getWathchinfo();
                var users = [];
                engine.mCntRoomType = MVS.TgRoomType.WRoom;
                engine.mWatchRoomID = winfo.getRoomid();
                winfo.getLastaudiencesList().forEach(function(e) {
                    var us = new MVS.MsLiveAudience(e.getUserid(), utf8ByteArrayToString(e.getProfile()), e.getEntertime());
                    users.push(us);
                });
                var liveInfo = new MVS.MsLiveWatchInfo(winfo.getRoomid(), winfo.getStartts(), winfo.getDelayms(), winfo.getCachems(), winfo.getMaxaudiences(), winfo.getCuraudiences(), winfo.getPeakaudiences(), users);
                liveRsp = new MVS.MsJoinWatchRoomRsp(res.getStatus(), res.getRoomstatus(), res.getReserved(), liveInfo);
            }
            engine.mRsp.joinWatchRoomResponse && engine.mRsp.joinWatchRoomResponse(liveRsp);
        };
    }
    function EnterLiveRoomNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var res = event.payload;
            var notify = new MsRoomUserInfo(res.getUserid(), utf8ByteArrayToString(res.getUserprofile()));
            MVS.DEBUG && console.log(MVS.LgFormat("EnterLiveRoomNotifyWork"), res);
            engine.mRsp.joinWatchRoomNotify && engine.mRsp.joinWatchRoomNotify(notify);
        };
    }
    function WatchHeartBeatRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mRsp.watchHeartBeat && engine.mRsp.watchHeartBeat(event.payload.getStatus());
        };
    }
    function LiveBroadcastRspWork() {
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            if (rsp.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, rsp.getStatus(), " watch send message error ");
            }
            engine.mRsp.liveBroadcastResponse && engine.mRsp.liveBroadcastResponse(rsp.getStatus());
        };
    }
    function LiveBroadcastNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            engine.mRsp.liveBroadcastNotify && engine.mRsp.liveBroadcastNotify(new MsSendEventNotify(rsp.getSrcuid(), utf8ByteArrayToString(rsp.getCpproto())));
        };
    }
    function SetLiveOffsetRspWork() {
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            engine.mRsp.setLiveOffsetResponse && engine.mRsp.setLiveOffsetResponse(rsp.getStatus());
        };
    }
    function ExitLiveRoomNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            var notify = new MVS.MsExitLiveRoomNotify(rsp.getUserid(), utf8ByteArrayToString(rsp.getUserprofile()));
            MVS.DEBUG && console.log(MVS.LgFormat("ExitLiveRoomNotifyWork"), notify);
            engine.mRsp.leaveWatchRoomNotify && engine.mRsp.leaveWatchRoomNotify(notify);
        };
    }
    function LiveOverNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            MVS.DEBUG && console.log(MVS.LgFormat("LiveOverNotifyWork"), rsp);
            engine.mRsp.liveOverNotify && engine.mRsp.liveOverNotify(new MVS.MsLiveOverNotify(rsp.getGameid(), rsp.getRoomid()));
        };
    }
    function LiveFrameDataNotifyWork() {
        var cnt = 0;
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            var context = utf8ByteArrayToString(rsp.getCpproto());
            event.frameCache.unshift(new MsFrameItem(rsp.getSrcuid(), context, rsp.getTimestamp()));
        };
    }
    function LiveFrameSyncNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var frameData = [];
            while (event.frameCache.length > 0) {
                frameData.push(event.frameCache.pop());
            }
            var msFrameData = new MsFrameData(event.payload.getLastidx(), frameData, frameData.length);
            engine.mRsp.liveFrameUpdate && engine.mRsp.liveFrameUpdate(msFrameData);
        };
    }
    function ChangeRoleRspWork() {
        this.doSubHandle = function(event, engine) {
            var rsp = event.payload;
            if (rsp.getStatus() !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, rsp.getStatus(), " watch send message error ");
            } else {
                var mBookInfo = rsp.getBookinfo();
                if (rsp.getTargetroomtype() == MVS.TgRoomType.PRoom) {
                    MVS.ticker.clearInterval(event.watchTimer);
                    engine.mWatchNetwrok && engine.mWatchNetwrok.close();
                    var mRoomInfo = rsp.getPlayroom().getRoominfo();
                    engine.mRoomInfo = mRoomInfo;
                    MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(mBookInfo);
                    console.log("getRoomid():", mRoomInfo.getRoomid());
                    engine.roomCheckIn(mBookInfo, mRoomInfo);
                } else if (rsp.getTargetroomtype() == MVS.TgRoomType.WRoom) {
                    MVS.ticker.clearInterval(event.hotelTimer);
                    engine.mState.SetLogin();
                    engine.mHotelNetWork && engine.mHotelNetWork.close();
                    MVS.Host.HOST_WATCH_ADDR = MVS.MsUtil.getLiveUrl(mBookInfo, MVS.Game.id, rsp.getRoomid(), rsp.getSetid());
                    engine.enterLiveRoom(rsp.getBookinfo(), rsp.getRoomid());
                }
            }
            engine.mRsp.changeRoleResponse(new MVS.MsChangeRoleRsp(rsp.getStatus(), rsp.getTargetroomtype()));
        };
    }
    function SetReconnectTimeoutRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, status, " set reconnect timeout value response error");
            }
            engine.mRsp.setReconnectTimeoutResponse && engine.mRsp.setReconnectTimeoutResponse(status);
        };
    }
    function CreateTeamRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, status, "create team response error");
            }
            engine.mTeamID = event.payload.getTeamid();
            var rsp = {
                status: status,
                teamID: event.payload.getTeamid(),
                owner: event.payload.getOwner()
            };
            engine.mRsp.createTeamResponse && engine.mRsp.createTeamResponse(rsp);
        };
    }
    function JoinTeamRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, status, "join team response error");
            }
            var teaminfo = event.payload.getTeaminfo();
            var users = event.payload.getUsersList();
            var userlist = [];
            users.forEach(function(u) {
                userlist.push({
                    userID: u.getUserid(),
                    userProfile: utf8ByteArrayToString(u.getUserprofile())
                });
            });
            var rsp = {
                team: {},
                status: status,
                userList: userlist
            };
            if (teaminfo) {
                rsp.team = {
                    teamID: teaminfo.getTeamid() || "0",
                    password: teaminfo.getPassword() || "",
                    capacity: teaminfo.getCapacity() || 0,
                    mode: teaminfo.getMode() || 0,
                    owner: teaminfo.getOwner() || 0
                };
            }
            engine.mRsp.joinTeamResponse && engine.mRsp.joinTeamResponse(rsp);
        };
    }
    function JoinTeamNotifyWrok() {
        this.doSubHandle = function(event, engine) {
            var u = event.payload.getUser();
            var notify = {
                user: {
                    userID: u.getUserid(),
                    userProfile: utf8ByteArrayToString(u.getUserprofile())
                }
            };
            engine.mRsp.joinTeamNotify && engine.mRsp.joinTeamNotify(notify);
        };
    }
    function LeaveTeamRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, status, "leave team response error");
            }
            var rsp = {
                status: status,
                teamID: event.payload.getTeamid() || "0",
                userID: event.payload.getUserid() || 0
            };
            engine.mRsp.leaveTeamResponse && engine.mRsp.leaveTeamResponse(rsp);
        };
    }
    function LeaveTeamNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var notify = {
                teamID: event.payload.getTeamid() || "",
                userID: event.payload.getUserid() || 0,
                owner: event.payload.getOwner() || 0
            };
            engine.mRsp.leaveTeamNotify && engine.mRsp.leaveTeamNotify(notify);
        };
    }
    function TeamMatchRspWork() {
        this.doSubHandle = function(event, engine) {
            engine.mState.DelTeamMatching();
            var status = event.payload.getStatus();
            if (status !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, status, "team match response error");
            }
            var rsp = {
                status: status
            };
            engine.mRsp.teamMatchResponse && engine.mRsp.teamMatchResponse(rsp);
        };
    }
    function TeamMatchResultNotifyWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, status, "team match error");
                engine.mState.DelTeamMatching();
                engine.mRsp.teamMatchResultNotify && engine.mRsp.teamMatchResultNotify({
                    status: status,
                    brigades: {},
                    roomInfo: {}
                });
                return 0;
            } else {
                var mBookInfo = event.payload.getBookinfo();
                engine.mRoomInfo = event.payload.getRoominfo();
                var brigadeArr = event.payload.getBrigadesList();
                var list = [];
                brigadeArr.forEach(function(brigV) {
                    var teamsTemp = brigV.getTeamsList();
                    var playsers = [];
                    teamsTemp.forEach(function(team) {
                        var users = team.getPlayerList();
                        for (var i = 0; i < users.length; i++) {
                            playsers.push({
                                userID: users[i].getUserid(),
                                userProfile: utf8ByteArrayToString(users[i].getUserprofile())
                            });
                        }
                    });
                    var brigadeitem = {
                        brigadeID: brigV.getBrigadeid(),
                        playerList: playsers
                    };
                    list.push(brigadeitem);
                });
                engine.teamNotifyInfo = {
                    status: status,
                    brigades: list,
                    roomInfo: {}
                };
                MVS.DEBUG && console.log(MVS.LgFormat("TeamMatchResultNotifyWork"), engine.teamNotifyInfo);
                MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(mBookInfo);
                engine.mState.SetTeamMatching();
                engine.roomCheckIn(event.payload.getBookinfo(), event.payload.getRoominfo());
            }
            return 0;
        };
    }
    function TeamMatchStartNotifyWork() {
        this.doSubHandle = function(event, engine) {
            engine.mState.SetTeamMatching();
            var notify = {
                teamID: event.payload.getTeamid(),
                userID: event.payload.getUserid()
            };
            engine.mRsp.teamMatchStartNotify && engine.mRsp.teamMatchStartNotify(notify);
        };
    }
    function GetOffLineDataRspWork() {
        this.doSubHandle = function(event, engine) {
            var status = event.payload.getStatus();
            if (status !== 200) {
                ErrorRspWork(engine.mRsp.errorResponse, status, "get off line data response error");
            }
            var notify = {
                status: status,
                frameCount: event.payload.getFramecount() || 0,
                msgCount: event.payload.getMsgcount() || 0
            };
            engine.mRsp.getOffLineDataResponse && engine.mRsp.getOffLineDataResponse(notify);
        };
    }
})(MVS || {});

function MatchvsResponse() {
    this.registerUserResponse = function(userInfo) {};
    this.loginResponse = function(loginRsp) {};
    this.logoutResponse = function(status) {};
    this.createRoomResponse = function(rsp) {};
    this.getRoomListResponse = function(status, roomInfos) {};
    this.joinRoomResponse = function(status, roomUserInfoList, roomInfo) {};
    this.joinRoomNotify = function(roomUserInfo) {};
    this.joinOverResponse = function(rsp) {};
    this.joinOverNotify = function(notifyInfo) {};
    this.leaveRoomResponse = function(rsp) {};
    this.leaveRoomNotify = function(leaveRoomInfo) {};
    this.kickPlayerResponse = function(rsp) {};
    this.kickPlayerNotify = function(notify) {};
    this.sendEventResponse = function(rsp) {};
    this.sendEventNotify = function(tRsp) {};
    this.gameServerNotify = function(tRsp) {};
    this.errorResponse = function(errCode, errMsg) {};
    this.initResponse = function(status) {};
    this.networkStateNotify = function(notify) {};
    this.subscribeEventGroupResponse = function(status, groups) {};
    this.sendEventGroupResponse = function(status, dstNum) {};
    this.sendEventGroupNotify = function(srcUserID, groups, cpProto) {};
    this.setFrameSyncResponse = function(rsp) {};
    this.setFrameSyncNotify = function(notify) {};
    this.sendFrameEventResponse = function(rsp) {};
    this.frameUpdate = function(data) {};
    this.hotelHeartBeatRsp = function(data) {};
    this.gatewaySpeedResponse = function(rsp) {};
    this.heartBeatResponse = function(rsp) {};
    this.disConnectResponse = function(rep) {};
    this.getRoomDetailResponse = function(rsp) {};
    this.getRoomListExResponse = function(rsp) {};
    this.setRoomPropertyResponse = function(rsp) {};
    this.setRoomPropertyNotify = function(notify) {};
    this.reconnectResponse = function(status, roomUserInfoList, roomInfo) {};
    this.joinOpenNotify = function(rsp) {};
    this.joinOpenResponse = function(notify) {};
    this.joinWatchRoomResponse = function(rsp) {};
    this.joinWatchRoomNotify = function(notify) {};
    this.leaveWatchRoomResponse = function(status) {};
    this.leaveWatchRoomNotify = function(user) {};
    this.getWatchRoomsResponse = function(rooms) {};
    this.watchHeartBeat = function(rsp) {};
    this.liveBroadcastResponse = function(rsp) {};
    this.liveBroadcastNotify = function(notify) {};
    this.setLiveOffsetResponse = function(status) {};
    this.liveOverNotify = function(notify) {};
    this.liveFrameUpdate = function(data) {};
    this.changeRoleResponse = function(rsp) {};
    this.setReconnectTimeoutResponse = function(status) {};
    this.createTeamResponse = function(rsp) {};
    this.joinTeamResponse = function(rsp) {};
    this.joinTeamNotify = function(notify) {};
    this.leaveTeamResponse = function(rsp) {};
    this.leaveTeamNotify = function(notify) {};
    this.teamMatchResponse = function(rsp) {};
    this.teamMatchResultNotify = function(notify) {};
    this.teamMatchStartNotify = function(notify) {};
    this.getOffLineDataResponse = function(rsp) {};
}

(function(_obj) {
    var M_ENGINE;
    var M_User = {
        ID: 0,
        token: ""
    };
    var M_EVN = {
        gameID: 0,
        appkey: "",
        channel: "",
        platform: "",
        deviceID: "",
        gVersion: ""
    };
    function MatchvsEngine() {
        M_ENGINE = this;
        this.mState = new MVS.MvsState();
        this.mAllPlayers = [];
        this.mRecntRoomID = 0;
        this.mWatchRoomID = 0;
        this.mTeamID = "";
        this.mNetWorkCallBackImp = null;
        this.mUserListForJoinRoomRsp = [];
        this.joinRoomNotifyInfo = {};
        this.teamNotifyInfo = null;
        this.mCntRoomType = MVS.TgRoomType.NRoom;
        this.mGTWNetwork = null;
        this.mHotelNetWork = null;
        this.mWatchNetwrok = null;
        this.mProtocol = new _obj.MatchvsProtocol();
        this.init = function(response, channel, platform, gameID, appkey, gameVersion) {
            MVS.Game.id = gameID;
            MVS.mtaReport && MVS.mtaReport.Report("init");
            this.mRsp = response;
            M_EVN.channel = channel;
            M_EVN.platform = platform;
            M_EVN.gVersion = gameVersion;
            M_EVN.appkey = appkey;
            M_EVN.gameID = gameID;
            this.mState.SetIniting();
            this.mProtocol.init();
            this.getHostList();
            return 0;
        };
        this.premiseInit = function(response, endPoint, gameID, appkey) {
            if (undefined === endPoint || endPoint === "") {
                return -1;
            }
            this.mRsp = response;
            MVS.Game.id = gameID;
            M_EVN.gameID = gameID;
            M_EVN.appkey = appkey;
            MVS.Host.HOST_GATWAY_ADDR = "ws://" + endPoint;
            this.mState.SetInit();
            this.mRsp.initResponse(200);
            return 0;
        };
        this.reconnect = function() {
            var resNo = this.mState.ReconnectCheck();
            if (resNo !== 0) return resNo;
            if (this.mRecntRoomID !== "0" && this.mState.HaveLogin() === 0) {
                this.mState.SetReconnecting();
                var roomJoin = new MsRoomJoin(MsEnum.JoinRoomType.reconnect, M_User.ID, this.mRecntRoomID, M_EVN.gameID, 0, 0, 0, "reconnect", [ {
                    name: "MatchVS"
                } ]);
                var buf = this.mProtocol.joinRoomSpecial(roomJoin);
                this.mGTWNetwork.send(buf);
                this.mRecntRoomID = "0";
                return 0;
            }
            if (0 === M_EVN.gameID || "" === M_EVN.appkey) {
                return -1;
            }
            if (!(undefined === this.mGTWNetwork || null === this.mGTWNetwork)) {
                this.mGTWNetwork.close();
            }
            this.mState.SetReconnecting();
            return this.login(M_User.ID, M_User.token, M_EVN.deviceID);
        };
        this.login = function(userID, token, deviceID) {
            var resNo = this.mState.LoginCheck();
            if (resNo !== 0) {
                return resNo;
            }
            var ak = new MVS.AppKeyCheck();
            if (!ak.isInvailed(M_EVN.appkey)) {
                return -26;
            }
            MVS.ccReport && MVS.ccReport.init();
            MVS.ccReport && MVS.ccReport.login(M_EVN.gameID);
            if (!(undefined === this.mGTWNetwork || null === this.mGTWNetwork)) {
                this.mGTWNetwork.close();
            }
            this.mNetWorkCallBackImp = new NetWorkCallBackImp(this);
            this.mGTWNetwork = new MVS.MatchvsNetWork(MVS.Host.HOST_GATWAY_ADDR, this.mNetWorkCallBackImp);
            M_User.ID = userID;
            this.mUserID = userID;
            M_User.token = token;
            M_EVN.deviceID = deviceID;
            var buf = this.mProtocol.login(userID, token, M_EVN.gameID, M_EVN.appkey, deviceID);
            this.mState.SetLogining();
            this.mGTWNetwork.send(buf);
            MatchvsLog.logI("login,userID" + userID + ", token:" + token);
            return 0;
        };
        this.createRoom = function(cinfo, userProfile, watchSet) {
            var resNo = this.mState.InRoomCheck();
            if (resNo < 0) return resNo;
            if (userProfile.length > 512) return -21;
            if (cinfo.maxPlayer > MVS.Config.MAXPLAYER_LIMIT || cinfo.maxPlayer < MVS.Config.MINPLAYER_LIMIT) return -20;
            var roominfo = {
                roomID: 0,
                roomName: cinfo.roomName,
                maxPlayer: cinfo.maxPlayer,
                mode: cinfo.mode,
                canWatch: cinfo.canWatch,
                visibility: cinfo.visibility,
                roomProperty: cinfo.roomProperty,
                owner: 0
            };
            var playInfo = {
                userID: M_User.ID,
                userProfile: userProfile
            };
            var buf = this.mProtocol.roomCreate(M_EVN.gameID, roominfo, playInfo, watchSet);
            if (buf.byteLength > 1024 || userProfile.length > 512) return -21;
            this.mState.SetCreateRoom();
            this.mGTWNetwork.send(buf);
            MatchvsLog.logI("create room");
            return 0;
        };
        this.uninit = function() {
            this.mState.ReSet();
            this.mRsp = null;
            MatchvsLog.logI("unInit ");
            return 0;
        };
        this.getRoomList = function(filter) {
            var ret = this.mState.InRoomCheck();
            if (ret !== 0) return ret;
            var buf = this.mProtocol.getRoomList(M_EVN.gameID, filter);
            if (buf.byteLength > 1024) return -21;
            this.mGTWNetwork.send(buf);
            return 0;
        };
        this.roomCheckIn = function(bookInfo, roomInfo) {
            this.mNetWorkCallBackImp.frameCache = [];
            this.mHotelNetWork = new MVS.MatchvsNetWork(MVS.Host.HOST_HOTEL_ADDR, this.mNetWorkCallBackImp);
            var buf = this.mProtocol.roomCheckIn(bookInfo, roomInfo, M_User.ID, M_EVN.gameID);
            this.mHotelNetWork.send(buf);
            return 0;
        };
        this.joinRandomRoom = function(maxPlayer, userProfile) {
            var resNo = this.mState.InRoomCheck();
            if (resNo < 0) return resNo;
            if (maxPlayer > MVS.Config.MAXPLAYER_LIMIT || maxPlayer < MVS.Config.MINPLAYER_LIMIT) return -20;
            if (userProfile.length > 512) return -21;
            var roomJoin = new MsRoomJoin(MsEnum.JoinRoomType.joinRandomRoom, M_User.ID, 0, M_EVN.gameID, maxPlayer, 0, 0, userProfile, [ {
                name: "matchvs"
            } ]);
            var buf = this.mProtocol.joinRandomRoom(roomJoin);
            this.mState.SetJoinRooming();
            this.mGTWNetwork.send(buf);
            return 0;
        };
        this.joinRoomWithProperties = function(matchinfo, userProfile, watchSet) {
            var resNo = this.mState.InRoomCheck();
            if (resNo < 0) return resNo;
            if (userProfile.length > 512) return -21;
            if (typeof matchinfo !== "object") return -1;
            if (typeof userProfile !== "string") return -1;
            if (matchinfo.maxPlayer > MVS.Config.MAXPLAYER_LIMIT || matchinfo.maxPlayer < MVS.Config.MINPLAYER_LIMIT) return -20;
            var roomJoin = new MsRoomJoin(MsEnum.JoinRoomType.joinRoomWithProperty, M_User.ID, 1, M_EVN.gameID, matchinfo.maxPlayer, matchinfo.mode, matchinfo.canWatch, userProfile, matchinfo.tags, matchinfo.visibility, matchinfo.roomProperty);
            var buf = this.mProtocol.joinRoomWithProperties(roomJoin, watchSet);
            this.mState.SetJoinRooming();
            this.mGTWNetwork.send(buf);
            return 0;
        };
        this.joinRoom = function(roomID, userProfile) {
            var resNo = this.mState.InRoomCheck();
            if (resNo < 0) return resNo;
            if (!/^[0-9]+$/.test(roomID)) return -1;
            var roomId = String(roomID).trim();
            if (0 === roomId || roomId === "") return -1;
            var roomJoin = new MsRoomJoin(MsEnum.JoinRoomType.joinSpecialRoom, M_User.ID, roomID, M_EVN.gameID, 0, 0, 0, userProfile, [ {
                name: "MatchVS"
            } ]);
            var buf = this.mProtocol.joinRoomSpecial(roomJoin);
            this.mState.SetJoinRooming();
            this.mGTWNetwork.send(buf);
            MatchvsLog.logI("join room");
            return 0;
        };
        this.joinOver = function(cpProto) {
            var resNo = this.mState.HaveInRoom();
            if (resNo < 0) return resNo;
            if (cpProto.length > 1024) return -21;
            var buf = this.mProtocol.joinOver(M_EVN.gameID, this.mRoomInfo.getRoomid(), stringToUtf8ByteArray(cpProto), M_User.ID);
            this.mGTWNetwork.send(buf);
            return 0;
        };
        this.leaveRoom = function(cpProto) {
            var ret = this.mState.LeaveRoomCheck();
            if (ret !== 0) return ret;
            var roomid = this.mRecntRoomID;
            if (this.mRoomInfo && this.mRoomInfo.getRoomid) {
                roomid = this.mRoomInfo.getRoomid();
            }
            if (cpProto.length > 1024) {
                return -21;
            }
            var buf = this.mProtocol.leaveRoom(M_EVN.gameID, M_User.ID, roomid, cpProto);
            this.mGTWNetwork.send(buf);
            this.mState.SetLeaveRooming();
            if (this.mHotelNetWork) {
                this.mHotelNetWork.close();
            }
            MatchvsLog.logI("leaveRoom");
            return 0;
        };
        this.kickPlayer = function(userID, cpProto) {
            var resNo = this.mState.HaveInRoom();
            if (resNo < 0) return resNo;
            if (cpProto.length > 1024) return -21;
            var buf = this.mProtocol.kickPlayer(userID, M_User.ID, this.mRoomInfo.getRoomid(), cpProto);
            this.mGTWNetwork.send(buf);
            return 0;
        };
        this.setFrameSync = function(frameRate, enableGS, other) {
            if (typeof other === "undefined") {
                other.cacheFrameMS = 0;
            }
            var resNo = this.mState.HaveInRoom();
            if (resNo < 0) return resNo;
            if (frameRate > 20 || frameRate < 0) return -20;
            if (other.cacheFrameMS > 6e5) return -25;
            var info = {
                gameID: M_EVN.gameID,
                roomID: this.mRoomInfo.getRoomid(),
                priority: 0,
                frameRate: frameRate,
                frameidx: 1,
                enableGS: enableGS,
                cacheMs: other.cacheFrameMS
            };
            var buf = this.mProtocol.setFrameSync(info);
            this.mHotelNetWork.send(buf);
            return 0;
        };
        this.sendFrameEvent = function(cpProto, op) {
            var resNo = this.mState.HaveInRoom();
            if (resNo < 0) return resNo;
            if (cpProto.length > 1024) return -21;
            var buf = this.mProtocol.sendFrameEvent(this.mRoomInfo.getRoomid(), 0, cpProto, op || 2);
            this.mHotelNetWork.send(buf);
            return 0;
        };
        this.joinOpen = function(cpProto) {
            var resNo = this.mState.HaveInRoom();
            if (resNo < 0) return resNo;
            var buf = this.mProtocol.joinOpen(M_EVN.gameID, M_User.ID, this.mRoomInfo.getRoomid(), cpProto);
            this.mGTWNetwork.send(buf);
            return 0;
        };
    }
    MatchvsEngine.prototype.logout = function(cpProto) {
        var resNo = this.mState.HaveLogin();
        if (resNo !== 0) return resNo;
        if (this.mState.HaveInRoom() === 0) {
            this.mState.SetLeaveRooming();
            this.leaveRoom("user logout");
            this.mHotelNetWork && this.mHotelNetWork.close();
        }
        MVS.ccReport && MVS.ccReport.logout();
        var buf = this.mProtocol.logout(cpProto);
        this.mState.SetLoginOuting();
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.heartBeat = function() {
        if (M_EVN.gameID === undefined || M_EVN.gameID === "" || M_EVN.gameID === 0) {
            return;
        }
        var roomID;
        if (M_ENGINE.mRoomInfo === undefined) {
            roomID = 0;
        } else {
            roomID = M_ENGINE.mRoomInfo.getRoomid();
        }
        if (M_ENGINE.mState.IsLoginOuting()) {
            return;
        }
        var buf = M_ENGINE.mProtocol.heartBeat(M_EVN.gameID, roomID);
        M_ENGINE.mGTWNetwork.send(buf);
        MatchvsLog.logI("gateway heartBeat:");
    };
    MatchvsEngine.prototype.sendEvent = function(data) {
        var resNo = this.mState.HaveInRoom();
        if (resNo !== 0) return {
            sequence: this.mProtocol.seq - 1,
            result: resNo
        };
        var destType = 1;
        var msgType = 0;
        if (data.length > 1024) return -21;
        var buf = this.mProtocol.broadCast(this.mRoomInfo.getRoomid(), [ this.mUserID ], destType, msgType, stringToUtf8ByteArray(data));
        this.mHotelNetWork.send(buf);
        return {
            sequence: this.mProtocol.seq - 1,
            result: 0
        };
    };
    MatchvsEngine.prototype.sendEventEx = function(msgType, data, desttype, userIDs) {
        var resNo = this.mState.HaveInRoom();
        if (resNo !== 0) return {
            sequence: this.mProtocol.seq - 1,
            result: resNo
        };
        if (typeof data !== "string") return {
            sequence: this.mProtocol.seq - 1,
            result: -1
        };
        if (!(msgType === 0 || msgType === 1 || msgType === 2)) return {
            sequence: this.mProtocol.seq - 1,
            result: -23
        };
        if (!(desttype === 0 || desttype === 1)) return {
            sequence: this.mProtocol.seq - 1,
            result: -24
        };
        if (data.length > 1024) return -21;
        var buf = this.mProtocol.broadCast(this.mRoomInfo.getRoomid(), userIDs, desttype, msgType, stringToUtf8ByteArray(data));
        this.mHotelNetWork.send(buf);
        return {
            sequence: this.mProtocol.seq - 1,
            result: 0
        };
    };
    MatchvsEngine.prototype.subscribeEventGroup = function(confirms, cancels) {
        var resNo = this.mState.HaveInRoom();
        if (resNo !== 0) return resNo;
        if (confirms.length === 0 && cancels.length === 0) return -20;
        var buf = this.mProtocol.subscribeEventGroup(M_EVN.gameID, this.mRoomInfo.getRoomid(), confirms, cancels);
        this.mHotelNetWork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.sendEventGroup = function(data, groups) {
        var resNo = this.mState.HaveInRoom();
        if (resNo !== 0) return resNo;
        if (groups.length <= 0) return -20;
        if (data.length > 1024) return -21;
        var priority = 1;
        var buf = this.mProtocol.sendEventGroup(M_EVN.gameID, this.mRoomInfo.getRoomid(), priority, groups, data);
        this.mHotelNetWork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.hotelHeartBeat = function() {
        if (M_ENGINE.mState.IsLeaveRooming()) {
            return 0;
        }
        M_ENGINE.mState.SetLogin();
        M_ENGINE.mState.SetInRoom();
        var buf = M_ENGINE.mProtocol.hotelHeartBeat(M_EVN.gameID, M_ENGINE.mRoomInfo.getRoomid(), M_User.ID);
        M_ENGINE.mHotelNetWork.send(buf);
        MatchvsLog.logI("hotel heartBeat:");
    };
    MatchvsEngine.prototype.registerUser = function() {
        MVS.mtaReport && MVS.mtaReport.Report("registerUser");
        var resNo = this.mState.HaveInit();
        if (resNo !== 0) return resNo;
        var deviceid = "javascript";
        var channel = M_EVN.channel;
        var cacheKey = "regUserInfo" + channel + M_EVN.platform;
        var gameVersion = M_EVN.gVersion;
        var cacheUserInfo = LocalStore_Load(cacheKey);
        if (cacheUserInfo) {
            var obj = JSON.parse(cacheUserInfo);
            this.mRsp.registerUserResponse(new MsRegistRsp(obj.status, obj.data.userid, obj.data.token, obj.data.nickname, obj.data.avatar));
            MatchvsLog.logI("load user info from cache:" + obj);
            return 0;
        }
        var uri = _obj.APIPATH.REGISTERUSER;
        var url = MVS.Host.VS_USER_URL + uri + "?mac=0" + "&deviceid=" + deviceid + "&channel=" + channel + "&pid=13" + "&version=" + gameVersion;
        var rep = {
            rsp: this.mRsp.registerUserResponse,
            onMsg: function(buf) {
                var obj = JSON.parse(buf);
                if (obj.status === 0) {
                    LocalStore_Save(cacheKey, buf);
                    this.rsp(new MsRegistRsp(obj.status, obj.data.userid, obj.data.token, obj.data.nickname, obj.data.avatar));
                } else {
                    this.rsp(new MsRegistRsp(obj.status, 0, "err", buf, "err"));
                }
                MVS.mtaReport && MVS.mtaReport.Report("registerUserResponse");
            },
            onErr: function() {
                this.rsp(new MsRegistRsp(errCode === 0 ? -1 : errCode, 0, "err", errMsg, "err"));
            }
        };
        new MVS.MatchvsHttp(rep).get(url);
        return 0;
    };
    MatchvsEngine.prototype.getHostList = function() {
        var gameId = M_EVN.gameID;
        var channel = M_EVN.channel;
        var platform = M_EVN.platform;
        var uri = _obj.APIPATH.HOSTLIST;
        var isUseWSS = MVS.MsUtil.isNeedUseWSS();
        var url = MVS.Host.MAIN_URL + uri + "?mac=0" + "&gameid=" + gameId + "&channel=" + channel + "&platform=" + platform + (isUseWSS ? "&useWSSProxy=1" : "");
        var engine = this;
        var rep = {
            onMsg: function(buf) {
                var obj = JSON.parse(buf);
                if (obj.status === 200) {
                    engine.mState.SetInit();
                    var http = "https://";
                    MVS.Host.VS_USER_URL = http + obj.data.vsuser;
                    MVS.Host.HOST_GATWAY_ADDR = (isUseWSS ? "wss://" : "ws://") + (isUseWSS ? obj.data.wssProxy : obj.data.engine + ":7001");
                    MVS.Host.CMSNS_URL = http + obj.data.cmsns;
                    MVS.Host.VS_OPEN_URL = http + obj.data.vsopen;
                    MVS.Host.VS_PAY_URL = http + obj.data.vspay;
                    MVS.Host.VS_PRODUCT_URL = http + obj.data.VS_PRODUCT_URL;
                }
                MVS.mtaReport && MVS.mtaReport.Report("initResponse");
                engine.mRsp.initResponse(obj.status);
            },
            onErr: function(errCode, errMsg) {
                console.error("getHostListErrCode" + errCode + " getHostListErrMsg" + errMsg);
                engine.mRsp.errorResponse(errCode, errMsg);
            }
        };
        new MVS.MatchvsHttp(rep).get(url);
        return 0;
    };
    MatchvsEngine.prototype.getRoomListEx = function(filter) {
        var resNo = this.mState.HaveLogin();
        if (resNo !== 0) return resNo;
        var buf = this.mProtocol.getRoomListEx(M_EVN.gameID, filter);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.getRoomDetail = function(roomID) {
        var resNo = this.mState.HaveLogin();
        if (resNo !== 0) return resNo;
        var buf = this.mProtocol.getRoomDetail(M_EVN.gameID, roomID);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.setRoomProperty = function(roomID, roomProperty) {
        if (roomProperty.length === 0) return -1;
        if (roomProperty.length > 1024) return -21;
        var resNo = this.mState.HaveInRoom();
        if (resNo !== 0) return resNo;
        var buf = this.mProtocol.setRoomProperty(M_EVN.gameID, M_User.ID, roomID, roomProperty);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.joinWatchRoom = function(roomID, userProfile) {
        var ret = this.mState.InRoomCheck();
        if (ret !== 0) return ret;
        if (userProfile.length > 512) return -21;
        this.mWatchRoomID = roomID;
        var buf = this.mProtocol.joinWatchRoom(M_EVN.gameID, M_User.ID, this.mWatchRoomID, userProfile);
        this.mState.SetJoinWatching();
        this.mGTWNetwork.send(buf);
        return ret;
    };
    MatchvsEngine.prototype.enterLiveRoom = function(bookInfo, roomID) {
        this.mNetWorkCallBackImp.frameCache = [];
        if (roomID) {
            this.mWatchRoomID = roomID;
        }
        this.mWatchNetwrok = new MVS.MatchvsNetWork(MVS.Host.HOST_WATCH_ADDR, this.mNetWorkCallBackImp);
        var buf = this.mProtocol.enterLiveRoom(bookInfo, M_EVN.gameID, M_User.ID, this.mWatchRoomID, 0);
        this.mWatchNetwrok.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.liveHeartBeat = function() {
        var hb = M_ENGINE;
        var roomid = hb.mRecntRoomID;
        var buf = hb.mProtocol.liveHeartBeat(M_EVN.gameID, roomid, M_User.ID);
        hb.mWatchNetwrok.send(buf);
        MatchvsLog.logI("live heartBeat");
        return 0;
    };
    MatchvsEngine.prototype.leaveWatchRoom = function(cpProto) {
        var resNo = this.mState.HaveLogin();
        if (resNo !== 0) return resNo;
        var roomid = this.mWatchRoomID;
        var buf = this.mProtocol.leaveWatchRoom(M_EVN.gameID, M_User.ID, roomid, cpProto);
        this.mGTWNetwork.send(buf);
        MatchvsLog.logI("leaveWatchRoom");
        return 0;
    };
    MatchvsEngine.prototype.sendWatchEvent = function(userIDs, msgType, desttype, data) {
        var roomid = this.mRecntRoomID;
        if (data.length > 1024) return -21;
        var buf = this.mProtocol.broadCastWatch(roomid, userIDs, desttype, msgType, data);
        this.mWatchNetwrok.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.setLiveOffset = function(offsetMS) {
        var ret = this.mState.HaveInWatch();
        if (ret !== 0) return ret;
        var roomid = this.mWatchRoomID;
        var buf = this.mProtocol.setLiveOffset(M_EVN.gameID, roomid, M_User.ID, offsetMS);
        this.mWatchNetwrok.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.getWatchRoomList = function(filter) {
        var resNo = this.mState.HaveLogin();
        if (resNo !== 0) return resNo;
        var buf = this.mProtocol.getWatchRooms(M_EVN.gameID, filter);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.changeRole = function(userProfile, rType) {
        var roomid = this.mWatchRoomID;
        var roomtype = 0;
        var ret = this.mState.HaveLogin();
        if (ret !== 0) return ret;
        MatchvsLog.logI("targetRoomType:" + rType + " mCntRoomType:" + this.mCntRoomType + " roomID:" + this.mRecntRoomID);
        if (this.mCntRoomType === MVS.TgRoomType.PRoom) {
            ret = this.mState.HaveInRoom();
            if (this.mCntRoomType === rType) return -30;
            roomid = this.mRecntRoomID;
            roomtype = MVS.TgRoomType.WRoom;
        } else if (this.mCntRoomType === MVS.TgRoomType.WRoom) {
            ret = this.mState.HaveInWatch();
            if (this.mCntRoomType === rType) return -30;
            roomid = this.mWatchRoomID;
            roomtype = MVS.TgRoomType.PRoom;
        } else {
            return -1;
        }
        if (ret !== 0) return ret;
        var buf = this.mProtocol.changeRoleProto(M_User.ID, M_EVN.gameID, roomid, roomtype, userProfile);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.setReconnectTimeout = function(timeout) {
        var timeNo = Number(timeout);
        var ret = this.mState.HaveLogin();
        if (ret !== 0) return ret;
        if (timeNo < -1 || timeNo > 600) {
            return -27;
        }
        var buf = this.mProtocol.setReconnectTimeout(M_User.ID, timeout);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.createTeam = function(teaminfo) {
        var ret = this.mState.InRoomCheck();
        if (ret !== 0) return ret;
        if (teaminfo.userProfile.length > 512) {
            return -21;
        }
        if (Number(teaminfo.capacity) > 50 || Number(teaminfo.capacity) < 1) {
            return -20;
        }
        var team = {
            teamID: "0",
            password: teaminfo.password,
            capacity: teaminfo.capacity,
            mode: teaminfo.mode,
            owner: 0,
            visibility: teaminfo.visibility
        };
        var player = {
            userID: M_User.ID,
            userProfile: teaminfo.userProfile
        };
        var buf = this.mProtocol.CreateTeam(M_EVN.gameID, team, player);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.joinTeam = function(teaminfo) {
        var ret = this.mState.InRoomCheck();
        if (ret !== 0) return ret;
        if (teaminfo.userProfile.length > 512) {
            return -21;
        }
        this.mTeamID = teaminfo.teamID;
        var info = {
            gameID: M_EVN.gameID,
            teamID: teaminfo.teamID,
            password: teaminfo.password,
            player: {
                userID: M_User.ID,
                userProfile: teaminfo.userProfile
            }
        };
        var buf = this.mProtocol.JoinTeam(info);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.leaveTeam = function() {
        var ret = this.mState.HaveLogin();
        if (ret !== 0) return ret;
        var args = {
            gameID: M_EVN.gameID,
            userID: M_User.ID,
            teamID: this.mTeamID
        };
        var buf = this.mProtocol.LeaveTeam(args);
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.teamMatch = function(info) {
        var ret = this.mState.InRoomCheck();
        if (ret !== 0) return ret;
        if (info.roomProperty.length > 512) {
            return -21;
        }
        if (info.maxPlayer > 100 || info.maxPlayer < 0) {
            return -20;
        }
        var args = {
            gameID: M_EVN.gameID,
            teamID: this.mTeamID,
            userID: M_User.ID,
            cond: info.cond,
            watchSet: info.watchSet,
            roomInfo: {
                roomName: info.roomName,
                mode: info.mode,
                maxPlayer: info.maxPlayer,
                canWatch: info.canWatch,
                visibility: info.visibility,
                roomProperty: info.roomProperty
            }
        };
        var buf = this.mProtocol.TeamMatch(args);
        this.mState.SetTeamMatching();
        this.mGTWNetwork.send(buf);
        return 0;
    };
    MatchvsEngine.prototype.getOffLineData = function(cacheFrameMS) {
        var ret = this.mState.HaveInRoom();
        if (ret !== 0) return ret;
        var args = {
            gameID: M_EVN.gameID,
            roomID: this.mRecntRoomID + "",
            cacheFrameMS: cacheFrameMS
        };
        var buf = this.mProtocol.GetOffLineData(args);
        this.mHotelNetWork.send(buf);
        return 0;
    };
    window.MatchvsEngine = MatchvsEngine;
    _obj.MatchvsEngine = MatchvsEngine;
})(MVS || {});

try {
    if (module && module.exports) {
        module.exports = {
            MVS: MVS,
            MatchvsLog: MatchvsLog,
            MatchvsEngine: MVS.MatchvsEngine,
            MatchvsResponse: MatchvsResponse,
            MsMatchInfo: MsMatchInfo,
            MsCreateRoomInfo: MsCreateRoomInfo,
            MsRoomFilter: MsRoomFilter,
            MsRoomFilterEx: MsRoomFilterEx,
            LocalStore_Clear: LocalStore_Clear,
            MsReopenRoomResponse: MsReopenRoomResponse,
            MsReopenRoomNotify: MsReopenRoomNotify,
            MatchvsHttp: MVS.MatchvsHttp
        };
    }
} catch (error) {
    console.log(error);
}

window.MVS = MVS;

window.MatchvsLog = MatchvsLog;

window.MatchvsEngine = MatchvsEngine;

window.MatchvsResponse = MatchvsResponse;

window.MsMatchInfo = MsMatchInfo;

window.MsCreateRoomInfo = MsCreateRoomInfo;

window.MsRoomFilter = MsRoomFilter;

window.MsRoomFilterEx = MsRoomFilterEx;

window.LocalStore_Clear = LocalStore_Clear;

window.MsReopenRoomResponse = MsReopenRoomResponse;

window.MsReopenRoomNotify = MsReopenRoomNotify;

window.MatchvsHttp = MVS.MatchvsHttp;